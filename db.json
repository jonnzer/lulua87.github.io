{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1488779963000},{"_id":"source/_posts/.DS_Store","hash":"87cc5f052ca621554cd7dbe831a22fa8e668c1eb","modified":1488783946000},{"_id":"source/_posts/css_class_naming.md","hash":"d50198538c25d6ed17f458e005cea6312b269de3","modified":1488784056000},{"_id":"source/_posts/controlling-css-animations-transitions-javascript.md","hash":"d22379095547427db014e0536b28ae9ac83cb779","modified":1488621695000},{"_id":"source/_posts/hexo_blog_for_github_branch_auto_update.md","hash":"d77ee4979a5a524a01ca0b4dd9a8af38f0a2dd75","modified":1488785607000},{"_id":"source/_posts/some-basic-js-questions.md","hash":"790c7241327d2e6d1b40beb5c71b59f2eef212e0","modified":1488621695000},{"_id":"source/_posts/some-javascript-async-pattern.md","hash":"2eba3986c02727e5c036f794af4dfeaebedd0f0d","modified":1488621695000},{"_id":"source/_posts/some-javascript-skills.md","hash":"f241352914bc8590cd22253cbc353d5dad7812aa","modified":1488621695000},{"_id":"source/_posts/some-css3-practice-questions.md","hash":"33301fdb8527946ac781fc4b0023c82eda54978f","modified":1488621695000},{"_id":"source/_posts/javascript-design-pattern.md","hash":"603526596d00f6b09b5d640499adf3bb163237d1","modified":1488621695000},{"_id":"source/_posts/usage-for-angularjs-ng-select.md","hash":"a3e183c60d73c62204c57bc4e8d6fdecbb2ea8a4","modified":1488621695000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488779880000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488779880000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1488779880000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488779880000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488779880000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488779880000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488779880000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1488779880000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488779880000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488779880000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488779880000},{"_id":"themes/next/_config.yml","hash":"6576f34441ed131e07b8968ddc4d10027fcfb333","modified":1488779880000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488779880000},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1488779880000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1488779880000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488779880000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1488779880000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488779851000},{"_id":"themes/next/.git/index","hash":"e83b58508393a93c70a93d21de3735108c535055","modified":1488779880000},{"_id":"themes/next/.git/packed-refs","hash":"15d1c7f7b4e74891a49d4e1b9e43dd6d54646e99","modified":1488779880000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488779880000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488779880000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488779880000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488779880000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488779880000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488779880000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488779880000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488779880000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488779880000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488779880000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488779880000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488779880000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488779880000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488779880000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488779880000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488779880000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488779880000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488779880000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488779880000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488779880000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1488779880000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488779880000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488779880000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488779880000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488779880000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488779880000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488779880000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488779880000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488779851000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488779851000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488779851000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488779851000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488779851000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488779851000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1488779851000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488779851000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488779851000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488779851000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1488779851000},{"_id":"themes/next/.git/logs/HEAD","hash":"8ab5b77c2dd18b594e1e81e862f4b064be8ae436","modified":1488779880000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488779880000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488779880000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488779880000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488779880000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1488779880000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488779880000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488779880000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488779880000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488779880000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488779880000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488779880000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488779880000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488779880000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488779880000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488779880000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488779880000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488779880000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488779880000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488779880000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488779880000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488779880000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488779880000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488779880000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488779880000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488779880000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488779880000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488779880000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488779880000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488779880000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488779880000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488779880000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488779880000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488779880000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488779880000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488779880000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488779880000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488779880000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488779880000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488779880000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488779880000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488779880000},{"_id":"themes/next/.git/refs/heads/master","hash":"660490d92f0b4eb073d3643f0243e479d0a8bb25","modified":1488779880000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488779880000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488779880000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1488779880000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488779880000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1488779880000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488779880000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488779880000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488779880000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488779880000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488779880000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488779880000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488779880000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488779880000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488779880000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488779880000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488779880000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488779880000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488779880000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488779880000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488779880000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488779880000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488779880000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488779880000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488779880000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1488779880000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488779880000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1488779880000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488779880000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488779880000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488779880000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488779880000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488779880000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488779880000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8ab5b77c2dd18b594e1e81e862f4b064be8ae436","modified":1488779880000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488779880000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488779880000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488779880000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488779880000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488779880000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488779880000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488779880000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488779880000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488779880000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488779880000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1488779880000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488779880000},{"_id":"themes/next/.git/objects/pack/pack-68a6a8ca109472d707b16f81556b00e6309cd805.idx","hash":"05d698b9d9602dd7ce3c0789319a4d513bfd8196","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1488779880000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488779880000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8ab5b77c2dd18b594e1e81e862f4b064be8ae436","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488779880000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488779880000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488779880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1488779880000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488779880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1488779880000},{"_id":"themes/next/.git/objects/pack/pack-68a6a8ca109472d707b16f81556b00e6309cd805.pack","hash":"2d24091c943c38b03a745a34ada0b7765c892d82","modified":1488779880000},{"_id":"public/archives/index.html","hash":"d9c096b308bb96453f12afee130cb2c21f2b8442","modified":1488785656313},{"_id":"public/archives/2016/index.html","hash":"2bde97f241d51d2cb8742cf9044d3e736955534d","modified":1488785656315},{"_id":"public/archives/2016/03/index.html","hash":"b78d4e11e39e8e04324547e4a6860a65f82a536c","modified":1488785656315},{"_id":"public/archives/2016/04/index.html","hash":"cdd53be2821a9c27be2522bc3c696e26be99acf7","modified":1488785656315},{"_id":"public/archives/2016/05/index.html","hash":"4244b655938e4025cf1e7b6ded650b87b56f2e2d","modified":1488785656315},{"_id":"public/archives/2017/index.html","hash":"2743135a40ad830ecf9ccd0930dc7c8e42b16839","modified":1488785656316},{"_id":"public/archives/2017/03/index.html","hash":"2b1b284e689c2275014ac5fab93a552fb590e78c","modified":1488785656316},{"_id":"public/tags/CSS/index.html","hash":"634e65f46b90e33ae43d2b3c34e32f90a9bbfe82","modified":1488785656316},{"_id":"public/tags/CSS命名/index.html","hash":"51300be59d32b35af89a6f25b9247d28acd0b805","modified":1488785656316},{"_id":"public/tags/Javascript/index.html","hash":"9382c27415fd181de72a37ca6af56302dcdf56c7","modified":1488785656316},{"_id":"public/tags/技巧/index.html","hash":"0a237cbc2cad84100de0b176a352bdcfbf15bc7d","modified":1488785656316},{"_id":"public/tags/异步编程模型/index.html","hash":"2fc23a11ad39395db06f0ca03e327e9fecd3c259","modified":1488785656316},{"_id":"public/tags/css3/index.html","hash":"71961d428540e8041628d8ade788db509f6525a3","modified":1488785656316},{"_id":"public/tags/做题/index.html","hash":"8dfe97a0e5a82ef9a9cc049297f149dd903bd099","modified":1488785656316},{"_id":"public/tags/设计模式/index.html","hash":"91c580121a85ba9742a4a6557dd12f6ee11c2b2b","modified":1488785656316},{"_id":"public/tags/AngularJS/index.html","hash":"b4b65519a62f19200d3ae3b06b5f18d82aa129e7","modified":1488785656316},{"_id":"public/tags/内置指令/index.html","hash":"07cdd775ec3864ac06145c36afe7601b730cb915","modified":1488785656316},{"_id":"public/2017/03/06/css_class_naming/index.html","hash":"1d37c519ef8386a9c7b38bbbed30c4292669dee6","modified":1488785656316},{"_id":"public/2016/05/09/some-css3-practice-questions/index.html","hash":"70d5303c59f89ef6fafe6acf1d020259653ee3a8","modified":1488785656316},{"_id":"public/2016/05/09/controlling-css-animations-transitions-javascript/index.html","hash":"6041f5195b79e8e9138534a9223c82504865cc80","modified":1488785656316},{"_id":"public/2016/05/09/some-javascript-skills/index.html","hash":"f56fabe94c848487cb121f929ced64600a0ef7fd","modified":1488785656317},{"_id":"public/2016/04/28/usage-for-angularjs-ng-select/index.html","hash":"73d2fa816bb5d2c67a99c32f3fb8ac481f098b0d","modified":1488785656317},{"_id":"public/2016/04/12/javascript-design-pattern/index.html","hash":"659f1e56d0939162c4e650d4f3de377a0af47f1a","modified":1488785656317},{"_id":"public/2016/04/12/some-basic-js-questions/index.html","hash":"2592d430d2bda45b59e785af9045f933237bd263","modified":1488785656317},{"_id":"public/2016/03/31/some-javascript-async-pattern/index.html","hash":"50c306bea851ec7f04e3bdc400ff1d5d0fc724a4","modified":1488785656317},{"_id":"public/index.html","hash":"fb1b5cbaa06b94a9c4e6e32e65344f8ef02b0761","modified":1488785656317},{"_id":"public/tags/hexo/index.html","hash":"31ba5ae5d95445647caad72fde89280f84beb537","modified":1488785656334},{"_id":"public/tags/github/index.html","hash":"1269694fdf82cecea76a7fc1ed27c298b266b7af","modified":1488785656334},{"_id":"public/2017/03/06/hexo_blog_for_github_branch_auto_update/index.html","hash":"b52ec20d30fa7eb84f477441968f75065e46d206","modified":1488785656335},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488785656351},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488785656351},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488785656351},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488785656352},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488785656352},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488785656352},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488785656352},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488785656352},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488785656352},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488785656352},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488785656352},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488785656352},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488785656352},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488785656352},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488785656352},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488785656352},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488785656353},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488785656353},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488785656353},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488785656353},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488785656353},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488785656353},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488785656353},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488785656353},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1488785657287},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1488785657299},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488785657316},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1488785657316},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488785657316},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1488785657316},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1488785657316},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488785657316},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488785657316},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1488785657316},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1488785657316},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1488785657316},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488785657316},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1488785657316},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488785657316},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1488785657316},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488785657316},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488785657316},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488785657317},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1488785657317},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488785657317},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1488785657317},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488785657317},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488785657317},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488785657317},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488785657317},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488785657317},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488785657317},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488785657317},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488785657317},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488785657317},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488785657317},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488785657317},{"_id":"public/css/main.css","hash":"62f7667294b6699a87f027a32d5358d23abb1192","modified":1488785657317},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488785657317},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488785657317},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488785657317},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488785657317},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488785657317},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488785657317},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1488785657317},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1488785657318},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488785657318},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488785657318},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1488785657318},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1488785657318},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1488785657318},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1488785657325}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"CSS－－命名class","date":"2017-03-06T03:00:00.000Z","description":"什么鬼，又不知道怎么命名class了","_content":"[原文转自imweb社区：](http://imweb.io/topic/5623c25734764b2c16769749)\n\n---\n\n相信写css的人都会遇到下面的问题：\n糟糕，怎么命名这个class，好像不太贴切，要是冲突了怎么办，要不要设计成通用一点...\n而改别人css代码的时候则会一直有个疑问：这个class到底是只在这个地方用了，还是其他地方都用了？\n于是就有了下面的做法：\n最后终于被逼出了个class，简洁也好，中英混搭也罢，看着一头雾水也没关系，反正最后页面显示出来的。\n这个class应该是只有这个地方用到，我可以放心写。上线之后。如果没问题，则暗自自我欣赏，看吧问题就这么简单，分分钟搞定呀；如果冲突了，则无限感慨，哎，改的时候我就隐隐不安啊，妈蛋，深坑，这是谁写的，谁写的！！！\n不好，这个class说不定其他地方也用到了，我得加个限制范围，加个父元素？要不重新再命名个class吧，比较保险。最后如果没问题则表示还好比较机智，怎么说哥也是混过的，还是有几斤几两的；如果有问题则表示防不慎防啊，这也太太太坑了吧。\n由此可见，class的命名真不是一件简单的事，尤其还要兼顾可辨别性与可读性。\n\n## class命名到底有多难\n\n第一，class跟id不一样，class本来就是设计用来可以重复利用的，而id才是设计唯一的（如果遵循BEM，class几乎也都是唯一的了）。\n第二，样式是可以覆盖的，而且先按照权重，再按照定义的先后顺序。也许你花了十分钟设计定义的一个class样式，人家分分钟就给你干掉了，这得多恼火；也许这个页面好好的，跑到另一个页面就跟原先的样式有了冲突。\n所以class命名的难就难在既要重复利用，又要避免样式的冲突。如果要重复利用，那么当然是越简单越好，越抽象可用的地方越大，太具体了就完蛋了。而如果要避免样式冲突。BEM的方式最简单，class都唯一了，那还冲突个毛线；其次就是通过父元素限定作用域，可以搞几个层级，而不是单独一个class定义样式；还有就是追加class，来实现差异化；最后不同的页面不同的文件，你用你的我用我的。\n\n```js\n\n// BEM\n.imgslide__item__img{}\n\n// 父元素限定\n.imgslide .item .img{}\n\n// 追加class\n.img{}\n.img--special{}\n\n// 不同页面不同文件\n// a.html & a.css\n.img{}\n// b.html & b.css\n.img{}\n\n```\n\n## class命名的发展历程\n关于class的命名，其实跟人名也差不多，如果要想别人看得懂，那关键还是在于可识别性。到目前为止class的命名大概经历了下面几个重要阶段：\n1. 混沌阶段，没有规则就是最好的规则\n2. 原子类阶段，聚集神龙现身手\n3. 模块阶段，以职能划分，添加前缀\n4. BEM阶段，规则有序\n\n### 混沌阶段\n这个没什么好说的，刚开始学html的都是这样，名字先简单的来，不够再添加1，2，3什么后缀，或者中英混搭等等，如下：\n\n```js\nh1.title\nh2.title2\nh2.title2-1\nh2.title2-2\ndiv.hd\ndiv.hd-s\ndiv.hd2\ndiv.hd-xiangxi\n```\n\n一个字，太乱。完全无章程，规律可循，想怎么写就怎么写，写到哪里是哪里。看class去猜意思很可能就是错误的，如.red{color:red;font-size:14px;}，明明说好的红色，却顺带定义了个字体大小。","source":"_posts/css_class_naming.md","raw":"---\ntitle: \"CSS－－命名class\"\ndate: 2017-03-06 11:00:00\ntags: ['CSS', 'CSS命名']\ndescription: \"什么鬼，又不知道怎么命名class了\"\n\n---\n[原文转自imweb社区：](http://imweb.io/topic/5623c25734764b2c16769749)\n\n---\n\n相信写css的人都会遇到下面的问题：\n糟糕，怎么命名这个class，好像不太贴切，要是冲突了怎么办，要不要设计成通用一点...\n而改别人css代码的时候则会一直有个疑问：这个class到底是只在这个地方用了，还是其他地方都用了？\n于是就有了下面的做法：\n最后终于被逼出了个class，简洁也好，中英混搭也罢，看着一头雾水也没关系，反正最后页面显示出来的。\n这个class应该是只有这个地方用到，我可以放心写。上线之后。如果没问题，则暗自自我欣赏，看吧问题就这么简单，分分钟搞定呀；如果冲突了，则无限感慨，哎，改的时候我就隐隐不安啊，妈蛋，深坑，这是谁写的，谁写的！！！\n不好，这个class说不定其他地方也用到了，我得加个限制范围，加个父元素？要不重新再命名个class吧，比较保险。最后如果没问题则表示还好比较机智，怎么说哥也是混过的，还是有几斤几两的；如果有问题则表示防不慎防啊，这也太太太坑了吧。\n由此可见，class的命名真不是一件简单的事，尤其还要兼顾可辨别性与可读性。\n\n## class命名到底有多难\n\n第一，class跟id不一样，class本来就是设计用来可以重复利用的，而id才是设计唯一的（如果遵循BEM，class几乎也都是唯一的了）。\n第二，样式是可以覆盖的，而且先按照权重，再按照定义的先后顺序。也许你花了十分钟设计定义的一个class样式，人家分分钟就给你干掉了，这得多恼火；也许这个页面好好的，跑到另一个页面就跟原先的样式有了冲突。\n所以class命名的难就难在既要重复利用，又要避免样式的冲突。如果要重复利用，那么当然是越简单越好，越抽象可用的地方越大，太具体了就完蛋了。而如果要避免样式冲突。BEM的方式最简单，class都唯一了，那还冲突个毛线；其次就是通过父元素限定作用域，可以搞几个层级，而不是单独一个class定义样式；还有就是追加class，来实现差异化；最后不同的页面不同的文件，你用你的我用我的。\n\n```js\n\n// BEM\n.imgslide__item__img{}\n\n// 父元素限定\n.imgslide .item .img{}\n\n// 追加class\n.img{}\n.img--special{}\n\n// 不同页面不同文件\n// a.html & a.css\n.img{}\n// b.html & b.css\n.img{}\n\n```\n\n## class命名的发展历程\n关于class的命名，其实跟人名也差不多，如果要想别人看得懂，那关键还是在于可识别性。到目前为止class的命名大概经历了下面几个重要阶段：\n1. 混沌阶段，没有规则就是最好的规则\n2. 原子类阶段，聚集神龙现身手\n3. 模块阶段，以职能划分，添加前缀\n4. BEM阶段，规则有序\n\n### 混沌阶段\n这个没什么好说的，刚开始学html的都是这样，名字先简单的来，不够再添加1，2，3什么后缀，或者中英混搭等等，如下：\n\n```js\nh1.title\nh2.title2\nh2.title2-1\nh2.title2-2\ndiv.hd\ndiv.hd-s\ndiv.hd2\ndiv.hd-xiangxi\n```\n\n一个字，太乱。完全无章程，规律可循，想怎么写就怎么写，写到哪里是哪里。看class去猜意思很可能就是错误的，如.red{color:red;font-size:14px;}，明明说好的红色，却顺带定义了个字体大小。","slug":"css_class_naming","published":1,"updated":"2017-03-06T07:07:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje3u00007rjlyakf1wbn","content":"<p><a href=\"http://imweb.io/topic/5623c25734764b2c16769749\" target=\"_blank\" rel=\"external\">原文转自imweb社区：</a></p>\n<hr>\n<p>相信写css的人都会遇到下面的问题：<br>糟糕，怎么命名这个class，好像不太贴切，要是冲突了怎么办，要不要设计成通用一点…<br>而改别人css代码的时候则会一直有个疑问：这个class到底是只在这个地方用了，还是其他地方都用了？<br>于是就有了下面的做法：<br>最后终于被逼出了个class，简洁也好，中英混搭也罢，看着一头雾水也没关系，反正最后页面显示出来的。<br>这个class应该是只有这个地方用到，我可以放心写。上线之后。如果没问题，则暗自自我欣赏，看吧问题就这么简单，分分钟搞定呀；如果冲突了，则无限感慨，哎，改的时候我就隐隐不安啊，妈蛋，深坑，这是谁写的，谁写的！！！<br>不好，这个class说不定其他地方也用到了，我得加个限制范围，加个父元素？要不重新再命名个class吧，比较保险。最后如果没问题则表示还好比较机智，怎么说哥也是混过的，还是有几斤几两的；如果有问题则表示防不慎防啊，这也太太太坑了吧。<br>由此可见，class的命名真不是一件简单的事，尤其还要兼顾可辨别性与可读性。</p>\n<h2 id=\"class命名到底有多难\"><a href=\"#class命名到底有多难\" class=\"headerlink\" title=\"class命名到底有多难\"></a>class命名到底有多难</h2><p>第一，class跟id不一样，class本来就是设计用来可以重复利用的，而id才是设计唯一的（如果遵循BEM，class几乎也都是唯一的了）。<br>第二，样式是可以覆盖的，而且先按照权重，再按照定义的先后顺序。也许你花了十分钟设计定义的一个class样式，人家分分钟就给你干掉了，这得多恼火；也许这个页面好好的，跑到另一个页面就跟原先的样式有了冲突。<br>所以class命名的难就难在既要重复利用，又要避免样式的冲突。如果要重复利用，那么当然是越简单越好，越抽象可用的地方越大，太具体了就完蛋了。而如果要避免样式冲突。BEM的方式最简单，class都唯一了，那还冲突个毛线；其次就是通过父元素限定作用域，可以搞几个层级，而不是单独一个class定义样式；还有就是追加class，来实现差异化；最后不同的页面不同的文件，你用你的我用我的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BEM</span></div><div class=\"line\">.imgslide__item__img&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 父元素限定</span></div><div class=\"line\">.imgslide .item .img&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 追加class</span></div><div class=\"line\">.img&#123;&#125;</div><div class=\"line\">.img--special&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不同页面不同文件</span></div><div class=\"line\"><span class=\"comment\">// a.html &amp; a.css</span></div><div class=\"line\">.img&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// b.html &amp; b.css</span></div><div class=\"line\">.img&#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"class命名的发展历程\"><a href=\"#class命名的发展历程\" class=\"headerlink\" title=\"class命名的发展历程\"></a>class命名的发展历程</h2><p>关于class的命名，其实跟人名也差不多，如果要想别人看得懂，那关键还是在于可识别性。到目前为止class的命名大概经历了下面几个重要阶段：</p>\n<ol>\n<li>混沌阶段，没有规则就是最好的规则</li>\n<li>原子类阶段，聚集神龙现身手</li>\n<li>模块阶段，以职能划分，添加前缀</li>\n<li>BEM阶段，规则有序</li>\n</ol>\n<h3 id=\"混沌阶段\"><a href=\"#混沌阶段\" class=\"headerlink\" title=\"混沌阶段\"></a>混沌阶段</h3><p>这个没什么好说的，刚开始学html的都是这样，名字先简单的来，不够再添加1，2，3什么后缀，或者中英混搭等等，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1.title</div><div class=\"line\">h2.title2</div><div class=\"line\">h2.title2<span class=\"number\">-1</span></div><div class=\"line\">h2.title2<span class=\"number\">-2</span></div><div class=\"line\">div.hd</div><div class=\"line\">div.hd-s</div><div class=\"line\">div.hd2</div><div class=\"line\">div.hd-xiangxi</div></pre></td></tr></table></figure>\n<p>一个字，太乱。完全无章程，规律可循，想怎么写就怎么写，写到哪里是哪里。看class去猜意思很可能就是错误的，如.red{color:red;font-size:14px;}，明明说好的红色，却顺带定义了个字体大小。</p>\n","excerpt":"","more":"<p><a href=\"http://imweb.io/topic/5623c25734764b2c16769749\">原文转自imweb社区：</a></p>\n<hr>\n<p>相信写css的人都会遇到下面的问题：<br>糟糕，怎么命名这个class，好像不太贴切，要是冲突了怎么办，要不要设计成通用一点…<br>而改别人css代码的时候则会一直有个疑问：这个class到底是只在这个地方用了，还是其他地方都用了？<br>于是就有了下面的做法：<br>最后终于被逼出了个class，简洁也好，中英混搭也罢，看着一头雾水也没关系，反正最后页面显示出来的。<br>这个class应该是只有这个地方用到，我可以放心写。上线之后。如果没问题，则暗自自我欣赏，看吧问题就这么简单，分分钟搞定呀；如果冲突了，则无限感慨，哎，改的时候我就隐隐不安啊，妈蛋，深坑，这是谁写的，谁写的！！！<br>不好，这个class说不定其他地方也用到了，我得加个限制范围，加个父元素？要不重新再命名个class吧，比较保险。最后如果没问题则表示还好比较机智，怎么说哥也是混过的，还是有几斤几两的；如果有问题则表示防不慎防啊，这也太太太坑了吧。<br>由此可见，class的命名真不是一件简单的事，尤其还要兼顾可辨别性与可读性。</p>\n<h2 id=\"class命名到底有多难\"><a href=\"#class命名到底有多难\" class=\"headerlink\" title=\"class命名到底有多难\"></a>class命名到底有多难</h2><p>第一，class跟id不一样，class本来就是设计用来可以重复利用的，而id才是设计唯一的（如果遵循BEM，class几乎也都是唯一的了）。<br>第二，样式是可以覆盖的，而且先按照权重，再按照定义的先后顺序。也许你花了十分钟设计定义的一个class样式，人家分分钟就给你干掉了，这得多恼火；也许这个页面好好的，跑到另一个页面就跟原先的样式有了冲突。<br>所以class命名的难就难在既要重复利用，又要避免样式的冲突。如果要重复利用，那么当然是越简单越好，越抽象可用的地方越大，太具体了就完蛋了。而如果要避免样式冲突。BEM的方式最简单，class都唯一了，那还冲突个毛线；其次就是通过父元素限定作用域，可以搞几个层级，而不是单独一个class定义样式；还有就是追加class，来实现差异化；最后不同的页面不同的文件，你用你的我用我的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// BEM</span></div><div class=\"line\">.imgslide__item__img&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 父元素限定</span></div><div class=\"line\">.imgslide .item .img&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 追加class</span></div><div class=\"line\">.img&#123;&#125;</div><div class=\"line\">.img--special&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 不同页面不同文件</span></div><div class=\"line\"><span class=\"comment\">// a.html &amp; a.css</span></div><div class=\"line\">.img&#123;&#125;</div><div class=\"line\"><span class=\"comment\">// b.html &amp; b.css</span></div><div class=\"line\">.img&#123;&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"class命名的发展历程\"><a href=\"#class命名的发展历程\" class=\"headerlink\" title=\"class命名的发展历程\"></a>class命名的发展历程</h2><p>关于class的命名，其实跟人名也差不多，如果要想别人看得懂，那关键还是在于可识别性。到目前为止class的命名大概经历了下面几个重要阶段：</p>\n<ol>\n<li>混沌阶段，没有规则就是最好的规则</li>\n<li>原子类阶段，聚集神龙现身手</li>\n<li>模块阶段，以职能划分，添加前缀</li>\n<li>BEM阶段，规则有序</li>\n</ol>\n<h3 id=\"混沌阶段\"><a href=\"#混沌阶段\" class=\"headerlink\" title=\"混沌阶段\"></a>混沌阶段</h3><p>这个没什么好说的，刚开始学html的都是这样，名字先简单的来，不够再添加1，2，3什么后缀，或者中英混搭等等，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1.title</div><div class=\"line\">h2.title2</div><div class=\"line\">h2.title2<span class=\"number\">-1</span></div><div class=\"line\">h2.title2<span class=\"number\">-2</span></div><div class=\"line\">div.hd</div><div class=\"line\">div.hd-s</div><div class=\"line\">div.hd2</div><div class=\"line\">div.hd-xiangxi</div></pre></td></tr></table></figure>\n<p>一个字，太乱。完全无章程，规律可循，想怎么写就怎么写，写到哪里是哪里。看class去猜意思很可能就是错误的，如.red{color:red;font-size:14px;}，明明说好的红色，却顺带定义了个字体大小。</p>\n"},{"title":"如何使用JavaScript控制CSS Animations和Transitions","date":"2016-05-09T12:04:00.000Z","description":"注意：Animations(动画)和Transitions(过渡)是不同的;CSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。","_content":"[原文转自w3cplus：](http://www.w3cplus.com/animation/controlling-css-animations-transitions-javascript.html)\n\nCSS animations和transitions再加上点JavaScript就可以实现硬件加速动画，而且其交互效果比大多数JavaScript库更高效。 So,让我们快点开始吧！小伙伴们都等不及了！\n\n### 注意：Animations(动画)和Transitions(过渡)是不同的\n\nCSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。\n\n在这篇文章中，我们将分别针对上述内容进行讲解。\n\n### 控制CSS Transition(过渡)\n\n在编程论坛中，关于transition(过渡)的触发和暂停有无数的疑问。使用JavaScript可以很容易的解决这些疑问。\n\n触发元素的transiton(过渡)，切换元素的类名可以触发该元素的transition(过渡)\n\n暂停元素的transition(过渡)， 在你想要暂停过渡点，用getComputedStyle和getPropertyValue获取该元素相应的CSS属性值，然后设置该元素的对应的CSS属性等于你刚才获取到的CSS属性值。\n\n以下是该方法的一个例子。\n\nHTML:\n```js\n<h3>Pure Javascript</h3>\n<div class='box'></div> \n<button class='toggleButton' value='play'>Play</button>\n\n<h3>jQuery</h3>\n<div class='box'></div> \n<button class='toggleButton' value='play'>Play</button>\n```\n\ncss:\n\n```js\n.box {\n  margin: 30px;\n  height: 50px;\n  width: 50px;\n  background-color: blue;\n}\n.box.horizTranslate {\n  -webkit-transition: 3s;\n  -moz-transition: 3s;\n  -ms-transition: 3s;\n  -o-transition: 3s;\n  transition: 3s;\n  margin-left: 50% !important;\n}\n```\n\nJS:\n```js\nHTML  CSS  JS  Result\nEdit on \nvar boxOne = document.getElementsByClassName('box')[0],\n    $boxTwo = $('.box:eq(1)');\n\ndocument.getElementsByClassName('toggleButton')[0].onclick = function() {\n  if(this.innerHTML === 'Play') \n  { \n    this.innerHTML = 'Pause';\n    boxOne.classList.add('horizTranslate');\n  } else {\n    this.innerHTML = 'Play';\n    var computedStyle = window.getComputedStyle(boxOne),\n        marginLeft = computedStyle.getPropertyValue('margin-left');\n    boxOne.style.marginLeft = marginLeft;\n    boxOne.classList.remove('horizTranslate');    \n  }  \n}\n\n$('.toggleButton:eq(1)').on('click', function() { \n  if($(this).html() === 'Play') \n  {\n    $(this).html('Pause');\n    $boxTwo.addClass('horizTranslate');\n  } else {\n    $(this).html('Play');\n    var computedStyle = $boxTwo.css('margin-left');\n    $boxTwo.removeClass('horizTranslate');\n    $boxTwo.css('margin-left', computedStyle);\n  }  \n});\n```","source":"_posts/controlling-css-animations-transitions-javascript.md","raw":"---\ntitle: \"如何使用JavaScript控制CSS Animations和Transitions\"\ndate: 2016-05-09 20:04:00\ntags: ['Javascript', '技巧']\ndescription: \"注意：Animations(动画)和Transitions(过渡)是不同的;CSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。\"\n\n\n---\n[原文转自w3cplus：](http://www.w3cplus.com/animation/controlling-css-animations-transitions-javascript.html)\n\nCSS animations和transitions再加上点JavaScript就可以实现硬件加速动画，而且其交互效果比大多数JavaScript库更高效。 So,让我们快点开始吧！小伙伴们都等不及了！\n\n### 注意：Animations(动画)和Transitions(过渡)是不同的\n\nCSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。\n\n在这篇文章中，我们将分别针对上述内容进行讲解。\n\n### 控制CSS Transition(过渡)\n\n在编程论坛中，关于transition(过渡)的触发和暂停有无数的疑问。使用JavaScript可以很容易的解决这些疑问。\n\n触发元素的transiton(过渡)，切换元素的类名可以触发该元素的transition(过渡)\n\n暂停元素的transition(过渡)， 在你想要暂停过渡点，用getComputedStyle和getPropertyValue获取该元素相应的CSS属性值，然后设置该元素的对应的CSS属性等于你刚才获取到的CSS属性值。\n\n以下是该方法的一个例子。\n\nHTML:\n```js\n<h3>Pure Javascript</h3>\n<div class='box'></div> \n<button class='toggleButton' value='play'>Play</button>\n\n<h3>jQuery</h3>\n<div class='box'></div> \n<button class='toggleButton' value='play'>Play</button>\n```\n\ncss:\n\n```js\n.box {\n  margin: 30px;\n  height: 50px;\n  width: 50px;\n  background-color: blue;\n}\n.box.horizTranslate {\n  -webkit-transition: 3s;\n  -moz-transition: 3s;\n  -ms-transition: 3s;\n  -o-transition: 3s;\n  transition: 3s;\n  margin-left: 50% !important;\n}\n```\n\nJS:\n```js\nHTML  CSS  JS  Result\nEdit on \nvar boxOne = document.getElementsByClassName('box')[0],\n    $boxTwo = $('.box:eq(1)');\n\ndocument.getElementsByClassName('toggleButton')[0].onclick = function() {\n  if(this.innerHTML === 'Play') \n  { \n    this.innerHTML = 'Pause';\n    boxOne.classList.add('horizTranslate');\n  } else {\n    this.innerHTML = 'Play';\n    var computedStyle = window.getComputedStyle(boxOne),\n        marginLeft = computedStyle.getPropertyValue('margin-left');\n    boxOne.style.marginLeft = marginLeft;\n    boxOne.classList.remove('horizTranslate');    \n  }  \n}\n\n$('.toggleButton:eq(1)').on('click', function() { \n  if($(this).html() === 'Play') \n  {\n    $(this).html('Pause');\n    $boxTwo.addClass('horizTranslate');\n  } else {\n    $(this).html('Play');\n    var computedStyle = $boxTwo.css('margin-left');\n    $boxTwo.removeClass('horizTranslate');\n    $boxTwo.css('margin-left', computedStyle);\n  }  \n});\n```","slug":"controlling-css-animations-transitions-javascript","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4000017rjl3n64y0km","content":"<p><a href=\"http://www.w3cplus.com/animation/controlling-css-animations-transitions-javascript.html\" target=\"_blank\" rel=\"external\">原文转自w3cplus：</a></p>\n<p>CSS animations和transitions再加上点JavaScript就可以实现硬件加速动画，而且其交互效果比大多数JavaScript库更高效。 So,让我们快点开始吧！小伙伴们都等不及了！</p>\n<h3 id=\"注意：Animations-动画-和Transitions-过渡-是不同的\"><a href=\"#注意：Animations-动画-和Transitions-过渡-是不同的\" class=\"headerlink\" title=\"注意：Animations(动画)和Transitions(过渡)是不同的\"></a>注意：Animations(动画)和Transitions(过渡)是不同的</h3><p>CSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。</p>\n<p>在这篇文章中，我们将分别针对上述内容进行讲解。</p>\n<h3 id=\"控制CSS-Transition-过渡\"><a href=\"#控制CSS-Transition-过渡\" class=\"headerlink\" title=\"控制CSS Transition(过渡)\"></a>控制CSS Transition(过渡)</h3><p>在编程论坛中，关于transition(过渡)的触发和暂停有无数的疑问。使用JavaScript可以很容易的解决这些疑问。</p>\n<p>触发元素的transiton(过渡)，切换元素的类名可以触发该元素的transition(过渡)</p>\n<p>暂停元素的transition(过渡)， 在你想要暂停过渡点，用getComputedStyle和getPropertyValue获取该元素相应的CSS属性值，然后设置该元素的对应的CSS属性等于你刚才获取到的CSS属性值。</p>\n<p>以下是该方法的一个例子。</p>\n<p>HTML:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;Pure Javascript&lt;/h3&gt;</div><div class=\"line\">&lt;div class='box'&gt;&lt;/div&gt; </div><div class=\"line\">&lt;button class='toggleButton' value='play'&gt;Play&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;h3&gt;jQuery&lt;/h3&gt;</div><div class=\"line\">&lt;div class='box'&gt;&lt;/div&gt; </div><div class=\"line\">&lt;button class='toggleButton' value='play'&gt;Play&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>css:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  <span class=\"attr\">margin</span>: <span class=\"number\">30</span>px;</div><div class=\"line\">  height: <span class=\"number\">50</span>px;</div><div class=\"line\">  width: <span class=\"number\">50</span>px;</div><div class=\"line\">  background-color: blue;</div><div class=\"line\">&#125;</div><div class=\"line\">.box.horizTranslate &#123;</div><div class=\"line\">  -webkit-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -moz-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -ms-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -o-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  margin-left: <span class=\"number\">50</span>% !important;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JS:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML  CSS  JS  Result</div><div class=\"line\">Edit on </div><div class=\"line\"><span class=\"keyword\">var</span> boxOne = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'box'</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">    $boxTwo = $(<span class=\"string\">'.box:eq(1)'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'toggleButton'</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.innerHTML === <span class=\"string\">'Play'</span>) </div><div class=\"line\">  &#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">'Pause'</span>;</div><div class=\"line\">    boxOne.classList.add(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">'Play'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> computedStyle = <span class=\"built_in\">window</span>.getComputedStyle(boxOne),</div><div class=\"line\">        marginLeft = computedStyle.getPropertyValue(<span class=\"string\">'margin-left'</span>);</div><div class=\"line\">    boxOne.style.marginLeft = marginLeft;</div><div class=\"line\">    boxOne.classList.remove(<span class=\"string\">'horizTranslate'</span>);    </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.toggleButton:eq(1)'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span>($(<span class=\"keyword\">this</span>).html() === <span class=\"string\">'Play'</span>) </div><div class=\"line\">  &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'Pause'</span>);</div><div class=\"line\">    $boxTwo.addClass(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'Play'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> computedStyle = $boxTwo.css(<span class=\"string\">'margin-left'</span>);</div><div class=\"line\">    $boxTwo.removeClass(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">    $boxTwo.css(<span class=\"string\">'margin-left'</span>, computedStyle);</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><a href=\"http://www.w3cplus.com/animation/controlling-css-animations-transitions-javascript.html\">原文转自w3cplus：</a></p>\n<p>CSS animations和transitions再加上点JavaScript就可以实现硬件加速动画，而且其交互效果比大多数JavaScript库更高效。 So,让我们快点开始吧！小伙伴们都等不及了！</p>\n<h3 id=\"注意：Animations-动画-和Transitions-过渡-是不同的\"><a href=\"#注意：Animations-动画-和Transitions-过渡-是不同的\" class=\"headerlink\" title=\"注意：Animations(动画)和Transitions(过渡)是不同的\"></a>注意：Animations(动画)和Transitions(过渡)是不同的</h3><p>CSS Transitions(过渡)被应用于元素指定的属性变化时，该属性经过一段时间逐渐的过渡到最终需要的值；而CSS Animations(动画)只是在应用时执行之前定义好的操作，它提供更细粒度的控制。</p>\n<p>在这篇文章中，我们将分别针对上述内容进行讲解。</p>\n<h3 id=\"控制CSS-Transition-过渡\"><a href=\"#控制CSS-Transition-过渡\" class=\"headerlink\" title=\"控制CSS Transition(过渡)\"></a>控制CSS Transition(过渡)</h3><p>在编程论坛中，关于transition(过渡)的触发和暂停有无数的疑问。使用JavaScript可以很容易的解决这些疑问。</p>\n<p>触发元素的transiton(过渡)，切换元素的类名可以触发该元素的transition(过渡)</p>\n<p>暂停元素的transition(过渡)， 在你想要暂停过渡点，用getComputedStyle和getPropertyValue获取该元素相应的CSS属性值，然后设置该元素的对应的CSS属性等于你刚才获取到的CSS属性值。</p>\n<p>以下是该方法的一个例子。</p>\n<p>HTML:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;Pure Javascript&lt;/h3&gt;</div><div class=\"line\">&lt;div class='box'&gt;&lt;/div&gt; </div><div class=\"line\">&lt;button class='toggleButton' value='play'&gt;Play&lt;/button&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;h3&gt;jQuery&lt;/h3&gt;</div><div class=\"line\">&lt;div class='box'&gt;&lt;/div&gt; </div><div class=\"line\">&lt;button class='toggleButton' value='play'&gt;Play&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>css:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  <span class=\"attr\">margin</span>: <span class=\"number\">30</span>px;</div><div class=\"line\">  height: <span class=\"number\">50</span>px;</div><div class=\"line\">  width: <span class=\"number\">50</span>px;</div><div class=\"line\">  background-color: blue;</div><div class=\"line\">&#125;</div><div class=\"line\">.box.horizTranslate &#123;</div><div class=\"line\">  -webkit-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -moz-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -ms-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  -o-transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  transition: <span class=\"number\">3</span>s;</div><div class=\"line\">  margin-left: <span class=\"number\">50</span>% !important;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JS:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML  CSS  JS  Result</div><div class=\"line\">Edit on </div><div class=\"line\"><span class=\"keyword\">var</span> boxOne = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'box'</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">    $boxTwo = $(<span class=\"string\">'.box:eq(1)'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'toggleButton'</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.innerHTML === <span class=\"string\">'Play'</span>) </div><div class=\"line\">  &#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">'Pause'</span>;</div><div class=\"line\">    boxOne.classList.add(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.innerHTML = <span class=\"string\">'Play'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> computedStyle = <span class=\"built_in\">window</span>.getComputedStyle(boxOne),</div><div class=\"line\">        marginLeft = computedStyle.getPropertyValue(<span class=\"string\">'margin-left'</span>);</div><div class=\"line\">    boxOne.style.marginLeft = marginLeft;</div><div class=\"line\">    boxOne.classList.remove(<span class=\"string\">'horizTranslate'</span>);    </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.toggleButton:eq(1)'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span>($(<span class=\"keyword\">this</span>).html() === <span class=\"string\">'Play'</span>) </div><div class=\"line\">  &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'Pause'</span>);</div><div class=\"line\">    $boxTwo.addClass(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).html(<span class=\"string\">'Play'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> computedStyle = $boxTwo.css(<span class=\"string\">'margin-left'</span>);</div><div class=\"line\">    $boxTwo.removeClass(<span class=\"string\">'horizTranslate'</span>);</div><div class=\"line\">    $boxTwo.css(<span class=\"string\">'margin-left'</span>, computedStyle);</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n"},{"title":"Javascript中常见的异步编程模型[转载]","date":"2016-03-31T06:15:59.000Z","description":"在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。\n本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。\n在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。\n在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。\n下面我们将针对每一种编程模型加以说明。","_content":"\n[原文转自蛋糕仙人：](http://gejiawen.github.io/)\n\nJavascript异步编程专题，目前包含以下几篇文章，\n\n* [浅谈Javascript中的异步](http://gejiawen.github.io/2015/10/12/think-about-async-in-javascript/)\n* Javascript中常见的异步编程模型\n* Generator函数处理异步调用\n\n本篇文章是本专题的第二篇文章。\n\n---\n\n正文开始。\n\n在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。\n\n本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。\n\n在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。\n\n在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。\n\n下面我们将针对每一种编程模型加以说明。\n\n### 回调函数\n**回调函数**可以说是Javascript异步编程最基本的方法。我们试想有这样一个场景，我们需要在页面上展示一个持续3秒钟的loading视觉样式，然后在页面上显示我们真正想显示的内容。示例代码如下，\n\n ``` bash\n// more code\n\nfunction loading(callback) {\n    // 持续3秒的loading展示\n    setTimeout(function () {\n        callback();\n    }, 3000);\n}\n\nfunction show() {\n    // 展示真实数据给用户\n}\n\nloading(show);\n\n// more code\n\n```\n\n\n代码中的<code>loading(show)</code>>就是将函数<code>show()</code>作为函数<code>loading()</code>的参数。在<code>loading()</code>完成3秒的loading之后，再去执行回调函数（示例使用了<code>setTimeout</code>来模拟）。通过这种方法，<code>show()</code>就变成了异步调用，它的执行时机被推迟到<code>loading()</code>即将完成之前。\n\n\n### 回调函数的缺陷\n回调函数往往就是调用用户提供的函数，该函数往往是以参数的形式提供的。回调函数并不一定是异步执行的。回调函数的特点就是使用简单、容易理解。缺点就是逻辑间存在一定耦合。最恶心的地方在于会造成所谓的<code>callback hell</code>。比如下面这样的一个例子，\n\n``` bash\nA(function () {\n    B(function () {\n        C(function() {\n           D(function() {\n                // ...\n            })\n        })\n    })\n})\n```\n\n例子中A、B、C、D四个任务存在依赖关系，通过函数回调的方式，写出来的代码就会变成上面的这个样子。维护性和可读性都非常糟糕。\n\n除了回调嵌套的问题之外，还可能会带来另一个问题，就是流程控制不方便。比如我们要发送3个请求，当3个请求都返回时，我们再执行相关逻辑，那么代码可能就是，\n\n``` bash\nvar count = 0\nfor (var i = 0; i < 3; i++) {\n    request('source_' + i, function () {\n        count++;\n        if (count === 3) {\n            // do my logic\n        }\n    });\n}\n```\n\n\n上面的示例代码中，我通过<code>request</code>对三个url发送了请求，但是我不知道这三个请求的返回情况。无奈之下我添加了一个计数器<code>count</code>，在每个请求的回调中都进行计数器判断，当计数器为3时即表示三个请求都已经成功返回了，此时再去执行相关任务。显而易见，这种情况下的流程控制就显得比较丑陋。\n\n最后，有时候我们为了程序的健壮性，可能会需要一个<code>try...catch</code>语法。比如，\n\n``` bash\n// demo1\ntry {\n    setTimeout(function () {\n        throw new Error('error occured');\n    })\n} catch(e) {\n    console.log(e);\n}\n\n// demo2\nsetTimeout(function () {\n    try {\n        // your logic\n    } catch(e) {\n        \n    }\n});\n\n```\n\n上面的示例代码中，如果我们像demo1那样将try...catch加在异步逻辑的外面，即使异步调用发生了异常我们也是捕获不到的，因为try...catch不能捕获未来的异常。无奈，我们只能像demo2那样将try...catch语句块放在具体的异步逻辑内。这样一旦异步调用多起来，那么就会多出来很多try...catch。这样肯定是不好的。\n\n除了上面这些问题之外，我觉得回调函数真正的核心问题在于，嵌套的回到函数往往会破坏整个程序的调用堆栈，并且像return，throw等这些用于代码流程控制的关键词都不能正常使用（因为前一个回调函数往往会影响到它后面所有的回调函数）。\n\n### 事件监听\n\n事件监听在UI编程中随处可见。比如我给一个按钮绑定一个点击事件，给一个输入框绑定一个键盘敲击事件等等。比如下面的代码，\n\n``` bash\n$('#button').on('click', function () {\n    console.log('我被点了');\n});\n```\n\n上面使用了JQuery的语法，给一个按钮绑定了一个事件。当事件触发时，会执行绑定的逻辑。这比较容易理解。\n\n除了界面事件之外，通常我们还有各种网络请求事件，比如ajax，websocket等等。这些网络请求在不同阶段也会触发各种事件，如果程序中有绑定相关处理逻辑，那么当事件触发时就会去执行相关逻辑。\n\n除此之外，我们还可以自定义事件。比如，\n\n``` bash\n$('#div').on('data-loaded', function () {\n    console.log('data loaded');\n});\n\n$('#div').trigger('data-loaded');\n\n```\n\n上面采用JQuery的语法，我们自定义了一个事件，叫做”data-loaded”，并在此事件上定义了一个触发逻辑。当我们通过trigger触发这个事件时，之前绑定的逻辑就会执行了。\n\n### 观察者模式\n\n之前在事件监听中提到了自定义事件，其实自定义事件是观察者模式的一种具体表现。观察者模式，又称为消息订阅/发布模式。它的含义是，我们先假设有一个“信号中心”，当某个任务执行完毕就向信号中心发出一个信号（事件），然后信号中心收到这个信号之后将会进行广播。如果有其他任务订阅了该信号，那么这些任务就会收到一个通知，然后执行任务相关的逻辑。\n\n下面是观察者模式的一个简单实现（可参阅用AngularJS实现观察者模式），\n\n``` bash\nvar ob = {\n    channels: [],\n    subscribe: function(topic, callback) {\n       if (!_.isArray(this.channels[topic])) {\n           channels[topic] = [];\n       }\n       var handlers = channels[topic];\n       handlers.push(callback);\n    },\n    unsubscribe: function(topic, callback) {\n       if (!_.isArray(this.channels[topic])) {\n           return;\n       }\n       var handlers = this.channels[topic];\n       var index = _.indexOf(handlers, callback);\n       if (index >= 0) {\n           handlers.splice(index, 1);\n       }\n   },\n   publish: function(topic, data) {\n       var self = this;\n       var handlers = this.channels[topic] || [];\n       _.each(handlers, function(handler) {\n           try {\n               handler.apply(self, [data]);\n           } catch (ex) {\n               console.log(ex);\n           }\n       });\n   }\n};\n```\n\n其用法如下，\n\n``` bash\nob.subscribe('done', function () {\n    console.log('done');\n});\n\nsetTimeout(function () {\n    ob.publish('done')\n}, 1000);\n```\n\n观察者模式的实现方式有很多，不过基本核心都差不多，都会有消息订阅和发布。从本质上说，前面所说的事件监听也是一种观察者模式。\n\n观察者模式用好了自然好处多多，能够把解耦做的相当好。但是复杂的系统如果要用观察者模式来做逻辑，必须要做好事件订阅和发布的设计，否则会导致程序的运行流程混乱。\n\n### Promise模式\nPromise严格来说不是一种新技术，它只是一种语法糖，一种机制，一种代码结构和流程，用于管理异步回调。\n\njQuery中的Promise实现源自Promises/A规范。使用promise来管理回调，可以将回调逻辑扁平化，可以避免之前提到的回调地狱。示例代码如下，\n\n``` bash\nfunction fn1() {\n    var dfd = $.Deferred();\n    setTimeout(function () {\n        console.log('fn1');\n        dfd.resolve();\n    }, 1000);\n    return dfd.promise();\n}\n\nfunction fn2() {\n    console.log('fn2');\n}\n\nfn1().then(fn2);\n\n```\n\n针对之前提到的回调地狱和异常难以捕获的问题，使用<promise都可以轻松的解决。\n\n``` bash\nA().then(B).then(C).then(D).catch(ERROR);\n```\n\n看，一行就搞定了。不过使用promise处理异步调用，有一点需要注意，就是所有的异步函数都要promise化。所谓promise化的意思就是需要对异步函数进行封装，让其返回一个promise对象。比如，\n\n``` bash\nfunction A() {\n    var promise = new Promise(function (resolve, reject) {\n        // your logic \n    });\n    \n    return promise;\n}\n```\n\n### ES6中的方案\nES6于今年6月份左右已经正式发布了。其中新增了不少内容。其中有两项内容可能用来解决异步回调的内容。\n\n### ES6中的Promise\n最新发布的ECMAScript2015中已经涵盖了promise的相关内容，不过ES6中的Promise规范其实是Promise/A+规范，可以说它是Promise/A规范的增强版。\n\n现代浏览器Chrome，Firefox等已经对Promise提供了原生支持。详细的文档可以参阅MDN。\n\n简单来说，ES6中promise的内容具体如下，\n\npromise有三种状态：pending（等待）、fulfilled（成功）、rejected（失败）。其中pending为初始状态。\npromise的状态转换只能是：pending->fulfilled或者pending->rejected。转换方向不能颠倒，且fulfilled和rejected状态不能相互转换。每一种状态转换都会触发相关调用。\npending->fulfilled时，promise会带有一个value（成功状态的值）；pending->rejected时，promise会带有一个reason（失败状态的原因）\npromise拥有then方法。then方法必须返回一个promise。then可以多次链式调用，且回调的顺序跟then的声明顺序一致。\nthen方法接受两个参数，分别是“pending->fulfilled”的调用和“pending->rejected”的调用。\nthen还可以接受一个promise实例，也可以接受一个thenable（类then对象或者方法）实例。\n总得来说promise的内容比较简单，涉及到三种状态和两种状态转换。其实promise的核心就是then方法的实现。\n\n下面是来自MDN上Promise的代码示例（稍作改动），\n\n``` bash\nvar p1 = new Promise(function (resolve, reject) {\n    console.log('p1 start');\n    setTimeout(function() {\n        resolve('p1 resolved');\n    }, 2000);\n});\n\np1.then(function (value) {\n    console.log(value);\n}, function(reason) {\n    console.log(reason);\n});\n```\n\n上述代码的执行结果是，先打印”p1 start”然后经过2秒左右再次打印”p1 resolved”。\n\n当然我们还可以添加多个回调。我们可以通过在前一个then方法中调用return将promise往后传递。比如，\n\n``` bash\np1.then(function(v) {\n    console.log('1: ', v);\n    return v + ' 2';\n}).then(function(v) {\n    console.log('2: ', v);\n});\n```\n\n不过在使用Promise的时候，有一些需要注意的地方，这篇文章We have a problem with promises（翻译文）中总结得很好，有兴趣的可自行参阅。\n\n不管是ES6中的promise还是jQuery中的promise/deferred，的确可以避免异步代码的嵌套问题，使整体代码结构变得清晰，不用再受callback hell折磨。但是也仅仅止步于此，因为它并没有触碰js异步回调真正核心的内容。\n\n现在业界有许多关于PromiseA+规范的实现，不过博主个人觉得bluebird是个不错的库，可以值得一用，如果你有选择困难症，不妨试一试😎😎😎\n\n### ES6中Generator\nES6中引入的Generator可以理解为一种协程的实现机制，它允许函数在运行过程中将Javascript执行权交给其他函数（代码），并在需要的时候返回继续执行。\n\n我们可以使用Generator配合ES6中Promise，进一步将异步调用扁平化（转化成同步风格）。\n\n下面我们来看一个例子,\n\n``` bash\nfunction* gen() {\n    var ret = yield new Promise(function(resolve, reject) {\n        console.log('async task start');\n        setTimeout(function() {\n            resolve('async task end');\n        }, 2000);\n    });\n    \n    console.log(ret);\n}\n```\n\n上述Node.js代码中，我们定义了一个Generator函数，且创建了一个promise，promise内使用setTimeout模拟了一个异步任务。\n\n接下来我们来执行这个Generator函数，因为yield返回的是一个promise，所以我们需要使用then方法，\n\n``` bash\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(str){\n    console.log(str);\n    // 对resolve的数据重新包装，然后传递给下一个promise\n    return {\n        msg: str\n    };\n}).then(function(data){\n    g.next(data);\n});\n\n```\n\n最终的结果如下，\n\n``` bash\nasync task start\n// 经过2秒左右\nasync task end\n{msg: 'async task end'}\n```\n\n其实关于Generator还有很多的内容可以说，这里由于篇幅的关系就不展开了。业界已经有了基于Generator处理异步调用的功能库，比如co、task.js。\n\n\n### ES7中的async和await\n在单线程的Javascript上做异步任务（甚至并发任务）的确是一个让人头疼的问题，总会越到各种各样的问题。从最早的函数回调，到Promise，再到Generator，涌现的各种解决方案，虽然都有所改进，但是仍然让人觉得并没有彻底的解决这个问题。\n\n举个例子来说，我现在就是想读取一个文件，这么简单的一件事，何必要考虑那么多呢？又是回调，又是promise的，烦不烦呐。我就想像下面这么简单的写代码，难道不行么？\n\n``` bash\nfunction task() {\n    var file1Content = readFile('file1path');\n    var file2Content = readFile(fileContent);\n    console.log(file2Content);\n}\n```\n\n想要做的事情很简单，读取第一个文件，它的内容是要读取的第二个文件的文件名。\n\n值得庆幸的是，ES7中的async和await可以帮你做到这件事。不过要稍微改动一下，\n\n``` bash\nasync function task() {\n    var file1Content = await readFile('file1path');\n    var file2Content = await readFile(fileContent);\n    console.log(file2Content);\n}\n```\n\n看，改动的地方很简单，只要在task前面加上关键词async，在函数内的异步任务前添加await声明即可。如果忽略这些额外的关键字，简直就是完完全全的同步写法嘛。\n\n其实，这种方式就是前端提到的Generator和Promise方案的封装。ECMAScript组织也认为这是目前解决Javascript异步回调的最佳方案，所以可能会在ES7中将其纳入到规范中来。需要注意的是，这项特性是ES7的提案，依赖Generator，所以慎用（目前来说基本用不了）！\n\n### fibjs\n除了上述的几种方案之外，其实还有另外一种方案。就是使用协程的方案来解决单线程上的异步调用问题。\n\n之前我们也提到过，Generator的yield可以暂停函数执行，将执行权临时转交给其他任务，待其他任务完毕之后，再交还回执行权。这其实就是协程的基本模型。\n\n业界有一款基于V8引擎的服务端开发框架fibjs，它的实现机制跟Node.js是不一样的。fibjs采用fiber解决v8引擎的多路复用，并通过大量c++组件，将重负荷运算委托给后台线程，释放v8线程，争取更大的并发时间。\n\n一句话，fibjs从底层，使用的纤程模型解决了异步调用的问题。关于fibjs，有兴趣的话可以查阅相关资料。不过我个人对它是持谨慎态度的。原因是如下两点，\n\n生态原因。\n使用了js，但是又摒弃了js的异步。\n不过还是可以作为兴趣去研究一下的。\n\n- EOF -\n\nAll rights reserved @gejiawen.\n\n本文链接：http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/\n","source":"_posts/some-javascript-async-pattern.md","raw":"---\ntitle: \"Javascript中常见的异步编程模型[转载]\"\ndate: 2016-03-31 14:15:59\ntags: ['Javascript', '异步编程模型']\ndescription: \"在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。\n\n本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。\n\n在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。\n\n在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。\n\n下面我们将针对每一种编程模型加以说明。\"\n\n\n---\n\n[原文转自蛋糕仙人：](http://gejiawen.github.io/)\n\nJavascript异步编程专题，目前包含以下几篇文章，\n\n* [浅谈Javascript中的异步](http://gejiawen.github.io/2015/10/12/think-about-async-in-javascript/)\n* Javascript中常见的异步编程模型\n* Generator函数处理异步调用\n\n本篇文章是本专题的第二篇文章。\n\n---\n\n正文开始。\n\n在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。\n\n本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。\n\n在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。\n\n在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。\n\n下面我们将针对每一种编程模型加以说明。\n\n### 回调函数\n**回调函数**可以说是Javascript异步编程最基本的方法。我们试想有这样一个场景，我们需要在页面上展示一个持续3秒钟的loading视觉样式，然后在页面上显示我们真正想显示的内容。示例代码如下，\n\n ``` bash\n// more code\n\nfunction loading(callback) {\n    // 持续3秒的loading展示\n    setTimeout(function () {\n        callback();\n    }, 3000);\n}\n\nfunction show() {\n    // 展示真实数据给用户\n}\n\nloading(show);\n\n// more code\n\n```\n\n\n代码中的<code>loading(show)</code>>就是将函数<code>show()</code>作为函数<code>loading()</code>的参数。在<code>loading()</code>完成3秒的loading之后，再去执行回调函数（示例使用了<code>setTimeout</code>来模拟）。通过这种方法，<code>show()</code>就变成了异步调用，它的执行时机被推迟到<code>loading()</code>即将完成之前。\n\n\n### 回调函数的缺陷\n回调函数往往就是调用用户提供的函数，该函数往往是以参数的形式提供的。回调函数并不一定是异步执行的。回调函数的特点就是使用简单、容易理解。缺点就是逻辑间存在一定耦合。最恶心的地方在于会造成所谓的<code>callback hell</code>。比如下面这样的一个例子，\n\n``` bash\nA(function () {\n    B(function () {\n        C(function() {\n           D(function() {\n                // ...\n            })\n        })\n    })\n})\n```\n\n例子中A、B、C、D四个任务存在依赖关系，通过函数回调的方式，写出来的代码就会变成上面的这个样子。维护性和可读性都非常糟糕。\n\n除了回调嵌套的问题之外，还可能会带来另一个问题，就是流程控制不方便。比如我们要发送3个请求，当3个请求都返回时，我们再执行相关逻辑，那么代码可能就是，\n\n``` bash\nvar count = 0\nfor (var i = 0; i < 3; i++) {\n    request('source_' + i, function () {\n        count++;\n        if (count === 3) {\n            // do my logic\n        }\n    });\n}\n```\n\n\n上面的示例代码中，我通过<code>request</code>对三个url发送了请求，但是我不知道这三个请求的返回情况。无奈之下我添加了一个计数器<code>count</code>，在每个请求的回调中都进行计数器判断，当计数器为3时即表示三个请求都已经成功返回了，此时再去执行相关任务。显而易见，这种情况下的流程控制就显得比较丑陋。\n\n最后，有时候我们为了程序的健壮性，可能会需要一个<code>try...catch</code>语法。比如，\n\n``` bash\n// demo1\ntry {\n    setTimeout(function () {\n        throw new Error('error occured');\n    })\n} catch(e) {\n    console.log(e);\n}\n\n// demo2\nsetTimeout(function () {\n    try {\n        // your logic\n    } catch(e) {\n        \n    }\n});\n\n```\n\n上面的示例代码中，如果我们像demo1那样将try...catch加在异步逻辑的外面，即使异步调用发生了异常我们也是捕获不到的，因为try...catch不能捕获未来的异常。无奈，我们只能像demo2那样将try...catch语句块放在具体的异步逻辑内。这样一旦异步调用多起来，那么就会多出来很多try...catch。这样肯定是不好的。\n\n除了上面这些问题之外，我觉得回调函数真正的核心问题在于，嵌套的回到函数往往会破坏整个程序的调用堆栈，并且像return，throw等这些用于代码流程控制的关键词都不能正常使用（因为前一个回调函数往往会影响到它后面所有的回调函数）。\n\n### 事件监听\n\n事件监听在UI编程中随处可见。比如我给一个按钮绑定一个点击事件，给一个输入框绑定一个键盘敲击事件等等。比如下面的代码，\n\n``` bash\n$('#button').on('click', function () {\n    console.log('我被点了');\n});\n```\n\n上面使用了JQuery的语法，给一个按钮绑定了一个事件。当事件触发时，会执行绑定的逻辑。这比较容易理解。\n\n除了界面事件之外，通常我们还有各种网络请求事件，比如ajax，websocket等等。这些网络请求在不同阶段也会触发各种事件，如果程序中有绑定相关处理逻辑，那么当事件触发时就会去执行相关逻辑。\n\n除此之外，我们还可以自定义事件。比如，\n\n``` bash\n$('#div').on('data-loaded', function () {\n    console.log('data loaded');\n});\n\n$('#div').trigger('data-loaded');\n\n```\n\n上面采用JQuery的语法，我们自定义了一个事件，叫做”data-loaded”，并在此事件上定义了一个触发逻辑。当我们通过trigger触发这个事件时，之前绑定的逻辑就会执行了。\n\n### 观察者模式\n\n之前在事件监听中提到了自定义事件，其实自定义事件是观察者模式的一种具体表现。观察者模式，又称为消息订阅/发布模式。它的含义是，我们先假设有一个“信号中心”，当某个任务执行完毕就向信号中心发出一个信号（事件），然后信号中心收到这个信号之后将会进行广播。如果有其他任务订阅了该信号，那么这些任务就会收到一个通知，然后执行任务相关的逻辑。\n\n下面是观察者模式的一个简单实现（可参阅用AngularJS实现观察者模式），\n\n``` bash\nvar ob = {\n    channels: [],\n    subscribe: function(topic, callback) {\n       if (!_.isArray(this.channels[topic])) {\n           channels[topic] = [];\n       }\n       var handlers = channels[topic];\n       handlers.push(callback);\n    },\n    unsubscribe: function(topic, callback) {\n       if (!_.isArray(this.channels[topic])) {\n           return;\n       }\n       var handlers = this.channels[topic];\n       var index = _.indexOf(handlers, callback);\n       if (index >= 0) {\n           handlers.splice(index, 1);\n       }\n   },\n   publish: function(topic, data) {\n       var self = this;\n       var handlers = this.channels[topic] || [];\n       _.each(handlers, function(handler) {\n           try {\n               handler.apply(self, [data]);\n           } catch (ex) {\n               console.log(ex);\n           }\n       });\n   }\n};\n```\n\n其用法如下，\n\n``` bash\nob.subscribe('done', function () {\n    console.log('done');\n});\n\nsetTimeout(function () {\n    ob.publish('done')\n}, 1000);\n```\n\n观察者模式的实现方式有很多，不过基本核心都差不多，都会有消息订阅和发布。从本质上说，前面所说的事件监听也是一种观察者模式。\n\n观察者模式用好了自然好处多多，能够把解耦做的相当好。但是复杂的系统如果要用观察者模式来做逻辑，必须要做好事件订阅和发布的设计，否则会导致程序的运行流程混乱。\n\n### Promise模式\nPromise严格来说不是一种新技术，它只是一种语法糖，一种机制，一种代码结构和流程，用于管理异步回调。\n\njQuery中的Promise实现源自Promises/A规范。使用promise来管理回调，可以将回调逻辑扁平化，可以避免之前提到的回调地狱。示例代码如下，\n\n``` bash\nfunction fn1() {\n    var dfd = $.Deferred();\n    setTimeout(function () {\n        console.log('fn1');\n        dfd.resolve();\n    }, 1000);\n    return dfd.promise();\n}\n\nfunction fn2() {\n    console.log('fn2');\n}\n\nfn1().then(fn2);\n\n```\n\n针对之前提到的回调地狱和异常难以捕获的问题，使用<promise都可以轻松的解决。\n\n``` bash\nA().then(B).then(C).then(D).catch(ERROR);\n```\n\n看，一行就搞定了。不过使用promise处理异步调用，有一点需要注意，就是所有的异步函数都要promise化。所谓promise化的意思就是需要对异步函数进行封装，让其返回一个promise对象。比如，\n\n``` bash\nfunction A() {\n    var promise = new Promise(function (resolve, reject) {\n        // your logic \n    });\n    \n    return promise;\n}\n```\n\n### ES6中的方案\nES6于今年6月份左右已经正式发布了。其中新增了不少内容。其中有两项内容可能用来解决异步回调的内容。\n\n### ES6中的Promise\n最新发布的ECMAScript2015中已经涵盖了promise的相关内容，不过ES6中的Promise规范其实是Promise/A+规范，可以说它是Promise/A规范的增强版。\n\n现代浏览器Chrome，Firefox等已经对Promise提供了原生支持。详细的文档可以参阅MDN。\n\n简单来说，ES6中promise的内容具体如下，\n\npromise有三种状态：pending（等待）、fulfilled（成功）、rejected（失败）。其中pending为初始状态。\npromise的状态转换只能是：pending->fulfilled或者pending->rejected。转换方向不能颠倒，且fulfilled和rejected状态不能相互转换。每一种状态转换都会触发相关调用。\npending->fulfilled时，promise会带有一个value（成功状态的值）；pending->rejected时，promise会带有一个reason（失败状态的原因）\npromise拥有then方法。then方法必须返回一个promise。then可以多次链式调用，且回调的顺序跟then的声明顺序一致。\nthen方法接受两个参数，分别是“pending->fulfilled”的调用和“pending->rejected”的调用。\nthen还可以接受一个promise实例，也可以接受一个thenable（类then对象或者方法）实例。\n总得来说promise的内容比较简单，涉及到三种状态和两种状态转换。其实promise的核心就是then方法的实现。\n\n下面是来自MDN上Promise的代码示例（稍作改动），\n\n``` bash\nvar p1 = new Promise(function (resolve, reject) {\n    console.log('p1 start');\n    setTimeout(function() {\n        resolve('p1 resolved');\n    }, 2000);\n});\n\np1.then(function (value) {\n    console.log(value);\n}, function(reason) {\n    console.log(reason);\n});\n```\n\n上述代码的执行结果是，先打印”p1 start”然后经过2秒左右再次打印”p1 resolved”。\n\n当然我们还可以添加多个回调。我们可以通过在前一个then方法中调用return将promise往后传递。比如，\n\n``` bash\np1.then(function(v) {\n    console.log('1: ', v);\n    return v + ' 2';\n}).then(function(v) {\n    console.log('2: ', v);\n});\n```\n\n不过在使用Promise的时候，有一些需要注意的地方，这篇文章We have a problem with promises（翻译文）中总结得很好，有兴趣的可自行参阅。\n\n不管是ES6中的promise还是jQuery中的promise/deferred，的确可以避免异步代码的嵌套问题，使整体代码结构变得清晰，不用再受callback hell折磨。但是也仅仅止步于此，因为它并没有触碰js异步回调真正核心的内容。\n\n现在业界有许多关于PromiseA+规范的实现，不过博主个人觉得bluebird是个不错的库，可以值得一用，如果你有选择困难症，不妨试一试😎😎😎\n\n### ES6中Generator\nES6中引入的Generator可以理解为一种协程的实现机制，它允许函数在运行过程中将Javascript执行权交给其他函数（代码），并在需要的时候返回继续执行。\n\n我们可以使用Generator配合ES6中Promise，进一步将异步调用扁平化（转化成同步风格）。\n\n下面我们来看一个例子,\n\n``` bash\nfunction* gen() {\n    var ret = yield new Promise(function(resolve, reject) {\n        console.log('async task start');\n        setTimeout(function() {\n            resolve('async task end');\n        }, 2000);\n    });\n    \n    console.log(ret);\n}\n```\n\n上述Node.js代码中，我们定义了一个Generator函数，且创建了一个promise，promise内使用setTimeout模拟了一个异步任务。\n\n接下来我们来执行这个Generator函数，因为yield返回的是一个promise，所以我们需要使用then方法，\n\n``` bash\nvar g = gen();\nvar result = g.next();\n\nresult.value.then(function(str){\n    console.log(str);\n    // 对resolve的数据重新包装，然后传递给下一个promise\n    return {\n        msg: str\n    };\n}).then(function(data){\n    g.next(data);\n});\n\n```\n\n最终的结果如下，\n\n``` bash\nasync task start\n// 经过2秒左右\nasync task end\n{msg: 'async task end'}\n```\n\n其实关于Generator还有很多的内容可以说，这里由于篇幅的关系就不展开了。业界已经有了基于Generator处理异步调用的功能库，比如co、task.js。\n\n\n### ES7中的async和await\n在单线程的Javascript上做异步任务（甚至并发任务）的确是一个让人头疼的问题，总会越到各种各样的问题。从最早的函数回调，到Promise，再到Generator，涌现的各种解决方案，虽然都有所改进，但是仍然让人觉得并没有彻底的解决这个问题。\n\n举个例子来说，我现在就是想读取一个文件，这么简单的一件事，何必要考虑那么多呢？又是回调，又是promise的，烦不烦呐。我就想像下面这么简单的写代码，难道不行么？\n\n``` bash\nfunction task() {\n    var file1Content = readFile('file1path');\n    var file2Content = readFile(fileContent);\n    console.log(file2Content);\n}\n```\n\n想要做的事情很简单，读取第一个文件，它的内容是要读取的第二个文件的文件名。\n\n值得庆幸的是，ES7中的async和await可以帮你做到这件事。不过要稍微改动一下，\n\n``` bash\nasync function task() {\n    var file1Content = await readFile('file1path');\n    var file2Content = await readFile(fileContent);\n    console.log(file2Content);\n}\n```\n\n看，改动的地方很简单，只要在task前面加上关键词async，在函数内的异步任务前添加await声明即可。如果忽略这些额外的关键字，简直就是完完全全的同步写法嘛。\n\n其实，这种方式就是前端提到的Generator和Promise方案的封装。ECMAScript组织也认为这是目前解决Javascript异步回调的最佳方案，所以可能会在ES7中将其纳入到规范中来。需要注意的是，这项特性是ES7的提案，依赖Generator，所以慎用（目前来说基本用不了）！\n\n### fibjs\n除了上述的几种方案之外，其实还有另外一种方案。就是使用协程的方案来解决单线程上的异步调用问题。\n\n之前我们也提到过，Generator的yield可以暂停函数执行，将执行权临时转交给其他任务，待其他任务完毕之后，再交还回执行权。这其实就是协程的基本模型。\n\n业界有一款基于V8引擎的服务端开发框架fibjs，它的实现机制跟Node.js是不一样的。fibjs采用fiber解决v8引擎的多路复用，并通过大量c++组件，将重负荷运算委托给后台线程，释放v8线程，争取更大的并发时间。\n\n一句话，fibjs从底层，使用的纤程模型解决了异步调用的问题。关于fibjs，有兴趣的话可以查阅相关资料。不过我个人对它是持谨慎态度的。原因是如下两点，\n\n生态原因。\n使用了js，但是又摒弃了js的异步。\n不过还是可以作为兴趣去研究一下的。\n\n- EOF -\n\nAll rights reserved @gejiawen.\n\n本文链接：http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/\n","slug":"some-javascript-async-pattern","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4900037rjljw03j576","content":"<p><a href=\"http://gejiawen.github.io/\" target=\"_blank\" rel=\"external\">原文转自蛋糕仙人：</a></p>\n<p>Javascript异步编程专题，目前包含以下几篇文章，</p>\n<ul>\n<li><a href=\"http://gejiawen.github.io/2015/10/12/think-about-async-in-javascript/\" target=\"_blank\" rel=\"external\">浅谈Javascript中的异步</a></li>\n<li>Javascript中常见的异步编程模型</li>\n<li>Generator函数处理异步调用</li>\n</ul>\n<p>本篇文章是本专题的第二篇文章。</p>\n<hr>\n<p>正文开始。</p>\n<p>在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。</p>\n<p>本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。</p>\n<p>在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。</p>\n<p>在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。</p>\n<p>下面我们将针对每一种编程模型加以说明。</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p><strong>回调函数</strong>可以说是Javascript异步编程最基本的方法。我们试想有这样一个场景，我们需要在页面上展示一个持续3秒钟的loading视觉样式，然后在页面上显示我们真正想显示的内容。示例代码如下，</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// more code</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> loading(callback) &#123;</div><div class=\"line\">    // 持续3秒的loading展示</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;, 3000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</div><div class=\"line\">    // 展示真实数据给用户</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">loading(show);</div><div class=\"line\"></div><div class=\"line\">// more code</div></pre></td></tr></table></figure>\n<p>代码中的<code>loading(show)</code>&gt;就是将函数<code>show()</code>作为函数<code>loading()</code>的参数。在<code>loading()</code>完成3秒的loading之后，再去执行回调函数（示例使用了<code>setTimeout</code>来模拟）。通过这种方法，<code>show()</code>就变成了异步调用，它的执行时机被推迟到<code>loading()</code>即将完成之前。</p>\n<h3 id=\"回调函数的缺陷\"><a href=\"#回调函数的缺陷\" class=\"headerlink\" title=\"回调函数的缺陷\"></a>回调函数的缺陷</h3><p>回调函数往往就是调用用户提供的函数，该函数往往是以参数的形式提供的。回调函数并不一定是异步执行的。回调函数的特点就是使用简单、容易理解。缺点就是逻辑间存在一定耦合。最恶心的地方在于会造成所谓的<code>callback hell</code>。比如下面这样的一个例子，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">A(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    B(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        C(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">           D(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">                // ...</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>例子中A、B、C、D四个任务存在依赖关系，通过函数回调的方式，写出来的代码就会变成上面的这个样子。维护性和可读性都非常糟糕。</p>\n<p>除了回调嵌套的问题之外，还可能会带来另一个问题，就是流程控制不方便。比如我们要发送3个请求，当3个请求都返回时，我们再执行相关逻辑，那么代码可能就是，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var count = 0</div><div class=\"line\"><span class=\"keyword\">for</span> (var i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    request(<span class=\"string\">'source_'</span> + i, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        count++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === 3) &#123;</div><div class=\"line\">            // <span class=\"keyword\">do</span> my logic</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例代码中，我通过<code>request</code>对三个url发送了请求，但是我不知道这三个请求的返回情况。无奈之下我添加了一个计数器<code>count</code>，在每个请求的回调中都进行计数器判断，当计数器为3时即表示三个请求都已经成功返回了，此时再去执行相关任务。显而易见，这种情况下的流程控制就显得比较丑陋。</p>\n<p>最后，有时候我们为了程序的健壮性，可能会需要一个<code>try…catch</code>语法。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// demo1</div><div class=\"line\">try &#123;</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        throw new Error(<span class=\"string\">'error occured'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; catch(e) &#123;</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// demo2</div><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        // your logic</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的示例代码中，如果我们像demo1那样将try…catch加在异步逻辑的外面，即使异步调用发生了异常我们也是捕获不到的，因为try…catch不能捕获未来的异常。无奈，我们只能像demo2那样将try…catch语句块放在具体的异步逻辑内。这样一旦异步调用多起来，那么就会多出来很多try…catch。这样肯定是不好的。</p>\n<p>除了上面这些问题之外，我觉得回调函数真正的核心问题在于，嵌套的回到函数往往会破坏整个程序的调用堆栈，并且像return，throw等这些用于代码流程控制的关键词都不能正常使用（因为前一个回调函数往往会影响到它后面所有的回调函数）。</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>事件监听在UI编程中随处可见。比如我给一个按钮绑定一个点击事件，给一个输入框绑定一个键盘敲击事件等等。比如下面的代码，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#button'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'我被点了'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面使用了JQuery的语法，给一个按钮绑定了一个事件。当事件触发时，会执行绑定的逻辑。这比较容易理解。</p>\n<p>除了界面事件之外，通常我们还有各种网络请求事件，比如ajax，websocket等等。这些网络请求在不同阶段也会触发各种事件，如果程序中有绑定相关处理逻辑，那么当事件触发时就会去执行相关逻辑。</p>\n<p>除此之外，我们还可以自定义事件。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).on(<span class=\"string\">'data-loaded'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'data loaded'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#div'</span>).trigger(<span class=\"string\">'data-loaded'</span>);</div></pre></td></tr></table></figure>\n<p>上面采用JQuery的语法，我们自定义了一个事件，叫做”data-loaded”，并在此事件上定义了一个触发逻辑。当我们通过trigger触发这个事件时，之前绑定的逻辑就会执行了。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>之前在事件监听中提到了自定义事件，其实自定义事件是观察者模式的一种具体表现。观察者模式，又称为消息订阅/发布模式。它的含义是，我们先假设有一个“信号中心”，当某个任务执行完毕就向信号中心发出一个信号（事件），然后信号中心收到这个信号之后将会进行广播。如果有其他任务订阅了该信号，那么这些任务就会收到一个通知，然后执行任务相关的逻辑。</p>\n<p>下面是观察者模式的一个简单实现（可参阅用AngularJS实现观察者模式），</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ob = &#123;</div><div class=\"line\">    channels: [],</div><div class=\"line\">    subscribe: <span class=\"keyword\">function</span>(topic, callback) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!_.isArray(this.channels[topic])) &#123;</div><div class=\"line\">           channels[topic] = [];</div><div class=\"line\">       &#125;</div><div class=\"line\">       var handlers = channels[topic];</div><div class=\"line\">       handlers.push(callback);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    unsubscribe: <span class=\"keyword\">function</span>(topic, callback) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!_.isArray(this.channels[topic])) &#123;</div><div class=\"line\">           <span class=\"built_in\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       var handlers = this.channels[topic];</div><div class=\"line\">       var index = _.indexOf(handlers, callback);</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt;= 0) &#123;</div><div class=\"line\">           handlers.splice(index, 1);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;,</div><div class=\"line\">   publish: <span class=\"keyword\">function</span>(topic, data) &#123;</div><div class=\"line\">       var self = this;</div><div class=\"line\">       var handlers = this.channels[topic] || [];</div><div class=\"line\">       _.each(handlers, <span class=\"keyword\">function</span>(handler) &#123;</div><div class=\"line\">           try &#123;</div><div class=\"line\">               handler.apply(self, [data]);</div><div class=\"line\">           &#125; catch (ex) &#123;</div><div class=\"line\">               console.log(ex);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其用法如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ob.subscribe(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'done'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    ob.publish(<span class=\"string\">'done'</span>)</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure>\n<p>观察者模式的实现方式有很多，不过基本核心都差不多，都会有消息订阅和发布。从本质上说，前面所说的事件监听也是一种观察者模式。</p>\n<p>观察者模式用好了自然好处多多，能够把解耦做的相当好。但是复杂的系统如果要用观察者模式来做逻辑，必须要做好事件订阅和发布的设计，否则会导致程序的运行流程混乱。</p>\n<h3 id=\"Promise模式\"><a href=\"#Promise模式\" class=\"headerlink\" title=\"Promise模式\"></a>Promise模式</h3><p>Promise严格来说不是一种新技术，它只是一种语法糖，一种机制，一种代码结构和流程，用于管理异步回调。</p>\n<p>jQuery中的Promise实现源自Promises/A规范。使用promise来管理回调，可以将回调逻辑扁平化，可以避免之前提到的回调地狱。示例代码如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>() &#123;</div><div class=\"line\">    var dfd = $.Deferred();</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'fn1'</span>);</div><div class=\"line\">        dfd.resolve();</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">    <span class=\"built_in\">return</span> dfd.promise();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>() &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'fn2'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fn1().then(fn2);</div></pre></td></tr></table></figure>\n<p>针对之前提到的回调地狱和异常难以捕获的问题，使用&lt;promise都可以轻松的解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">A().then(B).then(C).then(D).catch(ERROR);</div></pre></td></tr></table></figure>\n<p>看，一行就搞定了。不过使用promise处理异步调用，有一点需要注意，就是所有的异步函数都要promise化。所谓promise化的意思就是需要对异步函数进行封装，让其返回一个promise对象。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">A</span></span>() &#123;</div><div class=\"line\">    var promise = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</div><div class=\"line\">        // your logic </div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">return</span> promise;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ES6中的方案\"><a href=\"#ES6中的方案\" class=\"headerlink\" title=\"ES6中的方案\"></a>ES6中的方案</h3><p>ES6于今年6月份左右已经正式发布了。其中新增了不少内容。其中有两项内容可能用来解决异步回调的内容。</p>\n<h3 id=\"ES6中的Promise\"><a href=\"#ES6中的Promise\" class=\"headerlink\" title=\"ES6中的Promise\"></a>ES6中的Promise</h3><p>最新发布的ECMAScript2015中已经涵盖了promise的相关内容，不过ES6中的Promise规范其实是Promise/A+规范，可以说它是Promise/A规范的增强版。</p>\n<p>现代浏览器Chrome，Firefox等已经对Promise提供了原生支持。详细的文档可以参阅MDN。</p>\n<p>简单来说，ES6中promise的内容具体如下，</p>\n<p>promise有三种状态：pending（等待）、fulfilled（成功）、rejected（失败）。其中pending为初始状态。<br>promise的状态转换只能是：pending-&gt;fulfilled或者pending-&gt;rejected。转换方向不能颠倒，且fulfilled和rejected状态不能相互转换。每一种状态转换都会触发相关调用。<br>pending-&gt;fulfilled时，promise会带有一个value（成功状态的值）；pending-&gt;rejected时，promise会带有一个reason（失败状态的原因）<br>promise拥有then方法。then方法必须返回一个promise。then可以多次链式调用，且回调的顺序跟then的声明顺序一致。<br>then方法接受两个参数，分别是“pending-&gt;fulfilled”的调用和“pending-&gt;rejected”的调用。<br>then还可以接受一个promise实例，也可以接受一个thenable（类then对象或者方法）实例。<br>总得来说promise的内容比较简单，涉及到三种状态和两种状态转换。其实promise的核心就是then方法的实现。</p>\n<p>下面是来自MDN上Promise的代码示例（稍作改动），</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p1 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'p1 start'</span>);</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'p1 resolved'</span>);</div><div class=\"line\">    &#125;, 2000);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"keyword\">function</span> (value) &#123;</div><div class=\"line\">    console.log(value);</div><div class=\"line\">&#125;, <span class=\"keyword\">function</span>(reason) &#123;</div><div class=\"line\">    console.log(reason);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上述代码的执行结果是，先打印”p1 start”然后经过2秒左右再次打印”p1 resolved”。</p>\n<p>当然我们还可以添加多个回调。我们可以通过在前一个then方法中调用return将promise往后传递。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p1.then(<span class=\"keyword\">function</span>(v) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'1: '</span>, v);</div><div class=\"line\">    <span class=\"built_in\">return</span> v + <span class=\"string\">' 2'</span>;</div><div class=\"line\">&#125;).then(<span class=\"keyword\">function</span>(v) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'2: '</span>, v);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不过在使用Promise的时候，有一些需要注意的地方，这篇文章We have a problem with promises（翻译文）中总结得很好，有兴趣的可自行参阅。</p>\n<p>不管是ES6中的promise还是jQuery中的promise/deferred，的确可以避免异步代码的嵌套问题，使整体代码结构变得清晰，不用再受callback hell折磨。但是也仅仅止步于此，因为它并没有触碰js异步回调真正核心的内容。</p>\n<p>现在业界有许多关于PromiseA+规范的实现，不过博主个人觉得bluebird是个不错的库，可以值得一用，如果你有选择困难症，不妨试一试😎😎😎</p>\n<h3 id=\"ES6中Generator\"><a href=\"#ES6中Generator\" class=\"headerlink\" title=\"ES6中Generator\"></a>ES6中Generator</h3><p>ES6中引入的Generator可以理解为一种协程的实现机制，它允许函数在运行过程中将Javascript执行权交给其他函数（代码），并在需要的时候返回继续执行。</p>\n<p>我们可以使用Generator配合ES6中Promise，进一步将异步调用扁平化（转化成同步风格）。</p>\n<p>下面我们来看一个例子,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span>* <span class=\"function\"><span class=\"title\">gen</span></span>() &#123;</div><div class=\"line\">    var ret = yield new Promise(<span class=\"keyword\">function</span>(resolve, reject) &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'async task start'</span>);</div><div class=\"line\">        <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            resolve(<span class=\"string\">'async task end'</span>);</div><div class=\"line\">        &#125;, 2000);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    console.log(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述Node.js代码中，我们定义了一个Generator函数，且创建了一个promise，promise内使用setTimeout模拟了一个异步任务。</p>\n<p>接下来我们来执行这个Generator函数，因为yield返回的是一个promise，所以我们需要使用then方法，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var g = gen();</div><div class=\"line\">var result = g.next();</div><div class=\"line\"></div><div class=\"line\">result.value.then(<span class=\"keyword\">function</span>(str)&#123;</div><div class=\"line\">    console.log(str);</div><div class=\"line\">    // 对resolve的数据重新包装，然后传递给下一个promise</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        msg: str</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;).then(<span class=\"keyword\">function</span>(data)&#123;</div><div class=\"line\">    g.next(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>最终的结果如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">async task start</div><div class=\"line\">// 经过2秒左右</div><div class=\"line\">async task end</div><div class=\"line\">&#123;msg: <span class=\"string\">'async task end'</span>&#125;</div></pre></td></tr></table></figure>\n<p>其实关于Generator还有很多的内容可以说，这里由于篇幅的关系就不展开了。业界已经有了基于Generator处理异步调用的功能库，比如co、task.js。</p>\n<h3 id=\"ES7中的async和await\"><a href=\"#ES7中的async和await\" class=\"headerlink\" title=\"ES7中的async和await\"></a>ES7中的async和await</h3><p>在单线程的Javascript上做异步任务（甚至并发任务）的确是一个让人头疼的问题，总会越到各种各样的问题。从最早的函数回调，到Promise，再到Generator，涌现的各种解决方案，虽然都有所改进，但是仍然让人觉得并没有彻底的解决这个问题。</p>\n<p>举个例子来说，我现在就是想读取一个文件，这么简单的一件事，何必要考虑那么多呢？又是回调，又是promise的，烦不烦呐。我就想像下面这么简单的写代码，难道不行么？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">task</span></span>() &#123;</div><div class=\"line\">    var file1Content = <span class=\"built_in\">read</span>File(<span class=\"string\">'file1path'</span>);</div><div class=\"line\">    var file2Content = <span class=\"built_in\">read</span>File(fileContent);</div><div class=\"line\">    console.log(file2Content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>想要做的事情很简单，读取第一个文件，它的内容是要读取的第二个文件的文件名。</p>\n<p>值得庆幸的是，ES7中的async和await可以帮你做到这件事。不过要稍微改动一下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">async <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">task</span></span>() &#123;</div><div class=\"line\">    var file1Content = await <span class=\"built_in\">read</span>File(<span class=\"string\">'file1path'</span>);</div><div class=\"line\">    var file2Content = await <span class=\"built_in\">read</span>File(fileContent);</div><div class=\"line\">    console.log(file2Content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看，改动的地方很简单，只要在task前面加上关键词async，在函数内的异步任务前添加await声明即可。如果忽略这些额外的关键字，简直就是完完全全的同步写法嘛。</p>\n<p>其实，这种方式就是前端提到的Generator和Promise方案的封装。ECMAScript组织也认为这是目前解决Javascript异步回调的最佳方案，所以可能会在ES7中将其纳入到规范中来。需要注意的是，这项特性是ES7的提案，依赖Generator，所以慎用（目前来说基本用不了）！</p>\n<h3 id=\"fibjs\"><a href=\"#fibjs\" class=\"headerlink\" title=\"fibjs\"></a>fibjs</h3><p>除了上述的几种方案之外，其实还有另外一种方案。就是使用协程的方案来解决单线程上的异步调用问题。</p>\n<p>之前我们也提到过，Generator的yield可以暂停函数执行，将执行权临时转交给其他任务，待其他任务完毕之后，再交还回执行权。这其实就是协程的基本模型。</p>\n<p>业界有一款基于V8引擎的服务端开发框架fibjs，它的实现机制跟Node.js是不一样的。fibjs采用fiber解决v8引擎的多路复用，并通过大量c++组件，将重负荷运算委托给后台线程，释放v8线程，争取更大的并发时间。</p>\n<p>一句话，fibjs从底层，使用的纤程模型解决了异步调用的问题。关于fibjs，有兴趣的话可以查阅相关资料。不过我个人对它是持谨慎态度的。原因是如下两点，</p>\n<p>生态原因。<br>使用了js，但是又摒弃了js的异步。<br>不过还是可以作为兴趣去研究一下的。</p>\n<ul>\n<li>EOF -</li>\n</ul>\n<p>All rights reserved @gejiawen.</p>\n<p>本文链接：<a href=\"http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/\" target=\"_blank\" rel=\"external\">http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/</a></p>\n","excerpt":"","more":"<p><a href=\"http://gejiawen.github.io/\">原文转自蛋糕仙人：</a></p>\n<p>Javascript异步编程专题，目前包含以下几篇文章，</p>\n<ul>\n<li><a href=\"http://gejiawen.github.io/2015/10/12/think-about-async-in-javascript/\">浅谈Javascript中的异步</a></li>\n<li>Javascript中常见的异步编程模型</li>\n<li>Generator函数处理异步调用</li>\n</ul>\n<p>本篇文章是本专题的第二篇文章。</p>\n<hr>\n<p>正文开始。</p>\n<p>在Javascript异步编程专题的前一篇文章浅谈Javascript中的异步中，我简明的阐述了“Javascript中的异步原理”、“Javascript如何在单线程上实现异步调用”以及“Javascript中的定时器”等相关问题。</p>\n<p>本篇文章我将会谈一谈Javascript中常用的几种异步编程模型。</p>\n<p>在前端的代码编写中，异步的场景随处可见。比如鼠标点击、键盘回车、网络请求等这些与浏览器紧密联系的操作，比如一些延迟交互特效等等。</p>\n<p>在这些场景中，你必须要使用所谓的“异步模式”，否则将会严重程序的可行性和用户体验。我们列举这些场景中常用的几种异步编程模型，包括回调函数、事件监听、观察者模式（消息订阅/发布）、promise模式。除此之外还会稍微介绍一番ES6（ES7）中新增的方案。</p>\n<p>下面我们将针对每一种编程模型加以说明。</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p><strong>回调函数</strong>可以说是Javascript异步编程最基本的方法。我们试想有这样一个场景，我们需要在页面上展示一个持续3秒钟的loading视觉样式，然后在页面上显示我们真正想显示的内容。示例代码如下，</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// more code</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> loading(callback) &#123;</div><div class=\"line\">    // 持续3秒的loading展示</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        callback();</div><div class=\"line\">    &#125;, 3000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">show</span></span>() &#123;</div><div class=\"line\">    // 展示真实数据给用户</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">loading(show);</div><div class=\"line\"></div><div class=\"line\">// more code</div></pre></td></tr></table></figure>\n<p>代码中的<code>loading(show)</code>&gt;就是将函数<code>show()</code>作为函数<code>loading()</code>的参数。在<code>loading()</code>完成3秒的loading之后，再去执行回调函数（示例使用了<code>setTimeout</code>来模拟）。通过这种方法，<code>show()</code>就变成了异步调用，它的执行时机被推迟到<code>loading()</code>即将完成之前。</p>\n<h3 id=\"回调函数的缺陷\"><a href=\"#回调函数的缺陷\" class=\"headerlink\" title=\"回调函数的缺陷\"></a>回调函数的缺陷</h3><p>回调函数往往就是调用用户提供的函数，该函数往往是以参数的形式提供的。回调函数并不一定是异步执行的。回调函数的特点就是使用简单、容易理解。缺点就是逻辑间存在一定耦合。最恶心的地方在于会造成所谓的<code>callback hell</code>。比如下面这样的一个例子，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">A(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    B(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        C(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">           D(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">                // ...</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>例子中A、B、C、D四个任务存在依赖关系，通过函数回调的方式，写出来的代码就会变成上面的这个样子。维护性和可读性都非常糟糕。</p>\n<p>除了回调嵌套的问题之外，还可能会带来另一个问题，就是流程控制不方便。比如我们要发送3个请求，当3个请求都返回时，我们再执行相关逻辑，那么代码可能就是，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var count = 0</div><div class=\"line\"><span class=\"keyword\">for</span> (var i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">    request(<span class=\"string\">'source_'</span> + i, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        count++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === 3) &#123;</div><div class=\"line\">            // <span class=\"keyword\">do</span> my logic</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例代码中，我通过<code>request</code>对三个url发送了请求，但是我不知道这三个请求的返回情况。无奈之下我添加了一个计数器<code>count</code>，在每个请求的回调中都进行计数器判断，当计数器为3时即表示三个请求都已经成功返回了，此时再去执行相关任务。显而易见，这种情况下的流程控制就显得比较丑陋。</p>\n<p>最后，有时候我们为了程序的健壮性，可能会需要一个<code>try…catch</code>语法。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// demo1</div><div class=\"line\">try &#123;</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        throw new Error(<span class=\"string\">'error occured'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; catch(e) &#123;</div><div class=\"line\">    console.log(e);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// demo2</div><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        // your logic</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的示例代码中，如果我们像demo1那样将try…catch加在异步逻辑的外面，即使异步调用发生了异常我们也是捕获不到的，因为try…catch不能捕获未来的异常。无奈，我们只能像demo2那样将try…catch语句块放在具体的异步逻辑内。这样一旦异步调用多起来，那么就会多出来很多try…catch。这样肯定是不好的。</p>\n<p>除了上面这些问题之外，我觉得回调函数真正的核心问题在于，嵌套的回到函数往往会破坏整个程序的调用堆栈，并且像return，throw等这些用于代码流程控制的关键词都不能正常使用（因为前一个回调函数往往会影响到它后面所有的回调函数）。</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><p>事件监听在UI编程中随处可见。比如我给一个按钮绑定一个点击事件，给一个输入框绑定一个键盘敲击事件等等。比如下面的代码，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#button'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'我被点了'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面使用了JQuery的语法，给一个按钮绑定了一个事件。当事件触发时，会执行绑定的逻辑。这比较容易理解。</p>\n<p>除了界面事件之外，通常我们还有各种网络请求事件，比如ajax，websocket等等。这些网络请求在不同阶段也会触发各种事件，如果程序中有绑定相关处理逻辑，那么当事件触发时就会去执行相关逻辑。</p>\n<p>除此之外，我们还可以自定义事件。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#div'</span>).on(<span class=\"string\">'data-loaded'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'data loaded'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#div'</span>).trigger(<span class=\"string\">'data-loaded'</span>);</div></pre></td></tr></table></figure>\n<p>上面采用JQuery的语法，我们自定义了一个事件，叫做”data-loaded”，并在此事件上定义了一个触发逻辑。当我们通过trigger触发这个事件时，之前绑定的逻辑就会执行了。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>之前在事件监听中提到了自定义事件，其实自定义事件是观察者模式的一种具体表现。观察者模式，又称为消息订阅/发布模式。它的含义是，我们先假设有一个“信号中心”，当某个任务执行完毕就向信号中心发出一个信号（事件），然后信号中心收到这个信号之后将会进行广播。如果有其他任务订阅了该信号，那么这些任务就会收到一个通知，然后执行任务相关的逻辑。</p>\n<p>下面是观察者模式的一个简单实现（可参阅用AngularJS实现观察者模式），</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var ob = &#123;</div><div class=\"line\">    channels: [],</div><div class=\"line\">    subscribe: <span class=\"keyword\">function</span>(topic, callback) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!_.isArray(this.channels[topic])) &#123;</div><div class=\"line\">           channels[topic] = [];</div><div class=\"line\">       &#125;</div><div class=\"line\">       var handlers = channels[topic];</div><div class=\"line\">       handlers.push(callback);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    unsubscribe: <span class=\"keyword\">function</span>(topic, callback) &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!_.isArray(this.channels[topic])) &#123;</div><div class=\"line\">           <span class=\"built_in\">return</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       var handlers = this.channels[topic];</div><div class=\"line\">       var index = _.indexOf(handlers, callback);</div><div class=\"line\">       <span class=\"keyword\">if</span> (index &gt;= 0) &#123;</div><div class=\"line\">           handlers.splice(index, 1);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;,</div><div class=\"line\">   publish: <span class=\"keyword\">function</span>(topic, data) &#123;</div><div class=\"line\">       var self = this;</div><div class=\"line\">       var handlers = this.channels[topic] || [];</div><div class=\"line\">       _.each(handlers, <span class=\"keyword\">function</span>(handler) &#123;</div><div class=\"line\">           try &#123;</div><div class=\"line\">               handler.apply(self, [data]);</div><div class=\"line\">           &#125; catch (ex) &#123;</div><div class=\"line\">               console.log(ex);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其用法如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ob.subscribe(<span class=\"string\">'done'</span>, <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'done'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">    ob.publish(<span class=\"string\">'done'</span>)</div><div class=\"line\">&#125;, 1000);</div></pre></td></tr></table></figure>\n<p>观察者模式的实现方式有很多，不过基本核心都差不多，都会有消息订阅和发布。从本质上说，前面所说的事件监听也是一种观察者模式。</p>\n<p>观察者模式用好了自然好处多多，能够把解耦做的相当好。但是复杂的系统如果要用观察者模式来做逻辑，必须要做好事件订阅和发布的设计，否则会导致程序的运行流程混乱。</p>\n<h3 id=\"Promise模式\"><a href=\"#Promise模式\" class=\"headerlink\" title=\"Promise模式\"></a>Promise模式</h3><p>Promise严格来说不是一种新技术，它只是一种语法糖，一种机制，一种代码结构和流程，用于管理异步回调。</p>\n<p>jQuery中的Promise实现源自Promises/A规范。使用promise来管理回调，可以将回调逻辑扁平化，可以避免之前提到的回调地狱。示例代码如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn1</span></span>() &#123;</div><div class=\"line\">    var dfd = $.Deferred();</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'fn1'</span>);</div><div class=\"line\">        dfd.resolve();</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">    <span class=\"built_in\">return</span> dfd.promise();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn2</span></span>() &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'fn2'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fn1().then(fn2);</div></pre></td></tr></table></figure>\n<p>针对之前提到的回调地狱和异常难以捕获的问题，使用&lt;promise都可以轻松的解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">A().then(B).then(C).then(D).catch(ERROR);</div></pre></td></tr></table></figure>\n<p>看，一行就搞定了。不过使用promise处理异步调用，有一点需要注意，就是所有的异步函数都要promise化。所谓promise化的意思就是需要对异步函数进行封装，让其返回一个promise对象。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">A</span></span>() &#123;</div><div class=\"line\">    var promise = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</div><div class=\"line\">        // your logic </div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">return</span> promise;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"ES6中的方案\"><a href=\"#ES6中的方案\" class=\"headerlink\" title=\"ES6中的方案\"></a>ES6中的方案</h3><p>ES6于今年6月份左右已经正式发布了。其中新增了不少内容。其中有两项内容可能用来解决异步回调的内容。</p>\n<h3 id=\"ES6中的Promise\"><a href=\"#ES6中的Promise\" class=\"headerlink\" title=\"ES6中的Promise\"></a>ES6中的Promise</h3><p>最新发布的ECMAScript2015中已经涵盖了promise的相关内容，不过ES6中的Promise规范其实是Promise/A+规范，可以说它是Promise/A规范的增强版。</p>\n<p>现代浏览器Chrome，Firefox等已经对Promise提供了原生支持。详细的文档可以参阅MDN。</p>\n<p>简单来说，ES6中promise的内容具体如下，</p>\n<p>promise有三种状态：pending（等待）、fulfilled（成功）、rejected（失败）。其中pending为初始状态。<br>promise的状态转换只能是：pending-&gt;fulfilled或者pending-&gt;rejected。转换方向不能颠倒，且fulfilled和rejected状态不能相互转换。每一种状态转换都会触发相关调用。<br>pending-&gt;fulfilled时，promise会带有一个value（成功状态的值）；pending-&gt;rejected时，promise会带有一个reason（失败状态的原因）<br>promise拥有then方法。then方法必须返回一个promise。then可以多次链式调用，且回调的顺序跟then的声明顺序一致。<br>then方法接受两个参数，分别是“pending-&gt;fulfilled”的调用和“pending-&gt;rejected”的调用。<br>then还可以接受一个promise实例，也可以接受一个thenable（类then对象或者方法）实例。<br>总得来说promise的内容比较简单，涉及到三种状态和两种状态转换。其实promise的核心就是then方法的实现。</p>\n<p>下面是来自MDN上Promise的代码示例（稍作改动），</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p1 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'p1 start'</span>);</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">        resolve(<span class=\"string\">'p1 resolved'</span>);</div><div class=\"line\">    &#125;, 2000);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"keyword\">function</span> (value) &#123;</div><div class=\"line\">    console.log(value);</div><div class=\"line\">&#125;, <span class=\"keyword\">function</span>(reason) &#123;</div><div class=\"line\">    console.log(reason);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上述代码的执行结果是，先打印”p1 start”然后经过2秒左右再次打印”p1 resolved”。</p>\n<p>当然我们还可以添加多个回调。我们可以通过在前一个then方法中调用return将promise往后传递。比如，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">p1.then(<span class=\"keyword\">function</span>(v) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'1: '</span>, v);</div><div class=\"line\">    <span class=\"built_in\">return</span> v + <span class=\"string\">' 2'</span>;</div><div class=\"line\">&#125;).then(<span class=\"keyword\">function</span>(v) &#123;</div><div class=\"line\">    console.log(<span class=\"string\">'2: '</span>, v);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不过在使用Promise的时候，有一些需要注意的地方，这篇文章We have a problem with promises（翻译文）中总结得很好，有兴趣的可自行参阅。</p>\n<p>不管是ES6中的promise还是jQuery中的promise/deferred，的确可以避免异步代码的嵌套问题，使整体代码结构变得清晰，不用再受callback hell折磨。但是也仅仅止步于此，因为它并没有触碰js异步回调真正核心的内容。</p>\n<p>现在业界有许多关于PromiseA+规范的实现，不过博主个人觉得bluebird是个不错的库，可以值得一用，如果你有选择困难症，不妨试一试😎😎😎</p>\n<h3 id=\"ES6中Generator\"><a href=\"#ES6中Generator\" class=\"headerlink\" title=\"ES6中Generator\"></a>ES6中Generator</h3><p>ES6中引入的Generator可以理解为一种协程的实现机制，它允许函数在运行过程中将Javascript执行权交给其他函数（代码），并在需要的时候返回继续执行。</p>\n<p>我们可以使用Generator配合ES6中Promise，进一步将异步调用扁平化（转化成同步风格）。</p>\n<p>下面我们来看一个例子,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span>* <span class=\"function\"><span class=\"title\">gen</span></span>() &#123;</div><div class=\"line\">    var ret = yield new Promise(<span class=\"keyword\">function</span>(resolve, reject) &#123;</div><div class=\"line\">        console.log(<span class=\"string\">'async task start'</span>);</div><div class=\"line\">        <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</div><div class=\"line\">            resolve(<span class=\"string\">'async task end'</span>);</div><div class=\"line\">        &#125;, 2000);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    console.log(ret);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上述Node.js代码中，我们定义了一个Generator函数，且创建了一个promise，promise内使用setTimeout模拟了一个异步任务。</p>\n<p>接下来我们来执行这个Generator函数，因为yield返回的是一个promise，所以我们需要使用then方法，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var g = gen();</div><div class=\"line\">var result = g.next();</div><div class=\"line\"></div><div class=\"line\">result.value.then(<span class=\"keyword\">function</span>(str)&#123;</div><div class=\"line\">    console.log(str);</div><div class=\"line\">    // 对resolve的数据重新包装，然后传递给下一个promise</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;</div><div class=\"line\">        msg: str</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;).then(<span class=\"keyword\">function</span>(data)&#123;</div><div class=\"line\">    g.next(data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>最终的结果如下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">async task start</div><div class=\"line\">// 经过2秒左右</div><div class=\"line\">async task end</div><div class=\"line\">&#123;msg: <span class=\"string\">'async task end'</span>&#125;</div></pre></td></tr></table></figure>\n<p>其实关于Generator还有很多的内容可以说，这里由于篇幅的关系就不展开了。业界已经有了基于Generator处理异步调用的功能库，比如co、task.js。</p>\n<h3 id=\"ES7中的async和await\"><a href=\"#ES7中的async和await\" class=\"headerlink\" title=\"ES7中的async和await\"></a>ES7中的async和await</h3><p>在单线程的Javascript上做异步任务（甚至并发任务）的确是一个让人头疼的问题，总会越到各种各样的问题。从最早的函数回调，到Promise，再到Generator，涌现的各种解决方案，虽然都有所改进，但是仍然让人觉得并没有彻底的解决这个问题。</p>\n<p>举个例子来说，我现在就是想读取一个文件，这么简单的一件事，何必要考虑那么多呢？又是回调，又是promise的，烦不烦呐。我就想像下面这么简单的写代码，难道不行么？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">task</span></span>() &#123;</div><div class=\"line\">    var file1Content = <span class=\"built_in\">read</span>File(<span class=\"string\">'file1path'</span>);</div><div class=\"line\">    var file2Content = <span class=\"built_in\">read</span>File(fileContent);</div><div class=\"line\">    console.log(file2Content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>想要做的事情很简单，读取第一个文件，它的内容是要读取的第二个文件的文件名。</p>\n<p>值得庆幸的是，ES7中的async和await可以帮你做到这件事。不过要稍微改动一下，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">async <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">task</span></span>() &#123;</div><div class=\"line\">    var file1Content = await <span class=\"built_in\">read</span>File(<span class=\"string\">'file1path'</span>);</div><div class=\"line\">    var file2Content = await <span class=\"built_in\">read</span>File(fileContent);</div><div class=\"line\">    console.log(file2Content);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看，改动的地方很简单，只要在task前面加上关键词async，在函数内的异步任务前添加await声明即可。如果忽略这些额外的关键字，简直就是完完全全的同步写法嘛。</p>\n<p>其实，这种方式就是前端提到的Generator和Promise方案的封装。ECMAScript组织也认为这是目前解决Javascript异步回调的最佳方案，所以可能会在ES7中将其纳入到规范中来。需要注意的是，这项特性是ES7的提案，依赖Generator，所以慎用（目前来说基本用不了）！</p>\n<h3 id=\"fibjs\"><a href=\"#fibjs\" class=\"headerlink\" title=\"fibjs\"></a>fibjs</h3><p>除了上述的几种方案之外，其实还有另外一种方案。就是使用协程的方案来解决单线程上的异步调用问题。</p>\n<p>之前我们也提到过，Generator的yield可以暂停函数执行，将执行权临时转交给其他任务，待其他任务完毕之后，再交还回执行权。这其实就是协程的基本模型。</p>\n<p>业界有一款基于V8引擎的服务端开发框架fibjs，它的实现机制跟Node.js是不一样的。fibjs采用fiber解决v8引擎的多路复用，并通过大量c++组件，将重负荷运算委托给后台线程，释放v8线程，争取更大的并发时间。</p>\n<p>一句话，fibjs从底层，使用的纤程模型解决了异步调用的问题。关于fibjs，有兴趣的话可以查阅相关资料。不过我个人对它是持谨慎态度的。原因是如下两点，</p>\n<p>生态原因。<br>使用了js，但是又摒弃了js的异步。<br>不过还是可以作为兴趣去研究一下的。</p>\n<ul>\n<li>EOF -</li>\n</ul>\n<p>All rights reserved @gejiawen.</p>\n<p>本文链接：<a href=\"http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/\">http://gejiawen.github.io/2015/10/12/some-javascript-async-pattern/</a></p>\n"},{"title":"hexo 博客利用 github 分支同步源文件","date":"2017-03-06T06:00:00.000Z","description":"hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。","_content":"[原文转自imweb社区：](http://imweb.io/topic/5848d4259be501ba17b10a9a)\n\n---\n\nhexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：\n\n## 初始化版本库&建立仓库关联（已与远程仓库关联的可忽略这一步）\n  一般根据 hexo 教程一步步建立起来的博客都没有跟自己的远程仓库建立关联，查看是否关联的方法是输入 git remote 看是否有关联的远程仓库：\n\n```js\ncd blog\ngit remote\n// origin\n```\n\n可以看到我这里有一个名叫 origin 的仓库与我本地的文件夹关联，如果当前还没有关联，先用 git init 命令将你的本地文件夹初始化成一个版本库，然后使用 git remote add origin 你的github仓库地址 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin，这样就建立好了关联了，使用刚刚的 git remote 命令检测会看到你关联的仓库。\n```js\ngit init\n// Initialized empty Git repository in ****/blog/.git/\ngit remote add origin git@github.com:lulua87/lulua87.github.io.git\n\ngit remote\n// orgin\n```\n\n## 提交文件\n  像正常提交文件那样使用 git add 、 git commit 和 git push 命令提交文件，但这里在 push 的时候要注意新建一个分支去存你要提交的源文件，具体命令是 git push -u origin HEAD:分支名，这里的分支名自己取，HEAD 是版本库的头指针的意思，代表本地版本库里面的最新版本，origin 是刚刚你自己添加远程关联时候的名字，如果你的不是叫 origin 就写成自己定义的名字， -u 参数是为了建立本地分支与远程分支的关联，以后 push 的时候直接输入 git push 就可以了，所以这整个命令的意思就是：把本地最新版本的代码提交到远程仓库的某个分支上去，如果远程仓库还没有这个分支，就在远程仓库里新建一个分支，然后将它跟本地当前分支关联起来。提交之后你就会发现自己的 github 仓库多了一条分支，就是你刚刚提交的那个分支。   至于这里为什么不先在 github 上面手动建立分支，然后再在本地建立关联，是因为如果是远程手动建立分支会自动以 master 分支为模板建立一份一模一样的文件，而我们仓库里面 master 分支存的都是经过 hexo 编译的文件，跟源文件完全不一样，新建这样一个分支之后还要手动把里面的文件删掉，另一个原因是如果在远程手动建分支，你在本地还得手动用 git fetch origin 拉取远程分支的更新，然后再手动建立与分支的关联，比较麻烦，当然如果你是刚开始部署 hexo，github 仓库里面还一点东西都没有的话这些问题都不存在，那就随意。\n```js\ngit add .\ngit commit -m 'submit sth'\ngit push -u origin HEAD:rawblog\n```\n## 设置默认分支\n  最后我们需要把你新建的那个分支设置成 github 的默认分支，这样做的原因是为了你以后在别的机器上拉取代码的时候能够直接拉取源文件，不用再指定分支。\n\n在这里选择好默认分支之后，update就行了。现在你就可以使用 github 来同步自己的 hexo 博客源文件啦~\n\n原文章结束－－－－－－－－－－－－\n\n## 遇到的问题总结\n\n#### Mac下配置多个SSH-Key:\n\n附上：Mac下配置多个SSH-Key，为了同时在同一台电脑上使用ssh公钥和私钥进行公司日常工作和业余时间进行github代码上传。\n因为在同一台电脑上，我们不能指望通过ssh-keygen生成的一对密钥对，既能访问github又能访问公司私有的gitlab。\n\n注意： 这里已经事先配好了用于公司工作提交的第一个ssh公钥和私钥。过程忽略～\n\n我们进行第二个ssh－key的创建注意事项：\n1. cd ~/.ssh\n2. ssh-keygen -t -rsa -C '你的github绑定的私人邮箱完整格式' -f id_rsa_lulua87\n3. ssh -T git@github.com\n出现如下信息，表明创建成功：\nHi lulua87/lulua87.github.io! You've successfully authenticated, but GitHub does not provide shell access.\n4. cat ~/.ssh/id_rsa_lulua87.pub | pbcopy\n把为了github生成的公钥上到你的github的blog仓库对应的设置里的最后一项Deploy keys，点击 add Deploy keys 并复制；\n5. vi ~/.ssh/config\n然后在~/.ssh 目录下创建config文件，该文件用于配置私钥对应的服务器：\n```js\n# icode\nHost ****\nHostName **＊*\nUser ＊＊工作邮箱＊＊\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\n\n# github\nHost github.com\nHostName github.com\nUser git\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa_lulua87\n```\n\nPS：编辑完成之后，在英文输入法下， 键入esc, :wq 保存并退出。\n\n当链接到公司内部上的仓库时，会使用id_ras验证远端的公钥是否匹配。而链接到github.com上的仓库时，则使用私钥id_ras_lulua87验证远端（github.com）的公钥(id_rsa_lulua87.pub)是否匹配。\n\n#### hexo安装之后使用hexo指令命令行报错：\n```js\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }  \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }  \n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n解决办法on google\ngoogle之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：\n```js\nnpm install hexo --no-optional\n```\n\n但在我的环境下方法无效：\n```js\nnpm uninstall hexo\nnpm install hexo --no-optional\n```\n\n可是依旧没有效果。\n其实hexo暂时并没有用到dtrace-prodider，仅仅是报错而已，hexo的命令还是能执行，但对于强迫症来说，简直无法忍受。\n\n我的解决办法\n重装hexo-cli:\n```js\nnpm uninstall hexo-cli -g\nnpm install hexo-cli -g\n```","source":"_posts/hexo_blog_for_github_branch_auto_update.md","raw":"\n---\ntitle: \"hexo 博客利用 github 分支同步源文件\"\ndate: 2017-03-06 14:00:00\ntags: ['hexo', 'github']\ndescription: \"hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。\"\n\n---\n[原文转自imweb社区：](http://imweb.io/topic/5848d4259be501ba17b10a9a)\n\n---\n\nhexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：\n\n## 初始化版本库&建立仓库关联（已与远程仓库关联的可忽略这一步）\n  一般根据 hexo 教程一步步建立起来的博客都没有跟自己的远程仓库建立关联，查看是否关联的方法是输入 git remote 看是否有关联的远程仓库：\n\n```js\ncd blog\ngit remote\n// origin\n```\n\n可以看到我这里有一个名叫 origin 的仓库与我本地的文件夹关联，如果当前还没有关联，先用 git init 命令将你的本地文件夹初始化成一个版本库，然后使用 git remote add origin 你的github仓库地址 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin，这样就建立好了关联了，使用刚刚的 git remote 命令检测会看到你关联的仓库。\n```js\ngit init\n// Initialized empty Git repository in ****/blog/.git/\ngit remote add origin git@github.com:lulua87/lulua87.github.io.git\n\ngit remote\n// orgin\n```\n\n## 提交文件\n  像正常提交文件那样使用 git add 、 git commit 和 git push 命令提交文件，但这里在 push 的时候要注意新建一个分支去存你要提交的源文件，具体命令是 git push -u origin HEAD:分支名，这里的分支名自己取，HEAD 是版本库的头指针的意思，代表本地版本库里面的最新版本，origin 是刚刚你自己添加远程关联时候的名字，如果你的不是叫 origin 就写成自己定义的名字， -u 参数是为了建立本地分支与远程分支的关联，以后 push 的时候直接输入 git push 就可以了，所以这整个命令的意思就是：把本地最新版本的代码提交到远程仓库的某个分支上去，如果远程仓库还没有这个分支，就在远程仓库里新建一个分支，然后将它跟本地当前分支关联起来。提交之后你就会发现自己的 github 仓库多了一条分支，就是你刚刚提交的那个分支。   至于这里为什么不先在 github 上面手动建立分支，然后再在本地建立关联，是因为如果是远程手动建立分支会自动以 master 分支为模板建立一份一模一样的文件，而我们仓库里面 master 分支存的都是经过 hexo 编译的文件，跟源文件完全不一样，新建这样一个分支之后还要手动把里面的文件删掉，另一个原因是如果在远程手动建分支，你在本地还得手动用 git fetch origin 拉取远程分支的更新，然后再手动建立与分支的关联，比较麻烦，当然如果你是刚开始部署 hexo，github 仓库里面还一点东西都没有的话这些问题都不存在，那就随意。\n```js\ngit add .\ngit commit -m 'submit sth'\ngit push -u origin HEAD:rawblog\n```\n## 设置默认分支\n  最后我们需要把你新建的那个分支设置成 github 的默认分支，这样做的原因是为了你以后在别的机器上拉取代码的时候能够直接拉取源文件，不用再指定分支。\n\n在这里选择好默认分支之后，update就行了。现在你就可以使用 github 来同步自己的 hexo 博客源文件啦~\n\n原文章结束－－－－－－－－－－－－\n\n## 遇到的问题总结\n\n#### Mac下配置多个SSH-Key:\n\n附上：Mac下配置多个SSH-Key，为了同时在同一台电脑上使用ssh公钥和私钥进行公司日常工作和业余时间进行github代码上传。\n因为在同一台电脑上，我们不能指望通过ssh-keygen生成的一对密钥对，既能访问github又能访问公司私有的gitlab。\n\n注意： 这里已经事先配好了用于公司工作提交的第一个ssh公钥和私钥。过程忽略～\n\n我们进行第二个ssh－key的创建注意事项：\n1. cd ~/.ssh\n2. ssh-keygen -t -rsa -C '你的github绑定的私人邮箱完整格式' -f id_rsa_lulua87\n3. ssh -T git@github.com\n出现如下信息，表明创建成功：\nHi lulua87/lulua87.github.io! You've successfully authenticated, but GitHub does not provide shell access.\n4. cat ~/.ssh/id_rsa_lulua87.pub | pbcopy\n把为了github生成的公钥上到你的github的blog仓库对应的设置里的最后一项Deploy keys，点击 add Deploy keys 并复制；\n5. vi ~/.ssh/config\n然后在~/.ssh 目录下创建config文件，该文件用于配置私钥对应的服务器：\n```js\n# icode\nHost ****\nHostName **＊*\nUser ＊＊工作邮箱＊＊\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\n\n# github\nHost github.com\nHostName github.com\nUser git\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa_lulua87\n```\n\nPS：编辑完成之后，在英文输入法下， 键入esc, :wq 保存并退出。\n\n当链接到公司内部上的仓库时，会使用id_ras验证远端的公钥是否匹配。而链接到github.com上的仓库时，则使用私钥id_ras_lulua87验证远端（github.com）的公钥(id_rsa_lulua87.pub)是否匹配。\n\n#### hexo安装之后使用hexo指令命令行报错：\n```js\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }  \n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }  \n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n解决办法on google\ngoogle之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：\n```js\nnpm install hexo --no-optional\n```\n\n但在我的环境下方法无效：\n```js\nnpm uninstall hexo\nnpm install hexo --no-optional\n```\n\n可是依旧没有效果。\n其实hexo暂时并没有用到dtrace-prodider，仅仅是报错而已，hexo的命令还是能执行，但对于强迫症来说，简直无法忍受。\n\n我的解决办法\n重装hexo-cli:\n```js\nnpm uninstall hexo-cli -g\nnpm install hexo-cli -g\n```","slug":"hexo_blog_for_github_branch_auto_update","published":1,"updated":"2017-03-06T07:49:11.000Z","_id":"cizxsje4a00047rjldbvxn5is","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://imweb.io/topic/5848d4259be501ba17b10a9a\" target=\"_blank\" rel=\"external\">原文转自imweb社区：</a></p>\n<hr>\n<p>hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：</p>\n<h2 id=\"初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）\"><a href=\"#初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）\" class=\"headerlink\" title=\"初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）\"></a>初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）</h2><p>  一般根据 hexo 教程一步步建立起来的博客都没有跟自己的远程仓库建立关联，查看是否关联的方法是输入 git remote 看是否有关联的远程仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd blog</div><div class=\"line\">git remote</div><div class=\"line\"><span class=\"comment\">// origin</span></div></pre></td></tr></table></figure>\n<p>可以看到我这里有一个名叫 origin 的仓库与我本地的文件夹关联，如果当前还没有关联，先用 git init 命令将你的本地文件夹初始化成一个版本库，然后使用 git remote add origin 你的github仓库地址 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin，这样就建立好了关联了，使用刚刚的 git remote 命令检测会看到你关联的仓库。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\"><span class=\"comment\">// Initialized empty Git repository in ****/blog/.git/</span></div><div class=\"line\">git remote add origin git@github.com:lulua87/lulua87.github.io.git</div><div class=\"line\"></div><div class=\"line\">git remote</div><div class=\"line\"><span class=\"comment\">// orgin</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"提交文件\"><a href=\"#提交文件\" class=\"headerlink\" title=\"提交文件\"></a>提交文件</h2><p>  像正常提交文件那样使用 git add 、 git commit 和 git push 命令提交文件，但这里在 push 的时候要注意新建一个分支去存你要提交的源文件，具体命令是 git push -u origin HEAD:分支名，这里的分支名自己取，HEAD 是版本库的头指针的意思，代表本地版本库里面的最新版本，origin 是刚刚你自己添加远程关联时候的名字，如果你的不是叫 origin 就写成自己定义的名字， -u 参数是为了建立本地分支与远程分支的关联，以后 push 的时候直接输入 git push 就可以了，所以这整个命令的意思就是：把本地最新版本的代码提交到远程仓库的某个分支上去，如果远程仓库还没有这个分支，就在远程仓库里新建一个分支，然后将它跟本地当前分支关联起来。提交之后你就会发现自己的 github 仓库多了一条分支，就是你刚刚提交的那个分支。   至于这里为什么不先在 github 上面手动建立分支，然后再在本地建立关联，是因为如果是远程手动建立分支会自动以 master 分支为模板建立一份一模一样的文件，而我们仓库里面 master 分支存的都是经过 hexo 编译的文件，跟源文件完全不一样，新建这样一个分支之后还要手动把里面的文件删掉，另一个原因是如果在远程手动建分支，你在本地还得手动用 git fetch origin 拉取远程分支的更新，然后再手动建立与分支的关联，比较麻烦，当然如果你是刚开始部署 hexo，github 仓库里面还一点东西都没有的话这些问题都不存在，那就随意。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">'submit sth'</span></div><div class=\"line\">git push -u origin HEAD:rawblog</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置默认分支\"><a href=\"#设置默认分支\" class=\"headerlink\" title=\"设置默认分支\"></a>设置默认分支</h2><p>  最后我们需要把你新建的那个分支设置成 github 的默认分支，这样做的原因是为了你以后在别的机器上拉取代码的时候能够直接拉取源文件，不用再指定分支。</p>\n<p>在这里选择好默认分支之后，update就行了。现在你就可以使用 github 来同步自己的 hexo 博客源文件啦~</p>\n<p>原文章结束－－－－－－－－－－－－</p>\n<h2 id=\"遇到的问题总结\"><a href=\"#遇到的问题总结\" class=\"headerlink\" title=\"遇到的问题总结\"></a>遇到的问题总结</h2><h4 id=\"Mac下配置多个SSH-Key\"><a href=\"#Mac下配置多个SSH-Key\" class=\"headerlink\" title=\"Mac下配置多个SSH-Key:\"></a>Mac下配置多个SSH-Key:</h4><p>附上：Mac下配置多个SSH-Key，为了同时在同一台电脑上使用ssh公钥和私钥进行公司日常工作和业余时间进行github代码上传。<br>因为在同一台电脑上，我们不能指望通过ssh-keygen生成的一对密钥对，既能访问github又能访问公司私有的gitlab。</p>\n<p>注意： 这里已经事先配好了用于公司工作提交的第一个ssh公钥和私钥。过程忽略～</p>\n<p>我们进行第二个ssh－key的创建注意事项：</p>\n<ol>\n<li>cd ~/.ssh</li>\n<li>ssh-keygen -t -rsa -C ‘你的github绑定的私人邮箱完整格式’ -f id_rsa_lulua87</li>\n<li>ssh -T git@github.com<br>出现如下信息，表明创建成功：<br>Hi lulua87/lulua87.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>cat ~/.ssh/id_rsa_lulua87.pub | pbcopy<br>把为了github生成的公钥上到你的github的blog仓库对应的设置里的最后一项Deploy keys，点击 add Deploy keys 并复制；</li>\n<li>vi ~/.ssh/config<br>然后在~/.ssh 目录下创建config文件，该文件用于配置私钥对应的服务器：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># icode</div><div class=\"line\">Host ****</div><div class=\"line\">HostName **＊*</div><div class=\"line\">User ＊＊工作邮箱＊＊</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\"></div><div class=\"line\"># github</div><div class=\"line\">Host github.com</div><div class=\"line\">HostName github.com</div><div class=\"line\">User git</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_lulua87</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS：编辑完成之后，在英文输入法下， 键入esc, :wq 保存并退出。</p>\n<p>当链接到公司内部上的仓库时，会使用id_ras验证远端的公钥是否匹配。而链接到github.com上的仓库时，则使用私钥id_ras_lulua87验证远端（github.com）的公钥(id_rsa_lulua87.pub)是否匹配。</p>\n<h4 id=\"hexo安装之后使用hexo指令命令行报错：\"><a href=\"#hexo安装之后使用hexo指令命令行报错：\" class=\"headerlink\" title=\"hexo安装之后使用hexo指令命令行报错：\"></a>hexo安装之后使用hexo指令命令行报错：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;  </div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;  </div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>\n<p>解决办法on google<br>google之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure></p>\n<p>但在我的环境下方法无效：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall hexo</div><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure></p>\n<p>可是依旧没有效果。<br>其实hexo暂时并没有用到dtrace-prodider，仅仅是报错而已，hexo的命令还是能执行，但对于强迫症来说，简直无法忍受。</p>\n<p>我的解决办法<br>重装hexo-cli:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall hexo-cli -g</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><a href=\"http://imweb.io/topic/5848d4259be501ba17b10a9a\">原文转自imweb社区：</a></p>\n<hr>\n<p>hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：</p>\n<h2 id=\"初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）\"><a href=\"#初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）\" class=\"headerlink\" title=\"初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）\"></a>初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）</h2><p>  一般根据 hexo 教程一步步建立起来的博客都没有跟自己的远程仓库建立关联，查看是否关联的方法是输入 git remote 看是否有关联的远程仓库：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd blog</div><div class=\"line\">git remote</div><div class=\"line\"><span class=\"comment\">// origin</span></div></pre></td></tr></table></figure>\n<p>可以看到我这里有一个名叫 origin 的仓库与我本地的文件夹关联，如果当前还没有关联，先用 git init 命令将你的本地文件夹初始化成一个版本库，然后使用 git remote add origin 你的github仓库地址 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin，这样就建立好了关联了，使用刚刚的 git remote 命令检测会看到你关联的仓库。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\"><span class=\"comment\">// Initialized empty Git repository in ****/blog/.git/</span></div><div class=\"line\">git remote add origin git@github.com:lulua87/lulua87.github.io.git</div><div class=\"line\"></div><div class=\"line\">git remote</div><div class=\"line\"><span class=\"comment\">// orgin</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"提交文件\"><a href=\"#提交文件\" class=\"headerlink\" title=\"提交文件\"></a>提交文件</h2><p>  像正常提交文件那样使用 git add 、 git commit 和 git push 命令提交文件，但这里在 push 的时候要注意新建一个分支去存你要提交的源文件，具体命令是 git push -u origin HEAD:分支名，这里的分支名自己取，HEAD 是版本库的头指针的意思，代表本地版本库里面的最新版本，origin 是刚刚你自己添加远程关联时候的名字，如果你的不是叫 origin 就写成自己定义的名字， -u 参数是为了建立本地分支与远程分支的关联，以后 push 的时候直接输入 git push 就可以了，所以这整个命令的意思就是：把本地最新版本的代码提交到远程仓库的某个分支上去，如果远程仓库还没有这个分支，就在远程仓库里新建一个分支，然后将它跟本地当前分支关联起来。提交之后你就会发现自己的 github 仓库多了一条分支，就是你刚刚提交的那个分支。   至于这里为什么不先在 github 上面手动建立分支，然后再在本地建立关联，是因为如果是远程手动建立分支会自动以 master 分支为模板建立一份一模一样的文件，而我们仓库里面 master 分支存的都是经过 hexo 编译的文件，跟源文件完全不一样，新建这样一个分支之后还要手动把里面的文件删掉，另一个原因是如果在远程手动建分支，你在本地还得手动用 git fetch origin 拉取远程分支的更新，然后再手动建立与分支的关联，比较麻烦，当然如果你是刚开始部署 hexo，github 仓库里面还一点东西都没有的话这些问题都不存在，那就随意。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">'submit sth'</span></div><div class=\"line\">git push -u origin HEAD:rawblog</div></pre></td></tr></table></figure></p>\n<h2 id=\"设置默认分支\"><a href=\"#设置默认分支\" class=\"headerlink\" title=\"设置默认分支\"></a>设置默认分支</h2><p>  最后我们需要把你新建的那个分支设置成 github 的默认分支，这样做的原因是为了你以后在别的机器上拉取代码的时候能够直接拉取源文件，不用再指定分支。</p>\n<p>在这里选择好默认分支之后，update就行了。现在你就可以使用 github 来同步自己的 hexo 博客源文件啦~</p>\n<p>原文章结束－－－－－－－－－－－－</p>\n<h2 id=\"遇到的问题总结\"><a href=\"#遇到的问题总结\" class=\"headerlink\" title=\"遇到的问题总结\"></a>遇到的问题总结</h2><h4 id=\"Mac下配置多个SSH-Key\"><a href=\"#Mac下配置多个SSH-Key\" class=\"headerlink\" title=\"Mac下配置多个SSH-Key:\"></a>Mac下配置多个SSH-Key:</h4><p>附上：Mac下配置多个SSH-Key，为了同时在同一台电脑上使用ssh公钥和私钥进行公司日常工作和业余时间进行github代码上传。<br>因为在同一台电脑上，我们不能指望通过ssh-keygen生成的一对密钥对，既能访问github又能访问公司私有的gitlab。</p>\n<p>注意： 这里已经事先配好了用于公司工作提交的第一个ssh公钥和私钥。过程忽略～</p>\n<p>我们进行第二个ssh－key的创建注意事项：</p>\n<ol>\n<li>cd ~/.ssh</li>\n<li>ssh-keygen -t -rsa -C ‘你的github绑定的私人邮箱完整格式’ -f id_rsa_lulua87</li>\n<li>ssh -T git@github.com<br>出现如下信息，表明创建成功：<br>Hi lulua87/lulua87.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</li>\n<li>cat ~/.ssh/id_rsa_lulua87.pub | pbcopy<br>把为了github生成的公钥上到你的github的blog仓库对应的设置里的最后一项Deploy keys，点击 add Deploy keys 并复制；</li>\n<li>vi ~/.ssh/config<br>然后在~/.ssh 目录下创建config文件，该文件用于配置私钥对应的服务器：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># icode</div><div class=\"line\">Host ****</div><div class=\"line\">HostName **＊*</div><div class=\"line\">User ＊＊工作邮箱＊＊</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\"></div><div class=\"line\"># github</div><div class=\"line\">Host github.com</div><div class=\"line\">HostName github.com</div><div class=\"line\">User git</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa_lulua87</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS：编辑完成之后，在英文输入法下， 键入esc, :wq 保存并退出。</p>\n<p>当链接到公司内部上的仓库时，会使用id_ras验证远端的公钥是否匹配。而链接到github.com上的仓库时，则使用私钥id_ras_lulua87验证远端（github.com）的公钥(id_rsa_lulua87.pub)是否匹配。</p>\n<h4 id=\"hexo安装之后使用hexo指令命令行报错：\"><a href=\"#hexo安装之后使用hexo指令命令行报错：\" class=\"headerlink\" title=\"hexo安装之后使用hexo指令命令行报错：\"></a>hexo安装之后使用hexo指令命令行报错：</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Release/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;  </div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/default/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;  </div><div class=\"line\">&#123; [<span class=\"built_in\">Error</span>: Cannot find <span class=\"built_in\">module</span> <span class=\"string\">'./build/Debug/DTraceProviderBindings'</span>] code: <span class=\"string\">'MODULE_NOT_FOUND'</span> &#125;</div></pre></td></tr></table></figure>\n<p>解决办法on google<br>google之后发现被这个问题困扰的小伙伴还真不少，网上最靠谱的解决办法是：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure></p>\n<p>但在我的环境下方法无效：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall hexo</div><div class=\"line\">npm install hexo --no-optional</div></pre></td></tr></table></figure></p>\n<p>可是依旧没有效果。<br>其实hexo暂时并没有用到dtrace-prodider，仅仅是报错而已，hexo的命令还是能执行，但对于强迫症来说，简直无法忍受。</p>\n<p>我的解决办法<br>重装hexo-cli:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall hexo-cli -g</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>\n"},{"title":"一些实用的CSS3问题及解决","date":"2016-05-09T12:24:00.000Z","description":"text-overflow主要功能是用来截取文本长度，用（...）来代替截掉的文本，原本这个效果以前主要靠js和程序来完成，那么现在我们可以直接使用CSS3来实现","_content":"\n### text-overflow实现文本(...)截取省略效果\n\n语法：\n\n  text-overflow ： clip | ellipsis\n \n\n取值说明：\n\n1、clip:表示不显示省略标记(...)，而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用，如果不配合的话将无任何效果；\n\n2、ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap一起使用才会有效果。\nHTML如下:\n```js\n<div class=\"demo text-overflow-ellipsis\">用我来测试text-overflow:ellipsis的性能和使用方法。</div>\n```\n对应的CSS:\n\n```js\n.text-overflow-ellipsis {\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;    \n    overflow: hidden;\n    white-space: nowrap; //让文本不换行\n  }\n```\ntext-overflow:ellipsis到目前firefox4.0都还不支持这个属性.\n\n解决思路: \n一、Firefox的伪类──:after\n\nHTML如下:\n```js\n<div class=\"demo text-overflow\">\n     <span>>est AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH</span>\n  </div>\n```\n\nCSS如下:\n```js\n .text-overflow {\n    overflow: hidden; /*清除浮动*/\n }\n /*Safari,Opera,IE下效果*/\n .text-overflow span{\n   display: block;\n   width: 100px; /*设置内容宽度*/\n   overflow: hidden;/*隐藏溢出的文本*/\n   white-space: nowrap;/*让文本不换行*/\n   -o-text-overflow: ellipsis;/*Opera下实现ellipsis效果*/\n   text-overflow: ellipsis;/*Safari，IE下实现ellipsis效果*/\n }\n        \n /*Firefox实现效果*/\n @-moz-document url-prefix(){ /*@-moz-document url-perfix(){}是firefox的一个独有属性，只有firefox浏览器能识别，也可以说是一种hack*/\n   .text-overflow span {\n     max-width: 70px;/* 在FF下改变内容宽度，用来放置:after增加的内容(...)*/\n     float: left;/*进行浮动*/\n   }\n }\n @-moz-document url-prefix(){ \n   /*利用:after增加(...)省略符*/\n   .text-overflow:after {\n      content:\"...\";/*增加省略符号*/\n      float: left;/*设置浮动*/\n      width: 25px;/*省略符宽度*/\n      padding-left: 5px;/*省略符内距，用来拉开内容之间的距离*/\n      color: #000;\n   }\n }\n ```\n\n\n\n### 使用::Selection\n选择文本，背景是红色，而文本是白色的问题，\n![::Selection](http://cdn.w3cplus.com/cdn/farfuture/uIe9qU7h16JBryuv8OGphj7O1YZp2aJqKuCODjRoLak/mtime:1341237777/sites/default/files/selection-red.png)\n\n::selection使用语法：\n\n```js\n/*Webkit,Opera9.5+,Ie9+*/\n::selection {\n    background: #F00;\n    color: #FFF;\n}\n/*Mozilla Firefox*/\n::-moz-selection {\n    background: #F00;\n    color: #FFF;\n}\n```\n\n\n### Box-sizing\n\n[box-sizing是CSS3的box属性之一](http://www.w3cplus.com/content/css3-box-sizing)。一说到CSS的盒模型（Box model）我想很多人都会比较烦.\n\nCSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？两者的计算方法不一至.\n\n语法：\n\n  box-sizing ： content-box || border-box || inherit\n\n取值说明\n\n1. content-box:此值为其默认值，其让元素维持W3C的标准Box Model，也就是说元素的宽度/高度（width/height）等于元素边框宽度（border）加上元素内边距（padding）加上元素内容宽度/高度（content width/height）即：Element Width/Height = border+padding+content width/height。\n\n2. border-box:此值让元素维持IE传统的Box Model（IE6以下版本），也就是说元素的宽度/高度等于元素内容的宽度/高度。（从上面Box Model介绍可知，我们这里的content width/height包含了元素的border,padding,内容的width/height【此处的内容宽度/高度=width/height-border-padding】）。\n\n\n### 字符相关设置\n\n#### word-wrap\n\n语法：\n\n   word-wrap ： normal | break-word\n \n\n取值说明：\n\n1. normal和break-word，其中normal为默认值，当其值为normal控制连续文本换行(允许内容顶开容器的边界，换句话说内容可以撑破容器）；\n\n2. break-word将内容在边界内换行（不截断英文单词换行，截断英文单词换行需要使用word-break:all属性）.\n\n\n#### word-break使用：\n\n上面我们使用word-wrap:break-word只能在内容中换行，而不能实现词内换行，前面提到过如果需要词内换行，我们需要使用word-break属性，下面我们就一起来看看这个属性：\n\n语法：\n\n   word-break:normal | break-all | keep-all\n \n\n取值说明\n\n1. normal为默认值，如果设置为默认值时中文则到边界处的汉字换行，如果是英文整个单词换行，如果出现某个单词长度过长，则会撑破容器，如果边框为固定属性，则后面部分将无法显示；\n\n2. break-all：可以强行截断英文单词，达到词内换行效果.\n\n3. keep-all:不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行，英文单词也整个换行，如果出现某个英文字符长度超过边界，则后面的部分将撑破容器，如果边框为固定属性，则后面部分无法显示.\n\n\n#### white-space属性\n\n作用\n  处理空白符.\n\n语法:\n\n  white-space: normal || pre || nowrap || pre-line || pre-wrap || inherit\n\n\n#### 字间距word-spacing  和 字符间距letter-spacing\n\n\n\n### 清楚浮动-- clearfix\n只需要添加这个类名无需加上任何HTML标记，就可以达到清除浮动的效果：\n\n```js\n\n.clearfix:before,\n.clearfix:after {\n  content: \" \";\n  display:table;\n}\n \n.clearfix:after {\n  clear:both;\n  overflow:hidden;\n}\n\n.clearfix {\n  zoom: 1;\n}\n\n```\n### 使用!important\n使用!important可以覆盖任何相同的样式，换句话说他可以改为样式的权重：\n\n```js\np {\n  font-size:20px !important;\n}\n```\n但是,不建议过多使用, 会造成维护困难的问题.\n\n### 垂直居中, 水平居中, 垂直水平居中\n\n#### 水平居中\n让一个元素<strong>水平居中</strong>对于CSS来说非常简单：如果是一个内联元素，我们可以在他的父元素上设置text-align:center;；如果是一个块元素，我们可以使用margin:auto;。然而，只要一想到让一个元素<strong>垂直居中</strong>，让人死的心都有了。\n\n#### 垂直居中\n\n解决方案有:\n\n1. 表格布局不讨论(表格显示模式)，因为它需要一些冗余的HTML标签\n2. inline-block方法不包括，因为要使用很多Hack手段\n(1) 宽度高度均已知的父元素和子元素: \n  ![示例图(1)](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/position-centered.gif)\n  [DEMO](https://css-tricks.com/320-quick-css-trick-how-to-center-an-object-exactly-in-the-center/)\n(2) \n  ![示例图(2)](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/unknown-position.png)\n\n解决方法:\n1. 最简单粗暴的方法是: 使用table布局\n```js\n<table style=\"width: 100%;\">\n  <tr>\n     <td style=\"text-align: center; vertical-align: middle;\">\n          Unknown stuff to be centered.\n     </td>\n  </tr>\n</table>\n```\n\n如果你担心语义化的问题,可以使用如下方式:\n\n```js\n<div class=\"something-semantic\">\n   <div class=\"something-else-semantic\">\n       Unknown stuff to be centered.\n   </div>\n</div>\n```\n\n然后CSS这样:\n\n```js\n.something-semantic {\n  display: table;\n  width: 100%;\n}\n.something-else-semantic {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n}\n```\n![ghost方式](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/ghost.png)\n```js\n/* This parent can be any width and height */\n.block {\n  text-align: center;\n\n  /* May want to do this if there is risk the container may be narrower than the element inside */\n  white-space: nowrap;\n}\n \n/* The ghost, nudged to maintain perfect centering */\n.block:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  margin-right: -0.25em; /* Adjusts for spacing */\n}\n\n/* The element to be centered, can also be of any width and height */ \n.centered {\n  display: inline-block;\n  vertical-align: middle;\n  width: 300px;\n}\n```\n### TODO\n3. 绝对定位解决方案\n4. 视窗单位的解决方案\n5. Flexbox的解决方案","source":"_posts/some-css3-practice-questions.md","raw":"---\ntitle: \"一些实用的CSS3问题及解决\"\ndate: 2016-05-09 20:24:00\ntags: ['css3', '技巧']\ndescription: \"text-overflow主要功能是用来截取文本长度，用（...）来代替截掉的文本，原本这个效果以前主要靠js和程序来完成，那么现在我们可以直接使用CSS3来实现\"\n\n\n---\n\n### text-overflow实现文本(...)截取省略效果\n\n语法：\n\n  text-overflow ： clip | ellipsis\n \n\n取值说明：\n\n1、clip:表示不显示省略标记(...)，而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用，如果不配合的话将无任何效果；\n\n2、ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap一起使用才会有效果。\nHTML如下:\n```js\n<div class=\"demo text-overflow-ellipsis\">用我来测试text-overflow:ellipsis的性能和使用方法。</div>\n```\n对应的CSS:\n\n```js\n.text-overflow-ellipsis {\n    -o-text-overflow: ellipsis;\n    text-overflow: ellipsis;    \n    overflow: hidden;\n    white-space: nowrap; //让文本不换行\n  }\n```\ntext-overflow:ellipsis到目前firefox4.0都还不支持这个属性.\n\n解决思路: \n一、Firefox的伪类──:after\n\nHTML如下:\n```js\n<div class=\"demo text-overflow\">\n     <span>>est AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH</span>\n  </div>\n```\n\nCSS如下:\n```js\n .text-overflow {\n    overflow: hidden; /*清除浮动*/\n }\n /*Safari,Opera,IE下效果*/\n .text-overflow span{\n   display: block;\n   width: 100px; /*设置内容宽度*/\n   overflow: hidden;/*隐藏溢出的文本*/\n   white-space: nowrap;/*让文本不换行*/\n   -o-text-overflow: ellipsis;/*Opera下实现ellipsis效果*/\n   text-overflow: ellipsis;/*Safari，IE下实现ellipsis效果*/\n }\n        \n /*Firefox实现效果*/\n @-moz-document url-prefix(){ /*@-moz-document url-perfix(){}是firefox的一个独有属性，只有firefox浏览器能识别，也可以说是一种hack*/\n   .text-overflow span {\n     max-width: 70px;/* 在FF下改变内容宽度，用来放置:after增加的内容(...)*/\n     float: left;/*进行浮动*/\n   }\n }\n @-moz-document url-prefix(){ \n   /*利用:after增加(...)省略符*/\n   .text-overflow:after {\n      content:\"...\";/*增加省略符号*/\n      float: left;/*设置浮动*/\n      width: 25px;/*省略符宽度*/\n      padding-left: 5px;/*省略符内距，用来拉开内容之间的距离*/\n      color: #000;\n   }\n }\n ```\n\n\n\n### 使用::Selection\n选择文本，背景是红色，而文本是白色的问题，\n![::Selection](http://cdn.w3cplus.com/cdn/farfuture/uIe9qU7h16JBryuv8OGphj7O1YZp2aJqKuCODjRoLak/mtime:1341237777/sites/default/files/selection-red.png)\n\n::selection使用语法：\n\n```js\n/*Webkit,Opera9.5+,Ie9+*/\n::selection {\n    background: #F00;\n    color: #FFF;\n}\n/*Mozilla Firefox*/\n::-moz-selection {\n    background: #F00;\n    color: #FFF;\n}\n```\n\n\n### Box-sizing\n\n[box-sizing是CSS3的box属性之一](http://www.w3cplus.com/content/css3-box-sizing)。一说到CSS的盒模型（Box model）我想很多人都会比较烦.\n\nCSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？两者的计算方法不一至.\n\n语法：\n\n  box-sizing ： content-box || border-box || inherit\n\n取值说明\n\n1. content-box:此值为其默认值，其让元素维持W3C的标准Box Model，也就是说元素的宽度/高度（width/height）等于元素边框宽度（border）加上元素内边距（padding）加上元素内容宽度/高度（content width/height）即：Element Width/Height = border+padding+content width/height。\n\n2. border-box:此值让元素维持IE传统的Box Model（IE6以下版本），也就是说元素的宽度/高度等于元素内容的宽度/高度。（从上面Box Model介绍可知，我们这里的content width/height包含了元素的border,padding,内容的width/height【此处的内容宽度/高度=width/height-border-padding】）。\n\n\n### 字符相关设置\n\n#### word-wrap\n\n语法：\n\n   word-wrap ： normal | break-word\n \n\n取值说明：\n\n1. normal和break-word，其中normal为默认值，当其值为normal控制连续文本换行(允许内容顶开容器的边界，换句话说内容可以撑破容器）；\n\n2. break-word将内容在边界内换行（不截断英文单词换行，截断英文单词换行需要使用word-break:all属性）.\n\n\n#### word-break使用：\n\n上面我们使用word-wrap:break-word只能在内容中换行，而不能实现词内换行，前面提到过如果需要词内换行，我们需要使用word-break属性，下面我们就一起来看看这个属性：\n\n语法：\n\n   word-break:normal | break-all | keep-all\n \n\n取值说明\n\n1. normal为默认值，如果设置为默认值时中文则到边界处的汉字换行，如果是英文整个单词换行，如果出现某个单词长度过长，则会撑破容器，如果边框为固定属性，则后面部分将无法显示；\n\n2. break-all：可以强行截断英文单词，达到词内换行效果.\n\n3. keep-all:不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行，英文单词也整个换行，如果出现某个英文字符长度超过边界，则后面的部分将撑破容器，如果边框为固定属性，则后面部分无法显示.\n\n\n#### white-space属性\n\n作用\n  处理空白符.\n\n语法:\n\n  white-space: normal || pre || nowrap || pre-line || pre-wrap || inherit\n\n\n#### 字间距word-spacing  和 字符间距letter-spacing\n\n\n\n### 清楚浮动-- clearfix\n只需要添加这个类名无需加上任何HTML标记，就可以达到清除浮动的效果：\n\n```js\n\n.clearfix:before,\n.clearfix:after {\n  content: \" \";\n  display:table;\n}\n \n.clearfix:after {\n  clear:both;\n  overflow:hidden;\n}\n\n.clearfix {\n  zoom: 1;\n}\n\n```\n### 使用!important\n使用!important可以覆盖任何相同的样式，换句话说他可以改为样式的权重：\n\n```js\np {\n  font-size:20px !important;\n}\n```\n但是,不建议过多使用, 会造成维护困难的问题.\n\n### 垂直居中, 水平居中, 垂直水平居中\n\n#### 水平居中\n让一个元素<strong>水平居中</strong>对于CSS来说非常简单：如果是一个内联元素，我们可以在他的父元素上设置text-align:center;；如果是一个块元素，我们可以使用margin:auto;。然而，只要一想到让一个元素<strong>垂直居中</strong>，让人死的心都有了。\n\n#### 垂直居中\n\n解决方案有:\n\n1. 表格布局不讨论(表格显示模式)，因为它需要一些冗余的HTML标签\n2. inline-block方法不包括，因为要使用很多Hack手段\n(1) 宽度高度均已知的父元素和子元素: \n  ![示例图(1)](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/position-centered.gif)\n  [DEMO](https://css-tricks.com/320-quick-css-trick-how-to-center-an-object-exactly-in-the-center/)\n(2) \n  ![示例图(2)](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/unknown-position.png)\n\n解决方法:\n1. 最简单粗暴的方法是: 使用table布局\n```js\n<table style=\"width: 100%;\">\n  <tr>\n     <td style=\"text-align: center; vertical-align: middle;\">\n          Unknown stuff to be centered.\n     </td>\n  </tr>\n</table>\n```\n\n如果你担心语义化的问题,可以使用如下方式:\n\n```js\n<div class=\"something-semantic\">\n   <div class=\"something-else-semantic\">\n       Unknown stuff to be centered.\n   </div>\n</div>\n```\n\n然后CSS这样:\n\n```js\n.something-semantic {\n  display: table;\n  width: 100%;\n}\n.something-else-semantic {\n  display: table-cell;\n  text-align: center;\n  vertical-align: middle;\n}\n```\n![ghost方式](https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/ghost.png)\n```js\n/* This parent can be any width and height */\n.block {\n  text-align: center;\n\n  /* May want to do this if there is risk the container may be narrower than the element inside */\n  white-space: nowrap;\n}\n \n/* The ghost, nudged to maintain perfect centering */\n.block:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  margin-right: -0.25em; /* Adjusts for spacing */\n}\n\n/* The element to be centered, can also be of any width and height */ \n.centered {\n  display: inline-block;\n  vertical-align: middle;\n  width: 300px;\n}\n```\n### TODO\n3. 绝对定位解决方案\n4. 视窗单位的解决方案\n5. Flexbox的解决方案","slug":"some-css3-practice-questions","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4f00057rjl3wlchyxk","content":"<h3 id=\"text-overflow实现文本-…-截取省略效果\"><a href=\"#text-overflow实现文本-…-截取省略效果\" class=\"headerlink\" title=\"text-overflow实现文本(…)截取省略效果\"></a>text-overflow实现文本(…)截取省略效果</h3><p>语法：</p>\n<p>  text-overflow ： clip | ellipsis</p>\n<p>取值说明：</p>\n<p>1、clip:表示不显示省略标记(…)，而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用，如果不配合的话将无任何效果；</p>\n<p>2、ellipsis：对象文本溢出时将显示省略标记(…)，需要配合overflow:hidden；white-space:nowrap一起使用才会有效果。<br>HTML如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo text-overflow-ellipsis\"</span>&gt;用我来测试text-overflow:ellipsis的性能和使用方法。&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure></p>\n<p>对应的CSS:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text-overflow-ellipsis &#123;</div><div class=\"line\">    -o-text-overflow: ellipsis;</div><div class=\"line\">    text-overflow: ellipsis;    </div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">    white-space: nowrap; <span class=\"comment\">//让文本不换行</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>text-overflow:ellipsis到目前firefox4.0都还不支持这个属性.</p>\n<p>解决思路:<br>一、Firefox的伪类──:after</p>\n<p>HTML如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo text-overflow\"</span>&gt;</div><div class=\"line\">     &lt;span&gt;&gt;est AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH&lt;/span&gt;</div><div class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure></p>\n<p>CSS如下:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text-overflow &#123;</div><div class=\"line\">   overflow: hidden; /*清除浮动*/</div><div class=\"line\">&#125;</div><div class=\"line\">/*Safari,Opera,IE下效果*/</div><div class=\"line\">.text-overflow span&#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  width: 100px; /*设置内容宽度*/</div><div class=\"line\">  overflow: hidden;/*隐藏溢出的文本*/</div><div class=\"line\">  white-space: nowrap;/*让文本不换行*/</div><div class=\"line\">  -o-text-overflow: ellipsis;/*Opera下实现ellipsis效果*/</div><div class=\"line\">  text-overflow: ellipsis;/*Safari，IE下实现ellipsis效果*/</div><div class=\"line\">&#125;</div><div class=\"line\">       </div><div class=\"line\">/*Firefox实现效果*/</div><div class=\"line\">@-moz-document url-prefix()&#123; /*@-moz-document url-perfix()&#123;&#125;是firefox的一个独有属性，只有firefox浏览器能识别，也可以说是一种hack*/</div><div class=\"line\">  .text-overflow span &#123;</div><div class=\"line\">    max-width: 70px;/* 在FF下改变内容宽度，用来放置:after增加的内容(...)*/</div><div class=\"line\">    float: left;/*进行浮动*/</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-document url-prefix()&#123; </div><div class=\"line\">  /*利用:after增加(...)省略符*/</div><div class=\"line\">  .text-overflow:after &#123;</div><div class=\"line\">     content:\"...\";/*增加省略符号*/</div><div class=\"line\">     float: left;/*设置浮动*/</div><div class=\"line\">     width: 25px;/*省略符宽度*/</div><div class=\"line\">     padding-left: 5px;/*省略符内距，用来拉开内容之间的距离*/</div><div class=\"line\">     color: #000;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用-Selection\"><a href=\"#使用-Selection\" class=\"headerlink\" title=\"使用::Selection\"></a>使用::Selection</h3><p>选择文本，背景是红色，而文本是白色的问题，<br><img src=\"http://cdn.w3cplus.com/cdn/farfuture/uIe9qU7h16JBryuv8OGphj7O1YZp2aJqKuCODjRoLak/mtime:1341237777/sites/default/files/selection-red.png\" alt=\"::Selection\"></p>\n<p>::selection使用语法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*Webkit,Opera9.5+,Ie9+*/</div><div class=\"line\">::selection &#123;</div><div class=\"line\">    background: #F00;</div><div class=\"line\">    color: #FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">/*Mozilla Firefox*/</div><div class=\"line\">::-moz-selection &#123;</div><div class=\"line\">    background: #F00;</div><div class=\"line\">    color: #FFF;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Box-sizing\"><a href=\"#Box-sizing\" class=\"headerlink\" title=\"Box-sizing\"></a>Box-sizing</h3><p><a href=\"http://www.w3cplus.com/content/css3-box-sizing\" target=\"_blank\" rel=\"external\">box-sizing是CSS3的box属性之一</a>。一说到CSS的盒模型（Box model）我想很多人都会比较烦.</p>\n<p>CSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？两者的计算方法不一至.</p>\n<p>语法：</p>\n<p>  box-sizing ： content-box || border-box || inherit</p>\n<p>取值说明</p>\n<ol>\n<li><p>content-box:此值为其默认值，其让元素维持W3C的标准Box Model，也就是说元素的宽度/高度（width/height）等于元素边框宽度（border）加上元素内边距（padding）加上元素内容宽度/高度（content width/height）即：Element Width/Height = border+padding+content width/height。</p>\n</li>\n<li><p>border-box:此值让元素维持IE传统的Box Model（IE6以下版本），也就是说元素的宽度/高度等于元素内容的宽度/高度。（从上面Box Model介绍可知，我们这里的content width/height包含了元素的border,padding,内容的width/height【此处的内容宽度/高度=width/height-border-padding】）。</p>\n</li>\n</ol>\n<h3 id=\"字符相关设置\"><a href=\"#字符相关设置\" class=\"headerlink\" title=\"字符相关设置\"></a>字符相关设置</h3><h4 id=\"word-wrap\"><a href=\"#word-wrap\" class=\"headerlink\" title=\"word-wrap\"></a>word-wrap</h4><p>语法：</p>\n<p>   word-wrap ： normal | break-word</p>\n<p>取值说明：</p>\n<ol>\n<li><p>normal和break-word，其中normal为默认值，当其值为normal控制连续文本换行(允许内容顶开容器的边界，换句话说内容可以撑破容器）；</p>\n</li>\n<li><p>break-word将内容在边界内换行（不截断英文单词换行，截断英文单词换行需要使用word-break:all属性）.</p>\n</li>\n</ol>\n<h4 id=\"word-break使用：\"><a href=\"#word-break使用：\" class=\"headerlink\" title=\"word-break使用：\"></a>word-break使用：</h4><p>上面我们使用word-wrap:break-word只能在内容中换行，而不能实现词内换行，前面提到过如果需要词内换行，我们需要使用word-break属性，下面我们就一起来看看这个属性：</p>\n<p>语法：</p>\n<p>   word-break:normal | break-all | keep-all</p>\n<p>取值说明</p>\n<ol>\n<li><p>normal为默认值，如果设置为默认值时中文则到边界处的汉字换行，如果是英文整个单词换行，如果出现某个单词长度过长，则会撑破容器，如果边框为固定属性，则后面部分将无法显示；</p>\n</li>\n<li><p>break-all：可以强行截断英文单词，达到词内换行效果.</p>\n</li>\n<li><p>keep-all:不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行，英文单词也整个换行，如果出现某个英文字符长度超过边界，则后面的部分将撑破容器，如果边框为固定属性，则后面部分无法显示.</p>\n</li>\n</ol>\n<h4 id=\"white-space属性\"><a href=\"#white-space属性\" class=\"headerlink\" title=\"white-space属性\"></a>white-space属性</h4><p>作用<br>  处理空白符.</p>\n<p>语法:</p>\n<p>  white-space: normal || pre || nowrap || pre-line || pre-wrap || inherit</p>\n<h4 id=\"字间距word-spacing-和-字符间距letter-spacing\"><a href=\"#字间距word-spacing-和-字符间距letter-spacing\" class=\"headerlink\" title=\"字间距word-spacing  和 字符间距letter-spacing\"></a>字间距word-spacing  和 字符间距letter-spacing</h4><h3 id=\"清楚浮动–-clearfix\"><a href=\"#清楚浮动–-clearfix\" class=\"headerlink\" title=\"清楚浮动– clearfix\"></a>清楚浮动– clearfix</h3><p>只需要添加这个类名无需加上任何HTML标记，就可以达到清除浮动的效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.clearfix:before,</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  <span class=\"attr\">content</span>: <span class=\"string\">\" \"</span>;</div><div class=\"line\">  display:table;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  <span class=\"attr\">clear</span>:both;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">  <span class=\"attr\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-important\"><a href=\"#使用-important\" class=\"headerlink\" title=\"使用!important\"></a>使用!important</h3><p>使用!important可以覆盖任何相同的样式，换句话说他可以改为样式的权重：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  font-size:<span class=\"number\">20</span>px !important;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是,不建议过多使用, 会造成维护困难的问题.</p>\n<h3 id=\"垂直居中-水平居中-垂直水平居中\"><a href=\"#垂直居中-水平居中-垂直水平居中\" class=\"headerlink\" title=\"垂直居中, 水平居中, 垂直水平居中\"></a>垂直居中, 水平居中, 垂直水平居中</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><p>让一个元素<strong>水平居中</strong>对于CSS来说非常简单：如果是一个内联元素，我们可以在他的父元素上设置text-align:center;；如果是一个块元素，我们可以使用margin:auto;。然而，只要一想到让一个元素<strong>垂直居中</strong>，让人死的心都有了。</p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><p>解决方案有:</p>\n<ol>\n<li>表格布局不讨论(表格显示模式)，因为它需要一些冗余的HTML标签</li>\n<li>inline-block方法不包括，因为要使用很多Hack手段<br>(1) 宽度高度均已知的父元素和子元素:<br><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/position-centered.gif\" alt=\"示例图(1)\"><br><a href=\"https://css-tricks.com/320-quick-css-trick-how-to-center-an-object-exactly-in-the-center/\" target=\"_blank\" rel=\"external\">DEMO</a><br>(2)<br><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/unknown-position.png\" alt=\"示例图(2)\"></li>\n</ol>\n<p>解决方法:</p>\n<ol>\n<li>最简单粗暴的方法是: 使用table布局<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table style=<span class=\"string\">\"width: 100%;\"</span>&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">     &lt;td style=\"text-align: center; vertical-align: middle;\"&gt;</div><div class=\"line\">          Unknown stuff to be centered.</div><div class=\"line\">     &lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/table&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果你担心语义化的问题,可以使用如下方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"something-semantic\"</span>&gt;</div><div class=\"line\">   &lt;div class=\"something-else-semantic\"&gt;</div><div class=\"line\">       Unknown stuff to be centered.</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>然后CSS这样:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.something-semantic &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: table;</div><div class=\"line\">  width: <span class=\"number\">100</span>%;</div><div class=\"line\">&#125;</div><div class=\"line\">.something-<span class=\"keyword\">else</span>-semantic &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: table-cell;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/ghost.png\" alt=\"ghost方式\"><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* This parent can be any width and height */</span></div><div class=\"line\">.block &#123;</div><div class=\"line\">  text-align: center;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* May want to do this if there is risk the container may be narrower than the element inside */</span></div><div class=\"line\">  white-space: nowrap;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* The ghost, nudged to maintain perfect centering */</span></div><div class=\"line\">.block:before &#123;</div><div class=\"line\">  <span class=\"attr\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  height: <span class=\"number\">100</span>%;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  margin-right: <span class=\"number\">-0.25</span>em; <span class=\"comment\">/* Adjusts for spacing */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* The element to be centered, can also be of any width and height */</span> </div><div class=\"line\">.centered &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: inline-block;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  width: <span class=\"number\">300</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><ol>\n<li>绝对定位解决方案</li>\n<li>视窗单位的解决方案</li>\n<li>Flexbox的解决方案</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"text-overflow实现文本-…-截取省略效果\"><a href=\"#text-overflow实现文本-…-截取省略效果\" class=\"headerlink\" title=\"text-overflow实现文本(…)截取省略效果\"></a>text-overflow实现文本(…)截取省略效果</h3><p>语法：</p>\n<p>  text-overflow ： clip | ellipsis</p>\n<p>取值说明：</p>\n<p>1、clip:表示不显示省略标记(…)，而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用，如果不配合的话将无任何效果；</p>\n<p>2、ellipsis：对象文本溢出时将显示省略标记(…)，需要配合overflow:hidden；white-space:nowrap一起使用才会有效果。<br>HTML如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo text-overflow-ellipsis\"</span>&gt;用我来测试text-overflow:ellipsis的性能和使用方法。&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure></p>\n<p>对应的CSS:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text-overflow-ellipsis &#123;</div><div class=\"line\">    -o-text-overflow: ellipsis;</div><div class=\"line\">    text-overflow: ellipsis;    </div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">    white-space: nowrap; <span class=\"comment\">//让文本不换行</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>text-overflow:ellipsis到目前firefox4.0都还不支持这个属性.</p>\n<p>解决思路:<br>一、Firefox的伪类──:after</p>\n<p>HTML如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"demo text-overflow\"</span>&gt;</div><div class=\"line\">     &lt;span&gt;&gt;est AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH,test AH&lt;/span&gt;</div><div class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure></p>\n<p>CSS如下:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text-overflow &#123;</div><div class=\"line\">   overflow: hidden; /*清除浮动*/</div><div class=\"line\">&#125;</div><div class=\"line\">/*Safari,Opera,IE下效果*/</div><div class=\"line\">.text-overflow span&#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  width: 100px; /*设置内容宽度*/</div><div class=\"line\">  overflow: hidden;/*隐藏溢出的文本*/</div><div class=\"line\">  white-space: nowrap;/*让文本不换行*/</div><div class=\"line\">  -o-text-overflow: ellipsis;/*Opera下实现ellipsis效果*/</div><div class=\"line\">  text-overflow: ellipsis;/*Safari，IE下实现ellipsis效果*/</div><div class=\"line\">&#125;</div><div class=\"line\">       </div><div class=\"line\">/*Firefox实现效果*/</div><div class=\"line\">@-moz-document url-prefix()&#123; /*@-moz-document url-perfix()&#123;&#125;是firefox的一个独有属性，只有firefox浏览器能识别，也可以说是一种hack*/</div><div class=\"line\">  .text-overflow span &#123;</div><div class=\"line\">    max-width: 70px;/* 在FF下改变内容宽度，用来放置:after增加的内容(...)*/</div><div class=\"line\">    float: left;/*进行浮动*/</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-document url-prefix()&#123; </div><div class=\"line\">  /*利用:after增加(...)省略符*/</div><div class=\"line\">  .text-overflow:after &#123;</div><div class=\"line\">     content:\"...\";/*增加省略符号*/</div><div class=\"line\">     float: left;/*设置浮动*/</div><div class=\"line\">     width: 25px;/*省略符宽度*/</div><div class=\"line\">     padding-left: 5px;/*省略符内距，用来拉开内容之间的距离*/</div><div class=\"line\">     color: #000;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用-Selection\"><a href=\"#使用-Selection\" class=\"headerlink\" title=\"使用::Selection\"></a>使用::Selection</h3><p>选择文本，背景是红色，而文本是白色的问题，<br><img src=\"http://cdn.w3cplus.com/cdn/farfuture/uIe9qU7h16JBryuv8OGphj7O1YZp2aJqKuCODjRoLak/mtime:1341237777/sites/default/files/selection-red.png\" alt=\"::Selection\"></p>\n<p>::selection使用语法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*Webkit,Opera9.5+,Ie9+*/</div><div class=\"line\">::selection &#123;</div><div class=\"line\">    background: #F00;</div><div class=\"line\">    color: #FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">/*Mozilla Firefox*/</div><div class=\"line\">::-moz-selection &#123;</div><div class=\"line\">    background: #F00;</div><div class=\"line\">    color: #FFF;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Box-sizing\"><a href=\"#Box-sizing\" class=\"headerlink\" title=\"Box-sizing\"></a>Box-sizing</h3><p><a href=\"http://www.w3cplus.com/content/css3-box-sizing\">box-sizing是CSS3的box属性之一</a>。一说到CSS的盒模型（Box model）我想很多人都会比较烦.</p>\n<p>CSS中Box model是分为两种，第一种是W3C的标准模型，另一种是IE的传统模型，他们相同之处都是对元素计算尺寸的模型，具体说就是对元素的width,height,padding,border以及元素实际尺寸的计算关系；他们不同之处呢？两者的计算方法不一至.</p>\n<p>语法：</p>\n<p>  box-sizing ： content-box || border-box || inherit</p>\n<p>取值说明</p>\n<ol>\n<li><p>content-box:此值为其默认值，其让元素维持W3C的标准Box Model，也就是说元素的宽度/高度（width/height）等于元素边框宽度（border）加上元素内边距（padding）加上元素内容宽度/高度（content width/height）即：Element Width/Height = border+padding+content width/height。</p>\n</li>\n<li><p>border-box:此值让元素维持IE传统的Box Model（IE6以下版本），也就是说元素的宽度/高度等于元素内容的宽度/高度。（从上面Box Model介绍可知，我们这里的content width/height包含了元素的border,padding,内容的width/height【此处的内容宽度/高度=width/height-border-padding】）。</p>\n</li>\n</ol>\n<h3 id=\"字符相关设置\"><a href=\"#字符相关设置\" class=\"headerlink\" title=\"字符相关设置\"></a>字符相关设置</h3><h4 id=\"word-wrap\"><a href=\"#word-wrap\" class=\"headerlink\" title=\"word-wrap\"></a>word-wrap</h4><p>语法：</p>\n<p>   word-wrap ： normal | break-word</p>\n<p>取值说明：</p>\n<ol>\n<li><p>normal和break-word，其中normal为默认值，当其值为normal控制连续文本换行(允许内容顶开容器的边界，换句话说内容可以撑破容器）；</p>\n</li>\n<li><p>break-word将内容在边界内换行（不截断英文单词换行，截断英文单词换行需要使用word-break:all属性）.</p>\n</li>\n</ol>\n<h4 id=\"word-break使用：\"><a href=\"#word-break使用：\" class=\"headerlink\" title=\"word-break使用：\"></a>word-break使用：</h4><p>上面我们使用word-wrap:break-word只能在内容中换行，而不能实现词内换行，前面提到过如果需要词内换行，我们需要使用word-break属性，下面我们就一起来看看这个属性：</p>\n<p>语法：</p>\n<p>   word-break:normal | break-all | keep-all</p>\n<p>取值说明</p>\n<ol>\n<li><p>normal为默认值，如果设置为默认值时中文则到边界处的汉字换行，如果是英文整个单词换行，如果出现某个单词长度过长，则会撑破容器，如果边框为固定属性，则后面部分将无法显示；</p>\n</li>\n<li><p>break-all：可以强行截断英文单词，达到词内换行效果.</p>\n</li>\n<li><p>keep-all:不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行，英文单词也整个换行，如果出现某个英文字符长度超过边界，则后面的部分将撑破容器，如果边框为固定属性，则后面部分无法显示.</p>\n</li>\n</ol>\n<h4 id=\"white-space属性\"><a href=\"#white-space属性\" class=\"headerlink\" title=\"white-space属性\"></a>white-space属性</h4><p>作用<br>  处理空白符.</p>\n<p>语法:</p>\n<p>  white-space: normal || pre || nowrap || pre-line || pre-wrap || inherit</p>\n<h4 id=\"字间距word-spacing-和-字符间距letter-spacing\"><a href=\"#字间距word-spacing-和-字符间距letter-spacing\" class=\"headerlink\" title=\"字间距word-spacing  和 字符间距letter-spacing\"></a>字间距word-spacing  和 字符间距letter-spacing</h4><h3 id=\"清楚浮动–-clearfix\"><a href=\"#清楚浮动–-clearfix\" class=\"headerlink\" title=\"清楚浮动– clearfix\"></a>清楚浮动– clearfix</h3><p>只需要添加这个类名无需加上任何HTML标记，就可以达到清除浮动的效果：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.clearfix:before,</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  <span class=\"attr\">content</span>: <span class=\"string\">\" \"</span>;</div><div class=\"line\">  display:table;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  <span class=\"attr\">clear</span>:both;</div><div class=\"line\">  overflow:hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.clearfix &#123;</div><div class=\"line\">  <span class=\"attr\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-important\"><a href=\"#使用-important\" class=\"headerlink\" title=\"使用!important\"></a>使用!important</h3><p>使用!important可以覆盖任何相同的样式，换句话说他可以改为样式的权重：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  font-size:<span class=\"number\">20</span>px !important;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是,不建议过多使用, 会造成维护困难的问题.</p>\n<h3 id=\"垂直居中-水平居中-垂直水平居中\"><a href=\"#垂直居中-水平居中-垂直水平居中\" class=\"headerlink\" title=\"垂直居中, 水平居中, 垂直水平居中\"></a>垂直居中, 水平居中, 垂直水平居中</h3><h4 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h4><p>让一个元素<strong>水平居中</strong>对于CSS来说非常简单：如果是一个内联元素，我们可以在他的父元素上设置text-align:center;；如果是一个块元素，我们可以使用margin:auto;。然而，只要一想到让一个元素<strong>垂直居中</strong>，让人死的心都有了。</p>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><p>解决方案有:</p>\n<ol>\n<li>表格布局不讨论(表格显示模式)，因为它需要一些冗余的HTML标签</li>\n<li>inline-block方法不包括，因为要使用很多Hack手段<br>(1) 宽度高度均已知的父元素和子元素:<br><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/position-centered.gif\" alt=\"示例图(1)\"><br><a href=\"https://css-tricks.com/320-quick-css-trick-how-to-center-an-object-exactly-in-the-center/\">DEMO</a><br>(2)<br><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/unknown-position.png\" alt=\"示例图(2)\"></li>\n</ol>\n<p>解决方法:</p>\n<ol>\n<li>最简单粗暴的方法是: 使用table布局<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table style=<span class=\"string\">\"width: 100%;\"</span>&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">     &lt;td style=\"text-align: center; vertical-align: middle;\"&gt;</div><div class=\"line\">          Unknown stuff to be centered.</div><div class=\"line\">     &lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/table&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果你担心语义化的问题,可以使用如下方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"something-semantic\"</span>&gt;</div><div class=\"line\">   &lt;div class=\"something-else-semantic\"&gt;</div><div class=\"line\">       Unknown stuff to be centered.</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></div></pre></td></tr></table></figure>\n<p>然后CSS这样:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.something-semantic &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: table;</div><div class=\"line\">  width: <span class=\"number\">100</span>%;</div><div class=\"line\">&#125;</div><div class=\"line\">.something-<span class=\"keyword\">else</span>-semantic &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: table-cell;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"https://raw.githubusercontent.com/lulua87/MarkdownPhotos/master/20160509/ghost.png\" alt=\"ghost方式\"><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* This parent can be any width and height */</span></div><div class=\"line\">.block &#123;</div><div class=\"line\">  text-align: center;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* May want to do this if there is risk the container may be narrower than the element inside */</span></div><div class=\"line\">  white-space: nowrap;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* The ghost, nudged to maintain perfect centering */</span></div><div class=\"line\">.block:before &#123;</div><div class=\"line\">  <span class=\"attr\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  height: <span class=\"number\">100</span>%;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  margin-right: <span class=\"number\">-0.25</span>em; <span class=\"comment\">/* Adjusts for spacing */</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* The element to be centered, can also be of any width and height */</span> </div><div class=\"line\">.centered &#123;</div><div class=\"line\">  <span class=\"attr\">display</span>: inline-block;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  width: <span class=\"number\">300</span>px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><ol>\n<li>绝对定位解决方案</li>\n<li>视窗单位的解决方案</li>\n<li>Flexbox的解决方案</li>\n</ol>\n"},{"title":"Javascript中容易忽略的问题","date":"2016-04-12T08:14:00.000Z","description":"请问， 你觉得0.1 + 0.2 等于多少？","_content":"\n### (1) 0.1 + 0.2 = ?\n你是否觉得一眼看上去，这么简单，不就是等于0.3。图样图破森\n```js\nconsole.log(0.1 + 0.2)  // 0.30000000000000004\n\n```\nJS的浮点数精度问题：\n1 请在代码中浮点数先转换为整数进行运算，最后再除以倍数：\n针对一位浮点数的运算，用<pre>(0.1 * 10 + 0.7 * 10) / 10</pre>>代替<pre>0.1 + 0.7</pre>，\n针对两位浮点数的运算，用<pre>(0.13 * 100 + 0.76 * 100) / 100</pre>>代替<pre>0.13 + 0.76</pre>，同理可推\n2 利用toFixed(args)知道浮点数的小数位数\n\n### (2) 看题说话\n```js\n(function(){\n    var x=y=1;\n})()\nconsole.log(x);\nconsole.log(y); \n```\n这里应该考虑到闭包，隐式创建全局变量等问题\n\n```js\nvar undefined;\nundefined == null; \n1 == true;   \n2 == true;   \n0 == false;  \n0 == '';     \nNaN == NaN;  \n[] == false; \n[] == ![];  \n```\n平时判断过一个对象（值）是否为空吧，仔细考虑一下这些结果吧。\n\n那么，接着，\n```js\nvar foo = \"11\"+2-\"1\";\nconsole.log(foo); \nconsole.log(typeof foo); \n\nvar foo2 = 11 +2 -'1';\nconsole.log(foo2);\nconsole.log(typeof foo2);\n\nvar foo3 = 11 +2 +'1';\nconsole.log(foo3);\nconsole.log(typeof foo3);\n\n\nvar foo4 = '1'*2+\"1\";\nconsole.log(foo4);\nconsole.log(typeof foo4);\n\nvar foo5 = '1'*2-\"3\";\nconsole.log(foo5);\nconsole.log(typeof foo5);\n```\n 这里应该考虑到隐式转换等技巧。\n\n```js\nvar a = new Object();\na.value = 1;\nb = a;\nb.value = 2;\nalert(a.value);\n```\n\n```js\nvar foo = 1;\n(function(){\n    console.log('test1', foo);\n    var foo = 2;\n    console.log('test2', foo);\n})()\n```\n这里应该考虑到变量提升、变量作用域等问题。\n\n### 技巧之转换\n```js\nvar a=0;!!a   // false\n\nvar b=1;!!b   // true\n\nvar c='';!!c  // false\n\nvar d='0';!!d // true\nb_bool = !!myVar,  /*  to boolean - any string with length and any number except 0 are true */\n\n```\n基础变量的前面增加<code>!!</code>的时候，会转换成为boolean值，不为空的字符串以及值不为0的数字都会转换为**true**。\n\n```js\nvar a = 11;\nvar b; \nb = +a;\nconsole.log(b, typeof b);  // 11 \"number\"\n\nvar a2 = '11';\nvar c;\nc= +a2\nconsole.log(c, typeof c); // 11 \"number\"\n```\n\n变量为数字或者可以转换为数字的数字字符串的，前面增加<code>+</code>,可以转换为数字。","source":"_posts/some-basic-js-questions.md","raw":"---\ntitle: \"Javascript中容易忽略的问题\"\ndate: 2016-04-12 16:14:00\ntags: ['Javascript', '做题']\ndescription: \"请问， 你觉得0.1 + 0.2 等于多少？\"\n\n\n---\n\n### (1) 0.1 + 0.2 = ?\n你是否觉得一眼看上去，这么简单，不就是等于0.3。图样图破森\n```js\nconsole.log(0.1 + 0.2)  // 0.30000000000000004\n\n```\nJS的浮点数精度问题：\n1 请在代码中浮点数先转换为整数进行运算，最后再除以倍数：\n针对一位浮点数的运算，用<pre>(0.1 * 10 + 0.7 * 10) / 10</pre>>代替<pre>0.1 + 0.7</pre>，\n针对两位浮点数的运算，用<pre>(0.13 * 100 + 0.76 * 100) / 100</pre>>代替<pre>0.13 + 0.76</pre>，同理可推\n2 利用toFixed(args)知道浮点数的小数位数\n\n### (2) 看题说话\n```js\n(function(){\n    var x=y=1;\n})()\nconsole.log(x);\nconsole.log(y); \n```\n这里应该考虑到闭包，隐式创建全局变量等问题\n\n```js\nvar undefined;\nundefined == null; \n1 == true;   \n2 == true;   \n0 == false;  \n0 == '';     \nNaN == NaN;  \n[] == false; \n[] == ![];  \n```\n平时判断过一个对象（值）是否为空吧，仔细考虑一下这些结果吧。\n\n那么，接着，\n```js\nvar foo = \"11\"+2-\"1\";\nconsole.log(foo); \nconsole.log(typeof foo); \n\nvar foo2 = 11 +2 -'1';\nconsole.log(foo2);\nconsole.log(typeof foo2);\n\nvar foo3 = 11 +2 +'1';\nconsole.log(foo3);\nconsole.log(typeof foo3);\n\n\nvar foo4 = '1'*2+\"1\";\nconsole.log(foo4);\nconsole.log(typeof foo4);\n\nvar foo5 = '1'*2-\"3\";\nconsole.log(foo5);\nconsole.log(typeof foo5);\n```\n 这里应该考虑到隐式转换等技巧。\n\n```js\nvar a = new Object();\na.value = 1;\nb = a;\nb.value = 2;\nalert(a.value);\n```\n\n```js\nvar foo = 1;\n(function(){\n    console.log('test1', foo);\n    var foo = 2;\n    console.log('test2', foo);\n})()\n```\n这里应该考虑到变量提升、变量作用域等问题。\n\n### 技巧之转换\n```js\nvar a=0;!!a   // false\n\nvar b=1;!!b   // true\n\nvar c='';!!c  // false\n\nvar d='0';!!d // true\nb_bool = !!myVar,  /*  to boolean - any string with length and any number except 0 are true */\n\n```\n基础变量的前面增加<code>!!</code>的时候，会转换成为boolean值，不为空的字符串以及值不为0的数字都会转换为**true**。\n\n```js\nvar a = 11;\nvar b; \nb = +a;\nconsole.log(b, typeof b);  // 11 \"number\"\n\nvar a2 = '11';\nvar c;\nc= +a2\nconsole.log(c, typeof c); // 11 \"number\"\n```\n\n变量为数字或者可以转换为数字的数字字符串的，前面增加<code>+</code>,可以转换为数字。","slug":"some-basic-js-questions","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4j00077rjl7gvglpmb","content":"<h3 id=\"1-0-1-0-2\"><a href=\"#1-0-1-0-2\" class=\"headerlink\" title=\"(1) 0.1 + 0.2 = ?\"></a>(1) 0.1 + 0.2 = ?</h3><p>你是否觉得一眼看上去，这么简单，不就是等于0.3。图样图破森<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)  <span class=\"comment\">// 0.30000000000000004</span></div></pre></td></tr></table></figure></p>\n<p>JS的浮点数精度问题：<br>1 请在代码中浮点数先转换为整数进行运算，最后再除以倍数：<br>针对一位浮点数的运算，用<pre>(0.1 <em> 10 + 0.7 </em> 10) / 10</pre>&gt;代替<pre>0.1 + 0.7</pre>，<br>针对两位浮点数的运算，用<pre>(0.13 <em> 100 + 0.76 </em> 100) / 100</pre>&gt;代替<pre>0.13 + 0.76</pre>，同理可推<br>2 利用toFixed(args)知道浮点数的小数位数</p>\n<h3 id=\"2-看题说话\"><a href=\"#2-看题说话\" class=\"headerlink\" title=\"(2) 看题说话\"></a>(2) 看题说话</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x=y=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y);</div></pre></td></tr></table></figure>\n<p>这里应该考虑到闭包，隐式创建全局变量等问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>; </div><div class=\"line\"><span class=\"number\">1</span> == <span class=\"literal\">true</span>;   </div><div class=\"line\"><span class=\"number\">2</span> == <span class=\"literal\">true</span>;   </div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span>;  </div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span>;     </div><div class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>;  </div><div class=\"line\">[] == <span class=\"literal\">false</span>; </div><div class=\"line\">[] == ![];</div></pre></td></tr></table></figure>\n<p>平时判断过一个对象（值）是否为空吧，仔细考虑一下这些结果吧。</p>\n<p>那么，接着，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">\"11\"</span>+<span class=\"number\">2</span>-<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo); </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo2 = <span class=\"number\">11</span> +<span class=\"number\">2</span> -<span class=\"string\">'1'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo3 = <span class=\"number\">11</span> +<span class=\"number\">2</span> +<span class=\"string\">'1'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo3);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo4 = <span class=\"string\">'1'</span>*<span class=\"number\">2</span>+<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo4);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo4);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo5 = <span class=\"string\">'1'</span>*<span class=\"number\">2</span>-<span class=\"string\">\"3\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo5);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo5);</div></pre></td></tr></table></figure></p>\n<p> 这里应该考虑到隐式转换等技巧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">a.value = <span class=\"number\">1</span>;</div><div class=\"line\">b = a;</div><div class=\"line\">b.value = <span class=\"number\">2</span>;</div><div class=\"line\">alert(a.value);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>, foo);</div><div class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>, foo);</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>这里应该考虑到变量提升、变量作用域等问题。</p>\n<h3 id=\"技巧之转换\"><a href=\"#技巧之转换\" class=\"headerlink\" title=\"技巧之转换\"></a>技巧之转换</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">0</span>;!!a   <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">1</span>;!!b   <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"string\">''</span>;!!c  <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d=<span class=\"string\">'0'</span>;!!d <span class=\"comment\">// true</span></div><div class=\"line\">b_bool = !!myVar,  <span class=\"comment\">/*  to boolean - any string with length and any number except 0 are true */</span></div></pre></td></tr></table></figure>\n<p>基础变量的前面增加<code>!!</code>的时候，会转换成为boolean值，不为空的字符串以及值不为0的数字都会转换为<strong>true</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">11</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b; </div><div class=\"line\">b = +a;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b, <span class=\"keyword\">typeof</span> b);  <span class=\"comment\">// 11 \"number\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"string\">'11'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> c;</div><div class=\"line\">c= +a2</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c, <span class=\"keyword\">typeof</span> c); <span class=\"comment\">// 11 \"number\"</span></div></pre></td></tr></table></figure>\n<p>变量为数字或者可以转换为数字的数字字符串的，前面增加<code>+</code>,可以转换为数字。</p>\n","excerpt":"","more":"<h3 id=\"1-0-1-0-2\"><a href=\"#1-0-1-0-2\" class=\"headerlink\" title=\"(1) 0.1 + 0.2 = ?\"></a>(1) 0.1 + 0.2 = ?</h3><p>你是否觉得一眼看上去，这么简单，不就是等于0.3。图样图破森<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)  <span class=\"comment\">// 0.30000000000000004</span></div></pre></td></tr></table></figure></p>\n<p>JS的浮点数精度问题：<br>1 请在代码中浮点数先转换为整数进行运算，最后再除以倍数：<br>针对一位浮点数的运算，用<pre>(0.1 <em> 10 + 0.7 </em> 10) / 10</pre>&gt;代替<pre>0.1 + 0.7</pre>，<br>针对两位浮点数的运算，用<pre>(0.13 <em> 100 + 0.76 </em> 100) / 100</pre>&gt;代替<pre>0.13 + 0.76</pre>，同理可推<br>2 利用toFixed(args)知道浮点数的小数位数</p>\n<h3 id=\"2-看题说话\"><a href=\"#2-看题说话\" class=\"headerlink\" title=\"(2) 看题说话\"></a>(2) 看题说话</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x=y=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y);</div></pre></td></tr></table></figure>\n<p>这里应该考虑到闭包，隐式创建全局变量等问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span>; </div><div class=\"line\"><span class=\"number\">1</span> == <span class=\"literal\">true</span>;   </div><div class=\"line\"><span class=\"number\">2</span> == <span class=\"literal\">true</span>;   </div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span>;  </div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span>;     </div><div class=\"line\"><span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>;  </div><div class=\"line\">[] == <span class=\"literal\">false</span>; </div><div class=\"line\">[] == ![];</div></pre></td></tr></table></figure>\n<p>平时判断过一个对象（值）是否为空吧，仔细考虑一下这些结果吧。</p>\n<p>那么，接着，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">\"11\"</span>+<span class=\"number\">2</span>-<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo); </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo2 = <span class=\"number\">11</span> +<span class=\"number\">2</span> -<span class=\"string\">'1'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo3 = <span class=\"number\">11</span> +<span class=\"number\">2</span> +<span class=\"string\">'1'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo3);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo3);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo4 = <span class=\"string\">'1'</span>*<span class=\"number\">2</span>+<span class=\"string\">\"1\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo4);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo4);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo5 = <span class=\"string\">'1'</span>*<span class=\"number\">2</span>-<span class=\"string\">\"3\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo5);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> foo5);</div></pre></td></tr></table></figure></p>\n<p> 这里应该考虑到隐式转换等技巧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">a.value = <span class=\"number\">1</span>;</div><div class=\"line\">b = a;</div><div class=\"line\">b.value = <span class=\"number\">2</span>;</div><div class=\"line\">alert(a.value);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>, foo);</div><div class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>, foo);</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>这里应该考虑到变量提升、变量作用域等问题。</p>\n<h3 id=\"技巧之转换\"><a href=\"#技巧之转换\" class=\"headerlink\" title=\"技巧之转换\"></a>技巧之转换</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">0</span>;!!a   <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">1</span>;!!b   <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"string\">''</span>;!!c  <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d=<span class=\"string\">'0'</span>;!!d <span class=\"comment\">// true</span></div><div class=\"line\">b_bool = !!myVar,  <span class=\"comment\">/*  to boolean - any string with length and any number except 0 are true */</span></div></pre></td></tr></table></figure>\n<p>基础变量的前面增加<code>!!</code>的时候，会转换成为boolean值，不为空的字符串以及值不为0的数字都会转换为<strong>true</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">11</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b; </div><div class=\"line\">b = +a;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b, <span class=\"keyword\">typeof</span> b);  <span class=\"comment\">// 11 \"number\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a2 = <span class=\"string\">'11'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> c;</div><div class=\"line\">c= +a2</div><div class=\"line\"><span class=\"built_in\">console</span>.log(c, <span class=\"keyword\">typeof</span> c); <span class=\"comment\">// 11 \"number\"</span></div></pre></td></tr></table></figure>\n<p>变量为数字或者可以转换为数字的数字字符串的，前面增加<code>+</code>,可以转换为数字。</p>\n"},{"title":"Javascript中的一些技巧","date":"2016-05-09T11:14:00.000Z","description":"有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、''、undefined或者NaN都将返回的是false，反之返回的是true。","_content":"\n在这篇文章中将给大家分享多个有关于JavaScript的小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。\n\n### 使用!!操作符转换布尔值\n\n有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、\" \"、undefined或者NaN都将返回的是false，反之返回的是true。比如下面的示例：\n\n```js\n\nfunction Account(cash) {\n    this.cash = cash;\n    this.hasMoney = !!cash;\n}\nvar account = new Account(100.50);\nconsole.log(account.cash); // 100.50\nconsole.log(account.hasMoney); // true\n\nvar emptyAccount = new Account(0);\nconsole.log(emptyAccount.cash); // 0\nconsole.log(emptyAccount.hasMoney); // false\n\n```\n\n在这个示例中，只要account.cash的值大于0，那么account.hasMoney返回的值就是true。\n\n### 使用+将字符串转换成数字\n\n这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：\n\n```js\nfunction toNumber(strNumber) {\n    return +strNumber;\n}\nconsole.log(toNumber(\"1234\")); // 1234\nconsole.log(toNumber(\"ACB\")); // NaN\n```\n\n这个也适用于Date，在本例中，它将返回的是时间戳数字：\n```js\nconsole.log(+new Date()) // 1461288164385\n```\n\n### 并条件符\n\n如果你有一段这样的代码：\n```js\nif (conected) {\n    login();\n}\n```\n\n你也可以将变量简写，并且使用&&和函数连接在一起，比如上面的示例，可以简写成这样：\n```js\nconected && login();\n```\n\n如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：\n```js\nuser && user.login();\n使用||运算符\n```\n\n在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用||操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为false，那么第二个值将会认为是一个默认值。如下面这个示例：\n\n```js\nfunction User(name, age) {\n    this.name = name || \"Oliver Queen\";\n    this.age = age || 27;\n}\nvar user1 = new User();\nconsole.log(user1.name); // Oliver Queen\nconsole.log(user1.age); // 27\n\nvar user2 = new User(\"Barry Allen\", 25);\nconsole.log(user2.name); // Barry Allen\nconsole.log(user2.age); // 25\n```\n\n### 在循环中缓存array.length\n\n这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：\n```js\nfor(var i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}\n```\n\n如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将array.length做一个缓存：\n\n```js\nvar length = array.length;\nfor(var i = 0; i < length; i++) {\n    console.log(array[i]);\n}\n```\n\n你也可以写在这样：\n```js\nfor(var i = 0, length = array.length; i < length; i++) {\n    console.log(array[i]);\n}\n```\n\n\n### 检测对象中属性\n\n当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用document.querySelector()来选择一个id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：\n\n```js\nif ('querySelector' in document) {\n    document.querySelector(\"#id\");\n} else {\n    document.getElementById(\"id\");\n}\n```\n\n在这个示例中，如果document不存在querySelector函数，那么就会调用docuemnt.getElementById(\"id\")。\n\n### 获取数组中最后一个元素\n\nArray.prototype.slice(begin,end)用来获取begin和end之间的数组元素。如果你不设置end参数，将会将数组的默认长度值当作end值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为begin的值，那么你可以获取数组的最后一个元素。如：\n```js\nvar array = [1,2,3,4,5,6];\nconsole.log(array.slice(-1)); // [6]\nconsole.log(array.slice(-2)); // [5,6]\nconsole.log(array.slice(-3)); // [4,5,6]\n```\n\n\n### 数组截断\n\n这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有10个元素，但你只想只要前五个元素，那么你可以通过array.length=5来截断数组。如下面这个示例：\n\n```js\nvar array = [1,2,3,4,5,6];\nconsole.log(array.length); // 6\narray.length = 3;\nconsole.log(array.length); // 3\nconsole.log(array); // [1,2,3]\n```\n\n\n### 替换所有\n\n<code>String.replace()</code>函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的<strong>/g</strong>来模拟<code>replaceAll()</code>函数功能：\n\n```js\nvar string = \"john john\";\nconsole.log(string.replace(/hn/, \"ana\")); // \"joana john\"\nconsole.log(string.replace(/hn/g, \"ana\")); // \"joana joana\"\n```\n\n\n### 合并数组\n\n如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：\n\n```js\nvar array1 = [1,2,3];\nvar array2 = [4,5,6];\nconsole.log(array1.concat(array2)); // [1,2,3,4,5,6];\n```\n\n然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用<code>Array.push.apply(arr1,arr2)</code>来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：\n\n```js\nvar array1 = [1,2,3];\nvar array2 = [4,5,6];\nconsole.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];\n```\n\n\n### 将NodeList转换成数组\n\n如果你运行<code>document.querySelectorAll(“p”)</code>函数时，它可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如<code>sort()、reduce()、map()、filter()</code>等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用<code>[].slice.call(elements)</code>来实现：\n\n```js\nvar elements = document.querySelectorAll(\"p\"); // NodeList\nvar arrayElements = [].slice.call(elements); // Now the NodeList is an array\nvar arrayElements = Array.from(elements); // This is another way of converting NodeList to Array\n```\n\n\n### 数组元素的洗牌\n\n对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：\n\n```js\nvar list = [1,2,3];\nconsole.log(list.sort(function() { return Math.random() - 0.5 })); // [2,1,3]\n```\n\n\n### 总结","source":"_posts/some-javascript-skills.md","raw":"---\ntitle: \"Javascript中的一些技巧\"\ndate: 2016-05-09 19:14:00\ntags: ['Javascript', '技巧']\ndescription: \"有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、''、undefined或者NaN都将返回的是false，反之返回的是true。\"\n\n\n---\n\n在这篇文章中将给大家分享多个有关于JavaScript的小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。\n\n### 使用!!操作符转换布尔值\n\n有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、\" \"、undefined或者NaN都将返回的是false，反之返回的是true。比如下面的示例：\n\n```js\n\nfunction Account(cash) {\n    this.cash = cash;\n    this.hasMoney = !!cash;\n}\nvar account = new Account(100.50);\nconsole.log(account.cash); // 100.50\nconsole.log(account.hasMoney); // true\n\nvar emptyAccount = new Account(0);\nconsole.log(emptyAccount.cash); // 0\nconsole.log(emptyAccount.hasMoney); // false\n\n```\n\n在这个示例中，只要account.cash的值大于0，那么account.hasMoney返回的值就是true。\n\n### 使用+将字符串转换成数字\n\n这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：\n\n```js\nfunction toNumber(strNumber) {\n    return +strNumber;\n}\nconsole.log(toNumber(\"1234\")); // 1234\nconsole.log(toNumber(\"ACB\")); // NaN\n```\n\n这个也适用于Date，在本例中，它将返回的是时间戳数字：\n```js\nconsole.log(+new Date()) // 1461288164385\n```\n\n### 并条件符\n\n如果你有一段这样的代码：\n```js\nif (conected) {\n    login();\n}\n```\n\n你也可以将变量简写，并且使用&&和函数连接在一起，比如上面的示例，可以简写成这样：\n```js\nconected && login();\n```\n\n如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：\n```js\nuser && user.login();\n使用||运算符\n```\n\n在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用||操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为false，那么第二个值将会认为是一个默认值。如下面这个示例：\n\n```js\nfunction User(name, age) {\n    this.name = name || \"Oliver Queen\";\n    this.age = age || 27;\n}\nvar user1 = new User();\nconsole.log(user1.name); // Oliver Queen\nconsole.log(user1.age); // 27\n\nvar user2 = new User(\"Barry Allen\", 25);\nconsole.log(user2.name); // Barry Allen\nconsole.log(user2.age); // 25\n```\n\n### 在循环中缓存array.length\n\n这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：\n```js\nfor(var i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}\n```\n\n如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将array.length做一个缓存：\n\n```js\nvar length = array.length;\nfor(var i = 0; i < length; i++) {\n    console.log(array[i]);\n}\n```\n\n你也可以写在这样：\n```js\nfor(var i = 0, length = array.length; i < length; i++) {\n    console.log(array[i]);\n}\n```\n\n\n### 检测对象中属性\n\n当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用document.querySelector()来选择一个id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：\n\n```js\nif ('querySelector' in document) {\n    document.querySelector(\"#id\");\n} else {\n    document.getElementById(\"id\");\n}\n```\n\n在这个示例中，如果document不存在querySelector函数，那么就会调用docuemnt.getElementById(\"id\")。\n\n### 获取数组中最后一个元素\n\nArray.prototype.slice(begin,end)用来获取begin和end之间的数组元素。如果你不设置end参数，将会将数组的默认长度值当作end值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为begin的值，那么你可以获取数组的最后一个元素。如：\n```js\nvar array = [1,2,3,4,5,6];\nconsole.log(array.slice(-1)); // [6]\nconsole.log(array.slice(-2)); // [5,6]\nconsole.log(array.slice(-3)); // [4,5,6]\n```\n\n\n### 数组截断\n\n这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有10个元素，但你只想只要前五个元素，那么你可以通过array.length=5来截断数组。如下面这个示例：\n\n```js\nvar array = [1,2,3,4,5,6];\nconsole.log(array.length); // 6\narray.length = 3;\nconsole.log(array.length); // 3\nconsole.log(array); // [1,2,3]\n```\n\n\n### 替换所有\n\n<code>String.replace()</code>函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的<strong>/g</strong>来模拟<code>replaceAll()</code>函数功能：\n\n```js\nvar string = \"john john\";\nconsole.log(string.replace(/hn/, \"ana\")); // \"joana john\"\nconsole.log(string.replace(/hn/g, \"ana\")); // \"joana joana\"\n```\n\n\n### 合并数组\n\n如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：\n\n```js\nvar array1 = [1,2,3];\nvar array2 = [4,5,6];\nconsole.log(array1.concat(array2)); // [1,2,3,4,5,6];\n```\n\n然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用<code>Array.push.apply(arr1,arr2)</code>来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：\n\n```js\nvar array1 = [1,2,3];\nvar array2 = [4,5,6];\nconsole.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];\n```\n\n\n### 将NodeList转换成数组\n\n如果你运行<code>document.querySelectorAll(“p”)</code>函数时，它可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如<code>sort()、reduce()、map()、filter()</code>等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用<code>[].slice.call(elements)</code>来实现：\n\n```js\nvar elements = document.querySelectorAll(\"p\"); // NodeList\nvar arrayElements = [].slice.call(elements); // Now the NodeList is an array\nvar arrayElements = Array.from(elements); // This is another way of converting NodeList to Array\n```\n\n\n### 数组元素的洗牌\n\n对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：\n\n```js\nvar list = [1,2,3];\nconsole.log(list.sort(function() { return Math.random() - 0.5 })); // [2,1,3]\n```\n\n\n### 总结","slug":"some-javascript-skills","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4p00087rjlcf6gmqem","content":"<p>在这篇文章中将给大家分享多个有关于JavaScript的小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。</p>\n<h3 id=\"使用-操作符转换布尔值\"><a href=\"#使用-操作符转换布尔值\" class=\"headerlink\" title=\"使用!!操作符转换布尔值\"></a>使用!!操作符转换布尔值</h3><p>有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、” “、undefined或者NaN都将返回的是false，反之返回的是true。比如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account</span>(<span class=\"params\">cash</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cash = cash;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hasMoney = !!cash;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> account = <span class=\"keyword\">new</span> Account(<span class=\"number\">100.50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(account.cash); <span class=\"comment\">// 100.50</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(account.hasMoney); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> emptyAccount = <span class=\"keyword\">new</span> Account(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(emptyAccount.cash); <span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(emptyAccount.hasMoney); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>在这个示例中，只要account.cash的值大于0，那么account.hasMoney返回的值就是true。</p>\n<h3 id=\"使用-将字符串转换成数字\"><a href=\"#使用-将字符串转换成数字\" class=\"headerlink\" title=\"使用+将字符串转换成数字\"></a>使用+将字符串转换成数字</h3><p>这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toNumber</span>(<span class=\"params\">strNumber</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +strNumber;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"1234\"</span>)); <span class=\"comment\">// 1234</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"ACB\"</span>)); <span class=\"comment\">// NaN</span></div></pre></td></tr></table></figure>\n<p>这个也适用于Date，在本例中，它将返回的是时间戳数字：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) <span class=\"comment\">// 1461288164385</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"并条件符\"><a href=\"#并条件符\" class=\"headerlink\" title=\"并条件符\"></a>并条件符</h3><p>如果你有一段这样的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (conected) &#123;</div><div class=\"line\">    login();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你也可以将变量简写，并且使用&amp;&amp;和函数连接在一起，比如上面的示例，可以简写成这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conected &amp;&amp; login();</div></pre></td></tr></table></figure></p>\n<p>如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">user &amp;&amp; user.login();</div><div class=\"line\">使用||运算符</div></pre></td></tr></table></figure></p>\n<p>在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用||操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为false，那么第二个值将会认为是一个默认值。如下面这个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">\"Oliver Queen\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age || <span class=\"number\">27</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> user1 = <span class=\"keyword\">new</span> User();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(user1.name); <span class=\"comment\">// Oliver Queen</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(user1.age); <span class=\"comment\">// 27</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user2 = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Barry Allen\"</span>, <span class=\"number\">25</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(user2.name); <span class=\"comment\">// Barry Allen</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(user2.age); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<h3 id=\"在循环中缓存array-length\"><a href=\"#在循环中缓存array-length\" class=\"headerlink\" title=\"在循环中缓存array.length\"></a>在循环中缓存array.length</h3><p>这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将array.length做一个缓存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你也可以写在这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"检测对象中属性\"><a href=\"#检测对象中属性\" class=\"headerlink\" title=\"检测对象中属性\"></a>检测对象中属性</h3><p>当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用document.querySelector()来选择一个id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'querySelector'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#id\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个示例中，如果document不存在querySelector函数，那么就会调用docuemnt.getElementById(“id”)。</p>\n<h3 id=\"获取数组中最后一个元素\"><a href=\"#获取数组中最后一个元素\" class=\"headerlink\" title=\"获取数组中最后一个元素\"></a>获取数组中最后一个元素</h3><p>Array.prototype.slice(begin,end)用来获取begin和end之间的数组元素。如果你不设置end参数，将会将数组的默认长度值当作end值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为begin的值，那么你可以获取数组的最后一个元素。如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-1</span>)); <span class=\"comment\">// [6]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-2</span>)); <span class=\"comment\">// [5,6]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-3</span>)); <span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数组截断\"><a href=\"#数组截断\" class=\"headerlink\" title=\"数组截断\"></a>数组截断</h3><p>这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有10个元素，但你只想只要前五个元素，那么你可以通过array.length=5来截断数组。如下面这个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 6</span></div><div class=\"line\">array.length = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [1,2,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><p><code>String.replace()</code>函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的<strong>/g</strong>来模拟<code>replaceAll()</code>函数功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"john john\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.replace(<span class=\"regexp\">/hn/</span>, <span class=\"string\">\"ana\"</span>)); <span class=\"comment\">// \"joana john\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.replace(<span class=\"regexp\">/hn/g</span>, <span class=\"string\">\"ana\"</span>)); <span class=\"comment\">// \"joana joana\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h3><p>如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array1.concat(array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></div></pre></td></tr></table></figure>\n<p>然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用<code>Array.push.apply(arr1,arr2)</code>来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array1.push.apply(array1, array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></div></pre></td></tr></table></figure>\n<h3 id=\"将NodeList转换成数组\"><a href=\"#将NodeList转换成数组\" class=\"headerlink\" title=\"将NodeList转换成数组\"></a>将NodeList转换成数组</h3><p>如果你运行<code>document.querySelectorAll(“p”)</code>函数时，它可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如<code>sort()、reduce()、map()、filter()</code>等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用<code>[].slice.call(elements)</code>来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"p\"</span>); <span class=\"comment\">// NodeList</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayElements = [].slice.call(elements); <span class=\"comment\">// Now the NodeList is an array</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayElements = <span class=\"built_in\">Array</span>.from(elements); <span class=\"comment\">// This is another way of converting NodeList to Array</span></div></pre></td></tr></table></figure>\n<h3 id=\"数组元素的洗牌\"><a href=\"#数组元素的洗牌\" class=\"headerlink\" title=\"数组元素的洗牌\"></a>数组元素的洗牌</h3><p>对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(list.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span> &#125;)); <span class=\"comment\">// [2,1,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>","excerpt":"","more":"<p>在这篇文章中将给大家分享多个有关于JavaScript的小技巧。这些小技巧可能在你的实际工作中或许能帮助你解决一些问题。</p>\n<h3 id=\"使用-操作符转换布尔值\"><a href=\"#使用-操作符转换布尔值\" class=\"headerlink\" title=\"使用!!操作符转换布尔值\"></a>使用!!操作符转换布尔值</h3><p>有时候我们需要对一个变量查检其是否存在或者检查值是否有一个有效值，如果存在就返回true值。为了做这样的验证，我们可以使用!!操作符来实现是非常的方便与简单。对于变量可以使用!!variable做检测，只要变量的值为:0、null、” “、undefined或者NaN都将返回的是false，反之返回的是true。比如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Account</span>(<span class=\"params\">cash</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.cash = cash;</div><div class=\"line\">    <span class=\"keyword\">this</span>.hasMoney = !!cash;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> account = <span class=\"keyword\">new</span> Account(<span class=\"number\">100.50</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(account.cash); <span class=\"comment\">// 100.50</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(account.hasMoney); <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> emptyAccount = <span class=\"keyword\">new</span> Account(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(emptyAccount.cash); <span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(emptyAccount.hasMoney); <span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>在这个示例中，只要account.cash的值大于0，那么account.hasMoney返回的值就是true。</p>\n<h3 id=\"使用-将字符串转换成数字\"><a href=\"#使用-将字符串转换成数字\" class=\"headerlink\" title=\"使用+将字符串转换成数字\"></a>使用+将字符串转换成数字</h3><p>这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toNumber</span>(<span class=\"params\">strNumber</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +strNumber;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"1234\"</span>)); <span class=\"comment\">// 1234</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(toNumber(<span class=\"string\">\"ACB\"</span>)); <span class=\"comment\">// NaN</span></div></pre></td></tr></table></figure>\n<p>这个也适用于Date，在本例中，它将返回的是时间戳数字：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) <span class=\"comment\">// 1461288164385</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"并条件符\"><a href=\"#并条件符\" class=\"headerlink\" title=\"并条件符\"></a>并条件符</h3><p>如果你有一段这样的代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (conected) &#123;</div><div class=\"line\">    login();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>你也可以将变量简写，并且使用&amp;&amp;和函数连接在一起，比如上面的示例，可以简写成这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conected &amp;&amp; login();</div></pre></td></tr></table></figure></p>\n<p>如果一些属性或函数存在于一个对象中，你也可以这样做检测，如下面的代码所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">user &amp;&amp; user.login();</div><div class=\"line\">使用||运算符</div></pre></td></tr></table></figure></p>\n<p>在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用||操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为false，那么第二个值将会认为是一个默认值。如下面这个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name || <span class=\"string\">\"Oliver Queen\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age || <span class=\"number\">27</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> user1 = <span class=\"keyword\">new</span> User();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(user1.name); <span class=\"comment\">// Oliver Queen</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(user1.age); <span class=\"comment\">// 27</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user2 = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Barry Allen\"</span>, <span class=\"number\">25</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(user2.name); <span class=\"comment\">// Barry Allen</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(user2.age); <span class=\"comment\">// 25</span></div></pre></td></tr></table></figure>\n<h3 id=\"在循环中缓存array-length\"><a href=\"#在循环中缓存array-length\" class=\"headerlink\" title=\"在循环中缓存array.length\"></a>在循环中缓存array.length</h3><p>这个技巧很简单，这个在处理一个很大的数组循环时，对性能影响将是非常大的。基本上，大家都会写一个这样的同步迭代的数组：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果是一个小型数组，这样做很好，如果你要处理的是一个大的数组，这段代码在每次迭代都将会重新计算数组的大小，这将会导致一些延误。为了避免这种现象出现，可以将array.length做一个缓存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> length = array.length;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你也可以写在这样：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(array[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"检测对象中属性\"><a href=\"#检测对象中属性\" class=\"headerlink\" title=\"检测对象中属性\"></a>检测对象中属性</h3><p>当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用document.querySelector()来选择一个id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'querySelector'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">document</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#id\"</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个示例中，如果document不存在querySelector函数，那么就会调用docuemnt.getElementById(“id”)。</p>\n<h3 id=\"获取数组中最后一个元素\"><a href=\"#获取数组中最后一个元素\" class=\"headerlink\" title=\"获取数组中最后一个元素\"></a>获取数组中最后一个元素</h3><p>Array.prototype.slice(begin,end)用来获取begin和end之间的数组元素。如果你不设置end参数，将会将数组的默认长度值当作end值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为begin的值，那么你可以获取数组的最后一个元素。如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-1</span>)); <span class=\"comment\">// [6]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-2</span>)); <span class=\"comment\">// [5,6]</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">-3</span>)); <span class=\"comment\">// [4,5,6]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数组截断\"><a href=\"#数组截断\" class=\"headerlink\" title=\"数组截断\"></a>数组截断</h3><p>这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有10个元素，但你只想只要前五个元素，那么你可以通过array.length=5来截断数组。如下面这个示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 6</span></div><div class=\"line\">array.length = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array.length); <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [1,2,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"替换所有\"><a href=\"#替换所有\" class=\"headerlink\" title=\"替换所有\"></a>替换所有</h3><p><code>String.replace()</code>函数允许你使用字符串或正则表达式来替换字符串，本身这个函数只替换第一次出现的字符串，不过你可以使用正则表达多中的<strong>/g</strong>来模拟<code>replaceAll()</code>函数功能：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">\"john john\"</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.replace(<span class=\"regexp\">/hn/</span>, <span class=\"string\">\"ana\"</span>)); <span class=\"comment\">// \"joana john\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(string.replace(<span class=\"regexp\">/hn/g</span>, <span class=\"string\">\"ana\"</span>)); <span class=\"comment\">// \"joana joana\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h3><p>如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array1.concat(array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></div></pre></td></tr></table></figure>\n<p>然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用<code>Array.push.apply(arr1,arr2)</code>来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array1.push.apply(array1, array2)); <span class=\"comment\">// [1,2,3,4,5,6];</span></div></pre></td></tr></table></figure>\n<h3 id=\"将NodeList转换成数组\"><a href=\"#将NodeList转换成数组\" class=\"headerlink\" title=\"将NodeList转换成数组\"></a>将NodeList转换成数组</h3><p>如果你运行<code>document.querySelectorAll(“p”)</code>函数时，它可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如<code>sort()、reduce()、map()、filter()</code>等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用<code>[].slice.call(elements)</code>来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> elements = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"p\"</span>); <span class=\"comment\">// NodeList</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayElements = [].slice.call(elements); <span class=\"comment\">// Now the NodeList is an array</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayElements = <span class=\"built_in\">Array</span>.from(elements); <span class=\"comment\">// This is another way of converting NodeList to Array</span></div></pre></td></tr></table></figure>\n<h3 id=\"数组元素的洗牌\"><a href=\"#数组元素的洗牌\" class=\"headerlink\" title=\"数组元素的洗牌\"></a>数组元素的洗牌</h3><p>对于数组元素的洗牌，不需要使用任何外部的库，比如Lodash，只要这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(list.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() - <span class=\"number\">0.5</span> &#125;)); <span class=\"comment\">// [2,1,3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>"},{"title":"Javascript设计模式简述","date":"2016-04-12T09:00:00.000Z","description":"前言： 单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。 装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。 门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。 享元模式是一种以优化为目的的模式。 代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。 观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。 命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。 职责链模式用来消除请求的发送者和接收者之间的耦合。","_content":"本文系转载，来自[博客园-聂微东](http://www.cnblogs.com/Darren_code/)。\n\n## 前言：\n+ 单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。\n装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。\n+ 门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。\n+ 享元模式是一种以优化为目的的模式。\n+ 代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。\n+ 观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。\n+ 命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。\n+ 职责链模式用来消除请求的发送者和接收者之间的耦合。\n\n---\n\n## JavaScript设计模式都有哪些？\n### 单体（Singleton）模式\n绝对是JavaScript中最基本最有用的模式\n\n单体在JavaScript的有多种用途，它用来划分命名空间。可以减少网页中全局变量的数量(在网页中使用全局变量有风险)；可以在多人开发时避免代码的冲突(使用合理的命名空间)等等。\n\n在中小型项目或者功能中，单体可以用作命名空间把自己的代码组织在一个全局变量名下；在稍大或者复杂的功能中，单体可以用来把相关代码组织在一起以便日后好维护。\n\n使用单体的方法就是用一个命名空间包含自己的所有代码的全局对象，\n\n```js\n    var functionGroup = {\n        name:'Darren',\n        method1:function(){\n            //code\n        },\n        init:function(){\n            //code\n        }\n    };\n\n```\n\n或者\n\n```js\n    var functionGroup = myGroup()\n    {\n        this.name = 'Darren';\n        this.getName = function () {\n            return this.name\n        };\n        this.method1 = function () {\n        };\n        // ...\n    }\n```\n\n### 工厂（Factory）模式\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类\n\n工厂就是把成员对象的创建工作转交给一个外部对象，好处在于消除对象之间的耦合(何为耦合？就是相互影响)。通过使用工厂方法而不是new关键字及具体类，可以把所有实例化的代码都集中在一个位置，有助于创建模块化的代码，这才是工厂模式的目的和优势。\n\n举个例子，\n你有一个大的功能要做，其中有一部分是要考虑扩展性的，那么这部分代码就可以考虑抽象出来，当做一个全新的对象做处理。好处就是将来扩展的时候容易维护 - 只需要操作这个对象内部方法和属性，达到了动态实现的目的。\n\n非常有名的一个示例 - XHR工厂，\n\n ```js\nvar XMLHttpFactory = function () {\n};\n　　　　　　//这是一个简单工厂模式\n\nXMLHttpFactory.createXMLHttp = function () {\n    var XMLHttp = null;\n    if (window.XMLHttpRequest) {\n        XMLHttp = new XMLHttpRequest();\n    }\n    elseif(window.ActiveXObject)\n    {\n        XMLHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    return XMLHttp;\n};\n\n//XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象。\nvar AjaxHander = function () {\n    var XMLHttp = XMLHttpFactory.createXMLHttp();\n    // ...\n};\n ```\n\n工厂模式又区分简单工厂模式和抽象工厂模式，上面介绍的是简单工厂模式，这种模式用的更多也更简单易用。\n\n抽象工厂模式的使用方法就是 - 先设计一个抽象类，这个类不能被实例化，只能用来派生子类，最后通过对子类的扩展实现工厂方法。 示例，\n\n ```js\nvar XMLHttpFactory = function () {};\n//这是一个抽象工厂模式\n\nXMLHttpFactory.prototype = {\n    //如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类\n    createFactory: function () {\n        throw new Error('This is an abstract class');\n    }\n};\n\n//派生子类，\nvar XHRHandler = function () {\n    XMLHttpFactory.call(this);\n};\n\nXHRHandler.prototype = new XMLHttpFactory();\nXHRHandler.prototype.constructor = XHRHandler;\n\n//重新定义createFactory 方法\nXHRHandler.prototype.createFactory = function () {\n    var XMLHttp = null;\n    if (window.XMLHttpRequest) {\n        XMLHttp = new XMLHttpRequest();\n    } else if (window.ActiveXObject) {\n        XMLHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    return XMLHttp;\n};\n ```\n\n### 桥接（bridge）模式\n在实现API的时候，桥梁模式灰常有用。在所有模式中，这种模式最容易立即付诸实施\n\n桥梁模式可以用来弱化它与使用它的类和对象之间的耦合，就是将抽象与其实现隔离开来，以便二者独立变化；\n这种模式对于JavaScript中常见的时间驱动的编程有很大益处，桥梁模式最常见和实际的应用场合之一是时间监听器回调函数。\n\n先分析一个不好的示例，\n\n```js\n    element.onclick = function () {\n        new setLogFunc();\n    };\n```\n\n为什么说这个示例不好，因为从这段代码中无法看出那个LogFunc方法要显示在什么地方，它有什么可配置的选项以及应该怎么去修改它。\n\n换一种说法就是，桥梁模式的要诀就是让接口“可桥梁”，实际上也就是可配置。把页面中一个个功能都想象成模块，接口可以使得模块之间的耦合降低。\n\n掌握桥梁模式的正确使用收益的不只是你，还有那些负责维护你代码的人。把抽象于其实现隔离开，可独立地管理软件的各个部分，bug也因此更容易查找。\n\n桥梁模式目的就是让API更加健壮，提高组件的模块化程度，促成更简洁的实现，并提高抽象的灵活性。\n\n一个好的示例，\n\n```js\n    element.onclick = function () {\n        //API可控制性提高了，使得这个API更加健壮\n        new someFunction(element, param, callback);\n    };\n```\nTips：桥梁模式还可以用于连接公开的API代码和私有的实现代码，还可以把多个类连接在一起。\n\n\n```js\n    // 错误的方式\n    // 这个API根据事件监听器回调函数的工作机制，事件对象被作为参数传递给这个函数。本例中并没有使用这个参数，而只是从this对象获取ID。\n\n    addEvent(element, 'click', getBeerById);\n    function getBeerById(e) {\n        var id = this.id;\n        asyncRequest('GET', 'beer.url?id=' + id, function (resp) {\n            //Callback response\n            console.log('Requested Beer: ' + resp.responseText);\n        });\n    }\n\n\n    // 好的方式\n    // 从逻辑上分析，把id传给getBeerById函数式合情理的，且回应结果总是通过一个回调函数返回。\n    // 这么理解，我们现在做的是针对接口而不是实现进行编程，用桥梁模式把抽象隔离开来。\n\n    function getBeerById(id, callback) {\n        asyncRequest('GET', 'beer.url?id=' + id, function (resp) {\n            callback(resp.responseText);\n        });\n    }\n\n    addEvent(element, 'click', getBeerByIdBridge);\n\n    function getBeerByIdBridge(e) {\n        getBeerById(this.id, function (beer) {\n            console.log('Requested Beer: ' + beer);\n        });\n    }\n```\n\n### 装饰者（Decorator）模式\n这个模式就是为对象增加功能(或方法)。\n\n动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。\n\n装饰者模式和组合模式有很多共同点，它们都与所包装的对象实现统一的接口并且会把任何方法条用传递给这些对象。可是组合模式用于把众多子对象组织为一个整体，而装饰者模式用于在不修改现有对象或从派生子类的前提下为其添加方法。\n\n装饰者的运作过程是透明的，这就是说你可以用它包装其他对象，然后继续按之前使用那个对象的方法来使用，从下面的例子中就可以看出。\n\n还是从代码中理解吧，\n\n```js\n    // 创建一个命名空间为myText.Decorations\n    var myText = {};\n    myText.Decorations = {};\n\n    myText.Core = function (myString) {\n        this.show = function () {\n            return myString;\n        }\n    };\n\n    // 第一次装饰\n    myText.Decorations.addQuestuibMark = function (myString) {\n        this.show = function () {\n            return myString.show() + '?';\n        };\n    };\n\n    // 第二次装饰\n    myText.Decorations.makeItalic = function (myString) {\n        this.show = function () {\n            return'<li>' + myString.show() + '</li>'\n        };\n    };\n\n    // 得到myText.Core的实例\n    var theString = new myText.Core('this is a sample test String');\n    alert(theString.show()); //output 'this is a sample test String'\n\n    theString = new myText.Decorations.addQuestuibMark(theString);\n    alert(theString.show()); //output 'this is a sample test String?'\n\n    theString = new myText.Decorations.makeItalic(theString);\n    alert(theString.show()); //output '<li>this is a sample test String</li>'\n```\n\n从这个示例中可以看出，这一切都可以不用事先知道组件对象的接口，甚至可以动态的实现，在为现有对象增添特性这方面，装饰者模式有极大的灵活性。\n\n如果需要为类增加特性或者方法，而从该类派生子类的解决办法并不实际的话，就应该使用装饰者模式。派生子类之所以会不实际最常见的原因是需要添加的特性或方法的数量要求使用大量子类。\n\n### 组合（Composite）模式\n将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。\n\n组合模式是一种专为创建Web上的动态用户界面而量身定制的模式。使用这种模式，可以用一条命令在多个对象上激发复杂的或递归的行为。组合模式擅长于对大批对象进行操作。\n\n组合模式的好处，\n\n程序员可以用同样的方法处理对象的集合与其中的特定子对象\n它可以用来把一批子对象组织成树形结构，并且使整棵树都可被便利\n组合模式适用范围，\n\n存在一批组织成某处层次体系的对象（具体结构可能在开发期间无法知道）\n希望对这批对象或其中的一部分对象实话一个操作\n其实组合模式就是将一系列相似或相近的对象组合在一个大的对象，由这个大对象提供一些常用的接口来对这些小对象进行操作，代码可重用，对外操作简单。例如：对form内的元素，不考虑页面设计的情况下，一般就剩下input了，对于这些input都有name和value的属性，因此可以将这些input元素作为form对象的成员组合起来，form对象提供对外的接口，便可以实现一些简单的操作，比如设置某个input的value，添加/删除某个input等等。\n\n这种模式描述起来比较吃力，我从《JS设计模式》上找个一个实例，大家还是看代码吧。\n\n先创建组合对象类，\n\n```js\n// DynamicGallery Class\nvar DynamicGallery = function (id) { // 实现Composite，GalleryItem组合对象类\n    this.children = [];\n    this.element = document.createElement('div');\n    this.element.id = id;\n    this.element.className = 'dynamic-gallery';\n};\n\nDynamicGallery.prototype = {\n    // 实现Composite组合对象接口\n    add: function (child) {\n        this.children.push(child);\n        this.element.appendChild(child.getElement());\n    },\n    remove: function (child) {\n        for (var node, i = 0; node = this.getChild(i); i++) {\n            if (node == child) {\n                this.children.splice(i, 1);\n                break;\n            }\n        }\n        this.element.removeChild(child.getElement());\n    },\n    getChild: function (i) {\n        return this.children[i];\n    },\n    // 实现DynamicGallery组合对象接口\n    hide: function () {\n        for (var node, i = 0; node = this.getChild(i); i++) {\n            node.hide();\n        }\n        this.element.style.display = 'none';\n    },\n    show: function () {\n        this.element.style.display = 'block';\n        for (var node, i = 0; node = getChild(i); i++) {\n            node.show();\n        }\n    },\n    // 帮助方法\n    getElement: function () {\n        return this.element;\n    }\n};\n```\n\n再创建叶对象类，\n\n```js\nvar GalleryImage = function (src) { // 实现Composite和GalleryItem组合对象中所定义的方法\n    this.element = document.createElement('img');\n    this.element.className = 'gallery-image';\n    this.element.src = src;\n};\n\nGalleryImage.prototype = {\n    // 实现Composite接口\n    // 这些是叶结点，所以我们不用实现这些方法，我们只需要定义即可\n    add: function () {\n    },\n    remove: function () {\n    },\n    getChild: function () {\n    },\n    // 实现GalleryItem接口\n    hide: function () {\n        this.element.style.display = 'none';\n    },\n    show: function () {\n        this.element.style.display = '';\n    },\n    // 帮助方法\n    getElement: function () {\n        return this.element;\n    }\n};\n```\n\n现在我们可以使用这两个类来管理图片，\n\n```js\nvar topGallery = new DynamicGallery('top-gallery');\n\ntopGallery.add(new GalleryImage('/img/image-1.jpg'));\ntopGallery.add(new GalleryImage('/img/image-2.jpg'));\ntopGallery.add(new GalleryImage('/img/image-3.jpg'));\n\nvar vacationPhotos = new DyamicGallery('vacation-photos');\n\nfor (var i = 0; i < 30; i++) {\n    vacationPhotos.add(new GalleryImage('/img/vac/image-' + i + '.jpg'));\n}\n\ntopGallery.add(vacationPhotos);\ntopGallery.show();\nvacationPhotos.hide();\n```\n\n\n### 门面（facade）模式\n门面模式是几乎所有JavaScript库的核心原则\n\n子系统中的一组接口提供一个一致的界面，门面模式定义了一个高层接口，这个接口使得这一子系统更加容易使用，简单的说这是一种组织性的模式，它可以用来修改类和对象的接口，使其更便于使用。\n\n门面模式的两个作用，\n\n简化类的接口\n消除类与使用它的客户代码之间的耦合\n门面模式的使用目的就是图方便。\n\n想象一下计算机桌面上的那些快捷方式图标，它们就是在扮演一个把用户引导至某个地方的接口的角色，每次操作都是间接的执行一些幕后的命令。\n\n你在看这篇的博客的时候我就假设你已经有JavaScript的使用经验了，那么你一定写过或者看过这样的代码，\n\n```js\nvar addEvent = function (el, type, fn) {\n    if (window.addEventListener) {\n        el.addEventListener(type, fn);\n    } else if (window.attachEvent) {\n        el.attachEvent('on' + type, fn);\n    } else {\n        el['on' + type] = fn;\n    }\n};\n```\n这个就是一个JavaScript中常见的事件监听器函数，这个函数就是一个基本的门面，有了它，就有了为DOM节点添加事件监听器的简便方法。\n\n现在要说门面模式的精华部分了，为什么说JavaScript库几乎都会用这种模式类。假如现在要设计一个库，那么最好把其中所有的工具元素放在一起，这样更好用，访问起来更简便。看代码，\n\n```js\n//_model.util是一个命名空间\n_myModel.util.Event = {\n    getEvent: function (e) {\n        return e || window.event;\n    },\n    getTarget: function (e) {\n        return e.target || e.srcElement;\n    },\n    preventDefault: function (e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    }\n};\n\n//事件工具大概就是这么一个套路，然后结合addEvent函数使用\naddEvent(document.getElementsByTagName('body')[0], 'click', function (e) {\n    alert(_myModel.util.Event.getTarget(e));\n});\n```\n\n个人认为，在处理游览器差异问题时最好的解决办法就是把这些差异抽取的门面方法中，这样可以提供一个更一致的接口，addEvent函数就是一个例子。\n\n### 适配置器（Adapter）模式\n将一个类的接口转换成客户希望的另外一个接口\n\n配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，使用这种模式的对象又叫包装器，因为他们是在用一个新的接口包装另一个对象。\n\n从表面上看，它和门面模式有点相似，差别在于它们如何改变接口，门面模式展现的是一个简化的接口，它并不提供额外的选择，而适配器模式则要把一个接口转换为另一个接口，它并不会滤除某些能力，也不会简化接口。\n\n先来一个简单的示例看看，\n\n```js\n//假如有一个3个字符串参数的函数，但是现在拥有的却是一个包含三个字符串元素的对象，那么就可以用一个配置器来衔接二者\nvar clientObject = {\n    str1: 'bat',\n    str2: 'foo',\n    str3: 'baz'\n};\n\nfunction interfaceMethod(str1, str2, str3) {\n    alert(str1);\n}\n\n//配置器函数\nfunction adapterMethod(o) {\n    interfaceMethod(o.str1, o.str2, o.str3);\n}\n\n//adapterMethod函数的作为就在于对interfaceMethod函数进行包装，并把传递给它的参数转换为后者需要的形式。\nadapterMethod(clientObject);\n```\n\n适配器模式的工作机制是：用一个新的接口对现有类得接口进行包装。\n\n示例：适配两个库。下面的例子要实现的是从Prototype库的$函数到YUI的get方法的转换。\n\n```js\n// 先看它们在接口方面的差别\n// Prototype $ function\n\nfunction $() {\n    var elements = new Array();\n    for (var i = 0; i < arguments.length; i++) {\n        var element = arguments[i];\n        if (typeof element == 'string') {\n            element = document.getElementById(element);\n        }\n//        if (typeof.length == 1) {\n//            return element;\n//        }\n        elements.push(element);\n    }\n\n    return elements;\n}\n\n// YUI get method\nYAHOO.util.Dom.get = function (el) {\n    if (YAHOO.lang.isString(el)) {\n        return document.getElementById(el);\n    }\n\n    if (YAHOO.lang.isArray(el)) {\n        var c = [];\n        for (var i = 0, len = el.length; i < len; ++i) {\n            c[c.length] = YAHOO.util.Dom.get(el[i]);\n        }\n        return c;\n    }\n\n    if (el) {\n        return el;\n    }\n\n    return null;\n};\n\n// 二者区别就在于get具有一个参数，且可以是HTML,字符串或者数组；而$木有正是的参数，允许使用者传入任意数目的参数，不管HTML还是字符串。\n// 如果需要从使用Prototype的$函数改为使用YUI的get方法（或者相反，那么用适配器模式其实很简单）\nfunction PrototypeToYUIAdapter() {\n    return YAHOO.util.Dom.get(arguments);\n}\n\nfunction YUIToPrototypeAdapter(el) {\n    return $.apply(window, el instanceof Array ? el : [el]);\n}\n```\n\n\n### 享元（Flyweight）模式\n运用共享技术有效地支持大量细粒度的对象。\n\n享元模式可以避免大量非常相似类的开销。在程序设计中有时需要生成大量细粒度的类实例来表示数据。如果发现这些实例除了几个参数外基本伤都是相同的，有时就能够受大幅度第减少需要实例化的类的数量。如果能把这些参数移到类实例外面，在方法调用时将他们传递进来，就可以通过共享大幅度地减少单个实例的数目。\n\n从实际出发说说自己的理解吧。\n\n组成部分，\n\n“享元”：抽离出来的外部操作和数据；\n“工厂”：创造对象的工厂；\n“存储器”：存储实例对象的对象或数组，供“享元”来统一控制和管理。\n应用场景，\n\n页面存在大量资源密集型对象；\n这些对象具备一定的共性，可以抽离出公用的操作和数据\n关键，\n\n合理划分内部和外部数据。既要保持每个对象的模块性、保证享元的独立、可维护，又要尽可能多的抽离外部数据。\n管理所有实例。既然抽离出了外部数据和操作，那享元就必须可以访问和控制实例对象。在JavaScript这种动态语言中，这个需求是很容易实现的：我们可以把工厂生产出的对象简单的扔在一个数组中。为每个对象设计暴露给外部的方法，便于享元的控制。\n优点，\n\n将能耗大的操作抽离成一个，在资源密集型系统中，可大大减少资源和内存占用；\n职责封装，这些操作独立修改和维护；\n缺点，\n\n增加了实现复杂度。 将原本由一个工厂方法实现的功能，修改为了一个享元 + 一个工厂 + 一个存储器。\n对象数量少的情况，可能会增大系统开销。\n示例，\n\n```js\n//汽车登记示例\nvar Car = function (make, model, year, owner, tag, renewDate) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n    this.owner = owner;\n    this.tag = tag;\n    this.renewDate = renewDate;\n}\n\nCar.prototype = {\n    getMake: function () {\n        return this.make;\n    },\n    getModel: function () {\n        return this.model;\n    },\n    getYear: function () {\n        return this.year;\n    },\n    transferOwner: function (owner, tag, renewDate) {\n        this.owner = owner;\n        this.tag = tag;\n        this.renewDate = renewDate;\n    },\n    renewRegistration: function (renewDate) {\n        this.renewDate = renewDate;\n    }\n}\n\n//数据量小到没多大的影响，数据量大的时候对计算机内存会产生压力，下面介绍享元模式优化后\n//包含核心数据的Car类\n\nvar Car = function (make, model, year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n};\n\nCar.prototype = {\n    getMake: function () {\n        return this.make;\n    },\n    getModel: function () {\n        return this.model;\n    },\n    getYear: function () {\n        return this.year;\n    }\n}\n\n//中间对象，用来实例化Car类\nvar CarFactory = (function () {\n    var createdCars = {};\n\n    return {\n        createCar: function (make, model, year) {\n            var car = createdCars[make + \"-\" + model + \"-\" + year];\n            return car ? car : createdCars[make + '-' + model + '-' + year] = (new Car(make, model, year));\n        }\n    };\n})();\n\n//数据工厂，用来处理Car的实例化和整合附加数据\nvar CarRecordManager = (function () {\n    var carRecordDatabase = {};\n\n    return {\n        addCarRecord: function (make, model, year, owner, tag, renewDate) {\n            var car = CarFactory.createCar(make, model, year);\n            carRecordDatabase[tag] = {\n                owner: owner,\n                tag: tag,\n                renewDate: renewDate,\n                car: car\n            }\n        },\n        transferOwnership: function (tag, newOwner, newTag, newRenewDate) {\n            var record = carRecordDatabase[tag];\n            record.owner = newOwner;\n            record.tag = newTag;\n            record.renewDate = newRenewDate;\n        },\n        renewRegistration: function (tag, newRenewDate) {\n            carRecordDatabase[tag].renewDate = newRenewDate;\n        },\n        getCarInfo: function (tag) {\n            return carRecordDatabase[tag];\n        }\n    };\n})();\n```\n\n### 代理（Proxy）模式\n此模式最基本的形式是对访问进行控制\n\n代理对象和另一个对象（本体）实现的是同样的接口，可是实际上工作还是本体在做，它才是负责执行所分派的任务的那个对象或类，代理对象不会在另以对象的基础上修改任何方法，也不会简化那个对象的接口。\n\n举一个具体的情况：如果那个对象在某个远端服务器上，直接操作这个对象因为网络速度原因可能比较慢，那我们可以先用Proxy来代替那个对象。\n\n总之对于开销较大的对象，只有在使用它时才创建，这个原则可以为我们节省很多内存。《JS设计模式》上的图书馆示例，\n\n```js\nvar Publication = new Interface('Publication', ['getIsbn', 'setIsbn', 'getTitle', 'setTitle', 'getAuthor', 'setAuthor', 'display']);\n\nvar Book = function (isbn, title, author) {\n    //...\n};\n\n// implements Publication\nimplements(Book, Publication);\n\n/* Library interface. */\nvar Library = new Interface('Library', ['findBooks', 'checkoutBook', 'returnBook']);\n\n/* PublicLibrary class. */\nvar PublicLibrary = function (books) {\n    //...\n};\n\n// implements Library\nimplements(PublicLibrary, Library);\n\nPublicLibrary.prototype = {\n    findBooks: function (searchString) {\n        //...\n    },\n    checkoutBook: function (book) {\n        //...\n    },\n    returnBook: function (book) {\n        //...\n    }\n};\n\n/* PublicLibraryProxy class, a useless proxy. */\nvar PublicLibraryProxy = function (catalog) {\n    this.library = new PublicLibrary(catalog);\n};\n\n// implements Library\nimplements(PublicLibraryProxy, Library);\n\nPublicLibraryProxy.prototype = {\n    findBooks: function (searchString) {\n        return this.library.findBooks(searchString);\n    },\n    checkoutBook: function (book) {\n        return this.library.checkoutBook(book);\n    },\n    returnBook: function (book) {\n        return this.library.returnBook(book);\n    }\n};\n```\n\n\n### 观察者（Observer）模式\n定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。\n\n观察者模式中存在两个角色,观察者和被观察者。在DOM的编程环境中的高级事件模式中，事件监听器说到底就是一种内置的观察者。事件处理器(handler)和时间监听器(listener)并不是一回事，前者就是一种把事件传给与其关联的函数的手段，而在后者中，一个时间可以与几个监听器关联，每个监听器都能独立于其他监听器而改变。\n\n```js\n//使用时间监听器可以让多个函数相应一个事件\nvar fn1 = function () {\n    //code\n};\nvar fn2 = function () {\n    //code\n};\n\naddEvent(element, 'click', fn1);\naddEvent(element, 'click', fn2);\n\n//而时间处理函数就办不到\nelement.onclick = fn1;\nelement.onclick = fn2;\n```\n\n观察者模式是开发基于行为的应用程序的有力手段，前端程序员可做的就是借助一个事件监听器替你处理各种行为，从而降低内存消耗和提高互动性能。\n\n```js\n// 用AngularJS实现观察者模式\n\nvar services = angular.module('services', []);\n\nservices.factory('ob', function() {\n    var exports,\n        channels = {};\n\n    exports = {\n        subscribe: function(topic, callback) {\n            if (!_.isArray(channels[topic])) {\n                channels[topic] = [];\n            }\n            var handlers = channels[topic];\n            handlers.push(callback);\n        },\n        unsubscribe: function(topic, callback) {\n            if (!_.isArray(channels[topic])) {\n                return;\n            }\n            var handlers = channels[topic];\n            var index = _.indexOf(handlers, callback);\n            if (index >= 0) {\n                handlers.splice(index, 1);\n            }\n        },\n        publish: function(topic, data) {\n            var self = this;\n            var handlers = channels[topic] || [];\n            _.each(handlers, function(handler) {\n                try {\n                    handler.apply(self, [data]);\n                } catch (ex) {\n                    console.log(ex);\n                }\n            });\n        }\n    };\n\n    return exports;\n});\n\n```\n上面就是观察者模式的核心实现。在实际项目中，可能会根据需求作一些微调。\n\n\n### 命令（Command）模式\n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。\n\n命令对象是一个操作和用来调用这个操作的对象的结合体，所有的命名对象都有一个执行操作，其用途就是调用命令对象所绑定的操作。\n\n示例，\n\n```js\nvar Calculator = {\n    add: function (x, y) {\n        return x + y;\n    },\n    substract: function (x, y) {\n        return x - y;\n    },\n    multiply: function (x, y) {\n        return x * y;\n    },\n    divide: function (x, y) {\n        return x / y;\n    }\n};\n\nCalculator.calc = function (command) {\n    return Calculator[command.type](command.op1, command.opd2)\n};\n\nCalculator.calc({type: 'add', op1: 1, op2: 1});\nCalculator.calc({type: 'substract', op1: 5, op2: 2});\nCalculator.calc({type: 'multiply', op1: 5, op2: 2});\nCalculator.calc({type: 'divide', op1: 8, op2: 4});\n```\n\n命名模式的主要用途是把调用对象（用户界面，API和代理等）与实现操作的对象隔离开，也就是说使对象间的互动方式需要更高的模块化时都可以用到这种模式。\n\n\n### 职责链（Chain Of Responsibility）模式\n为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。\n\n职责链由多个不同类型的对象组成：发送者是发出请求的对象，而接收者则是接收请求并且对其进行处理或传递的对象，请求本身有时也是一个对象，它封装着与操作有关的所有数据。\n\n典型的流程大致是，\n\n发送者知道链中第一个接收者，它向这个接收者发出请求。\n每一个接收者都对请求进行分析，然后要么处理它，要么将其往下传。\n每一个接收者知道的其他对象只有一个，即它在链中的下家。\n如果没有任何接收者处理请求，那么请求将从链上离开，不同的实现对此也有不同的反应，一般会抛出一个错误。\n职责链模式的适用范围，\n\n有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定\n想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求\n可处理一个请求的对象集合需要被动态指定。\n确实对这种模式不了解，相关资料也较少，所以代码先不上了。看看大家对这个模式有木有什么好的理解或者能较好表达这种模式的代码，谢谢了。\n\n## 结束语\n每种模式都有自己的优缺点，所以每种模式的正确使用还得看开发人员本身的功力；\n就算不使用JavaScript设计模式一样可以写出复杂的可使用的代码，可是如果你想真正了解JavaScript面向对象能力，学习提高代码的模块化程度﹑可维护性﹑可靠性和效率，那么合理的运用JavaScript设计模式将会是一个优秀前端开发工程师必备的能力。\n- EOF -\n","source":"_posts/javascript-design-pattern.md","raw":"---\ntitle: \"Javascript设计模式简述\"\ndate: 2016-04-12 17:00:00\ntags: ['Javascript', '设计模式']\ndescription: \"前言：\n单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。\n装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。\n门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。\n享元模式是一种以优化为目的的模式。\n代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。\n观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。\n命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。\n职责链模式用来消除请求的发送者和接收者之间的耦合。\"\n\n---\n本文系转载，来自[博客园-聂微东](http://www.cnblogs.com/Darren_code/)。\n\n## 前言：\n+ 单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。\n装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。\n+ 门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。\n+ 享元模式是一种以优化为目的的模式。\n+ 代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。\n+ 观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。\n+ 命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。\n+ 职责链模式用来消除请求的发送者和接收者之间的耦合。\n\n---\n\n## JavaScript设计模式都有哪些？\n### 单体（Singleton）模式\n绝对是JavaScript中最基本最有用的模式\n\n单体在JavaScript的有多种用途，它用来划分命名空间。可以减少网页中全局变量的数量(在网页中使用全局变量有风险)；可以在多人开发时避免代码的冲突(使用合理的命名空间)等等。\n\n在中小型项目或者功能中，单体可以用作命名空间把自己的代码组织在一个全局变量名下；在稍大或者复杂的功能中，单体可以用来把相关代码组织在一起以便日后好维护。\n\n使用单体的方法就是用一个命名空间包含自己的所有代码的全局对象，\n\n```js\n    var functionGroup = {\n        name:'Darren',\n        method1:function(){\n            //code\n        },\n        init:function(){\n            //code\n        }\n    };\n\n```\n\n或者\n\n```js\n    var functionGroup = myGroup()\n    {\n        this.name = 'Darren';\n        this.getName = function () {\n            return this.name\n        };\n        this.method1 = function () {\n        };\n        // ...\n    }\n```\n\n### 工厂（Factory）模式\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类\n\n工厂就是把成员对象的创建工作转交给一个外部对象，好处在于消除对象之间的耦合(何为耦合？就是相互影响)。通过使用工厂方法而不是new关键字及具体类，可以把所有实例化的代码都集中在一个位置，有助于创建模块化的代码，这才是工厂模式的目的和优势。\n\n举个例子，\n你有一个大的功能要做，其中有一部分是要考虑扩展性的，那么这部分代码就可以考虑抽象出来，当做一个全新的对象做处理。好处就是将来扩展的时候容易维护 - 只需要操作这个对象内部方法和属性，达到了动态实现的目的。\n\n非常有名的一个示例 - XHR工厂，\n\n ```js\nvar XMLHttpFactory = function () {\n};\n　　　　　　//这是一个简单工厂模式\n\nXMLHttpFactory.createXMLHttp = function () {\n    var XMLHttp = null;\n    if (window.XMLHttpRequest) {\n        XMLHttp = new XMLHttpRequest();\n    }\n    elseif(window.ActiveXObject)\n    {\n        XMLHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    return XMLHttp;\n};\n\n//XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象。\nvar AjaxHander = function () {\n    var XMLHttp = XMLHttpFactory.createXMLHttp();\n    // ...\n};\n ```\n\n工厂模式又区分简单工厂模式和抽象工厂模式，上面介绍的是简单工厂模式，这种模式用的更多也更简单易用。\n\n抽象工厂模式的使用方法就是 - 先设计一个抽象类，这个类不能被实例化，只能用来派生子类，最后通过对子类的扩展实现工厂方法。 示例，\n\n ```js\nvar XMLHttpFactory = function () {};\n//这是一个抽象工厂模式\n\nXMLHttpFactory.prototype = {\n    //如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类\n    createFactory: function () {\n        throw new Error('This is an abstract class');\n    }\n};\n\n//派生子类，\nvar XHRHandler = function () {\n    XMLHttpFactory.call(this);\n};\n\nXHRHandler.prototype = new XMLHttpFactory();\nXHRHandler.prototype.constructor = XHRHandler;\n\n//重新定义createFactory 方法\nXHRHandler.prototype.createFactory = function () {\n    var XMLHttp = null;\n    if (window.XMLHttpRequest) {\n        XMLHttp = new XMLHttpRequest();\n    } else if (window.ActiveXObject) {\n        XMLHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    return XMLHttp;\n};\n ```\n\n### 桥接（bridge）模式\n在实现API的时候，桥梁模式灰常有用。在所有模式中，这种模式最容易立即付诸实施\n\n桥梁模式可以用来弱化它与使用它的类和对象之间的耦合，就是将抽象与其实现隔离开来，以便二者独立变化；\n这种模式对于JavaScript中常见的时间驱动的编程有很大益处，桥梁模式最常见和实际的应用场合之一是时间监听器回调函数。\n\n先分析一个不好的示例，\n\n```js\n    element.onclick = function () {\n        new setLogFunc();\n    };\n```\n\n为什么说这个示例不好，因为从这段代码中无法看出那个LogFunc方法要显示在什么地方，它有什么可配置的选项以及应该怎么去修改它。\n\n换一种说法就是，桥梁模式的要诀就是让接口“可桥梁”，实际上也就是可配置。把页面中一个个功能都想象成模块，接口可以使得模块之间的耦合降低。\n\n掌握桥梁模式的正确使用收益的不只是你，还有那些负责维护你代码的人。把抽象于其实现隔离开，可独立地管理软件的各个部分，bug也因此更容易查找。\n\n桥梁模式目的就是让API更加健壮，提高组件的模块化程度，促成更简洁的实现，并提高抽象的灵活性。\n\n一个好的示例，\n\n```js\n    element.onclick = function () {\n        //API可控制性提高了，使得这个API更加健壮\n        new someFunction(element, param, callback);\n    };\n```\nTips：桥梁模式还可以用于连接公开的API代码和私有的实现代码，还可以把多个类连接在一起。\n\n\n```js\n    // 错误的方式\n    // 这个API根据事件监听器回调函数的工作机制，事件对象被作为参数传递给这个函数。本例中并没有使用这个参数，而只是从this对象获取ID。\n\n    addEvent(element, 'click', getBeerById);\n    function getBeerById(e) {\n        var id = this.id;\n        asyncRequest('GET', 'beer.url?id=' + id, function (resp) {\n            //Callback response\n            console.log('Requested Beer: ' + resp.responseText);\n        });\n    }\n\n\n    // 好的方式\n    // 从逻辑上分析，把id传给getBeerById函数式合情理的，且回应结果总是通过一个回调函数返回。\n    // 这么理解，我们现在做的是针对接口而不是实现进行编程，用桥梁模式把抽象隔离开来。\n\n    function getBeerById(id, callback) {\n        asyncRequest('GET', 'beer.url?id=' + id, function (resp) {\n            callback(resp.responseText);\n        });\n    }\n\n    addEvent(element, 'click', getBeerByIdBridge);\n\n    function getBeerByIdBridge(e) {\n        getBeerById(this.id, function (beer) {\n            console.log('Requested Beer: ' + beer);\n        });\n    }\n```\n\n### 装饰者（Decorator）模式\n这个模式就是为对象增加功能(或方法)。\n\n动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。\n\n装饰者模式和组合模式有很多共同点，它们都与所包装的对象实现统一的接口并且会把任何方法条用传递给这些对象。可是组合模式用于把众多子对象组织为一个整体，而装饰者模式用于在不修改现有对象或从派生子类的前提下为其添加方法。\n\n装饰者的运作过程是透明的，这就是说你可以用它包装其他对象，然后继续按之前使用那个对象的方法来使用，从下面的例子中就可以看出。\n\n还是从代码中理解吧，\n\n```js\n    // 创建一个命名空间为myText.Decorations\n    var myText = {};\n    myText.Decorations = {};\n\n    myText.Core = function (myString) {\n        this.show = function () {\n            return myString;\n        }\n    };\n\n    // 第一次装饰\n    myText.Decorations.addQuestuibMark = function (myString) {\n        this.show = function () {\n            return myString.show() + '?';\n        };\n    };\n\n    // 第二次装饰\n    myText.Decorations.makeItalic = function (myString) {\n        this.show = function () {\n            return'<li>' + myString.show() + '</li>'\n        };\n    };\n\n    // 得到myText.Core的实例\n    var theString = new myText.Core('this is a sample test String');\n    alert(theString.show()); //output 'this is a sample test String'\n\n    theString = new myText.Decorations.addQuestuibMark(theString);\n    alert(theString.show()); //output 'this is a sample test String?'\n\n    theString = new myText.Decorations.makeItalic(theString);\n    alert(theString.show()); //output '<li>this is a sample test String</li>'\n```\n\n从这个示例中可以看出，这一切都可以不用事先知道组件对象的接口，甚至可以动态的实现，在为现有对象增添特性这方面，装饰者模式有极大的灵活性。\n\n如果需要为类增加特性或者方法，而从该类派生子类的解决办法并不实际的话，就应该使用装饰者模式。派生子类之所以会不实际最常见的原因是需要添加的特性或方法的数量要求使用大量子类。\n\n### 组合（Composite）模式\n将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。\n\n组合模式是一种专为创建Web上的动态用户界面而量身定制的模式。使用这种模式，可以用一条命令在多个对象上激发复杂的或递归的行为。组合模式擅长于对大批对象进行操作。\n\n组合模式的好处，\n\n程序员可以用同样的方法处理对象的集合与其中的特定子对象\n它可以用来把一批子对象组织成树形结构，并且使整棵树都可被便利\n组合模式适用范围，\n\n存在一批组织成某处层次体系的对象（具体结构可能在开发期间无法知道）\n希望对这批对象或其中的一部分对象实话一个操作\n其实组合模式就是将一系列相似或相近的对象组合在一个大的对象，由这个大对象提供一些常用的接口来对这些小对象进行操作，代码可重用，对外操作简单。例如：对form内的元素，不考虑页面设计的情况下，一般就剩下input了，对于这些input都有name和value的属性，因此可以将这些input元素作为form对象的成员组合起来，form对象提供对外的接口，便可以实现一些简单的操作，比如设置某个input的value，添加/删除某个input等等。\n\n这种模式描述起来比较吃力，我从《JS设计模式》上找个一个实例，大家还是看代码吧。\n\n先创建组合对象类，\n\n```js\n// DynamicGallery Class\nvar DynamicGallery = function (id) { // 实现Composite，GalleryItem组合对象类\n    this.children = [];\n    this.element = document.createElement('div');\n    this.element.id = id;\n    this.element.className = 'dynamic-gallery';\n};\n\nDynamicGallery.prototype = {\n    // 实现Composite组合对象接口\n    add: function (child) {\n        this.children.push(child);\n        this.element.appendChild(child.getElement());\n    },\n    remove: function (child) {\n        for (var node, i = 0; node = this.getChild(i); i++) {\n            if (node == child) {\n                this.children.splice(i, 1);\n                break;\n            }\n        }\n        this.element.removeChild(child.getElement());\n    },\n    getChild: function (i) {\n        return this.children[i];\n    },\n    // 实现DynamicGallery组合对象接口\n    hide: function () {\n        for (var node, i = 0; node = this.getChild(i); i++) {\n            node.hide();\n        }\n        this.element.style.display = 'none';\n    },\n    show: function () {\n        this.element.style.display = 'block';\n        for (var node, i = 0; node = getChild(i); i++) {\n            node.show();\n        }\n    },\n    // 帮助方法\n    getElement: function () {\n        return this.element;\n    }\n};\n```\n\n再创建叶对象类，\n\n```js\nvar GalleryImage = function (src) { // 实现Composite和GalleryItem组合对象中所定义的方法\n    this.element = document.createElement('img');\n    this.element.className = 'gallery-image';\n    this.element.src = src;\n};\n\nGalleryImage.prototype = {\n    // 实现Composite接口\n    // 这些是叶结点，所以我们不用实现这些方法，我们只需要定义即可\n    add: function () {\n    },\n    remove: function () {\n    },\n    getChild: function () {\n    },\n    // 实现GalleryItem接口\n    hide: function () {\n        this.element.style.display = 'none';\n    },\n    show: function () {\n        this.element.style.display = '';\n    },\n    // 帮助方法\n    getElement: function () {\n        return this.element;\n    }\n};\n```\n\n现在我们可以使用这两个类来管理图片，\n\n```js\nvar topGallery = new DynamicGallery('top-gallery');\n\ntopGallery.add(new GalleryImage('/img/image-1.jpg'));\ntopGallery.add(new GalleryImage('/img/image-2.jpg'));\ntopGallery.add(new GalleryImage('/img/image-3.jpg'));\n\nvar vacationPhotos = new DyamicGallery('vacation-photos');\n\nfor (var i = 0; i < 30; i++) {\n    vacationPhotos.add(new GalleryImage('/img/vac/image-' + i + '.jpg'));\n}\n\ntopGallery.add(vacationPhotos);\ntopGallery.show();\nvacationPhotos.hide();\n```\n\n\n### 门面（facade）模式\n门面模式是几乎所有JavaScript库的核心原则\n\n子系统中的一组接口提供一个一致的界面，门面模式定义了一个高层接口，这个接口使得这一子系统更加容易使用，简单的说这是一种组织性的模式，它可以用来修改类和对象的接口，使其更便于使用。\n\n门面模式的两个作用，\n\n简化类的接口\n消除类与使用它的客户代码之间的耦合\n门面模式的使用目的就是图方便。\n\n想象一下计算机桌面上的那些快捷方式图标，它们就是在扮演一个把用户引导至某个地方的接口的角色，每次操作都是间接的执行一些幕后的命令。\n\n你在看这篇的博客的时候我就假设你已经有JavaScript的使用经验了，那么你一定写过或者看过这样的代码，\n\n```js\nvar addEvent = function (el, type, fn) {\n    if (window.addEventListener) {\n        el.addEventListener(type, fn);\n    } else if (window.attachEvent) {\n        el.attachEvent('on' + type, fn);\n    } else {\n        el['on' + type] = fn;\n    }\n};\n```\n这个就是一个JavaScript中常见的事件监听器函数，这个函数就是一个基本的门面，有了它，就有了为DOM节点添加事件监听器的简便方法。\n\n现在要说门面模式的精华部分了，为什么说JavaScript库几乎都会用这种模式类。假如现在要设计一个库，那么最好把其中所有的工具元素放在一起，这样更好用，访问起来更简便。看代码，\n\n```js\n//_model.util是一个命名空间\n_myModel.util.Event = {\n    getEvent: function (e) {\n        return e || window.event;\n    },\n    getTarget: function (e) {\n        return e.target || e.srcElement;\n    },\n    preventDefault: function (e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    }\n};\n\n//事件工具大概就是这么一个套路，然后结合addEvent函数使用\naddEvent(document.getElementsByTagName('body')[0], 'click', function (e) {\n    alert(_myModel.util.Event.getTarget(e));\n});\n```\n\n个人认为，在处理游览器差异问题时最好的解决办法就是把这些差异抽取的门面方法中，这样可以提供一个更一致的接口，addEvent函数就是一个例子。\n\n### 适配置器（Adapter）模式\n将一个类的接口转换成客户希望的另外一个接口\n\n配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，使用这种模式的对象又叫包装器，因为他们是在用一个新的接口包装另一个对象。\n\n从表面上看，它和门面模式有点相似，差别在于它们如何改变接口，门面模式展现的是一个简化的接口，它并不提供额外的选择，而适配器模式则要把一个接口转换为另一个接口，它并不会滤除某些能力，也不会简化接口。\n\n先来一个简单的示例看看，\n\n```js\n//假如有一个3个字符串参数的函数，但是现在拥有的却是一个包含三个字符串元素的对象，那么就可以用一个配置器来衔接二者\nvar clientObject = {\n    str1: 'bat',\n    str2: 'foo',\n    str3: 'baz'\n};\n\nfunction interfaceMethod(str1, str2, str3) {\n    alert(str1);\n}\n\n//配置器函数\nfunction adapterMethod(o) {\n    interfaceMethod(o.str1, o.str2, o.str3);\n}\n\n//adapterMethod函数的作为就在于对interfaceMethod函数进行包装，并把传递给它的参数转换为后者需要的形式。\nadapterMethod(clientObject);\n```\n\n适配器模式的工作机制是：用一个新的接口对现有类得接口进行包装。\n\n示例：适配两个库。下面的例子要实现的是从Prototype库的$函数到YUI的get方法的转换。\n\n```js\n// 先看它们在接口方面的差别\n// Prototype $ function\n\nfunction $() {\n    var elements = new Array();\n    for (var i = 0; i < arguments.length; i++) {\n        var element = arguments[i];\n        if (typeof element == 'string') {\n            element = document.getElementById(element);\n        }\n//        if (typeof.length == 1) {\n//            return element;\n//        }\n        elements.push(element);\n    }\n\n    return elements;\n}\n\n// YUI get method\nYAHOO.util.Dom.get = function (el) {\n    if (YAHOO.lang.isString(el)) {\n        return document.getElementById(el);\n    }\n\n    if (YAHOO.lang.isArray(el)) {\n        var c = [];\n        for (var i = 0, len = el.length; i < len; ++i) {\n            c[c.length] = YAHOO.util.Dom.get(el[i]);\n        }\n        return c;\n    }\n\n    if (el) {\n        return el;\n    }\n\n    return null;\n};\n\n// 二者区别就在于get具有一个参数，且可以是HTML,字符串或者数组；而$木有正是的参数，允许使用者传入任意数目的参数，不管HTML还是字符串。\n// 如果需要从使用Prototype的$函数改为使用YUI的get方法（或者相反，那么用适配器模式其实很简单）\nfunction PrototypeToYUIAdapter() {\n    return YAHOO.util.Dom.get(arguments);\n}\n\nfunction YUIToPrototypeAdapter(el) {\n    return $.apply(window, el instanceof Array ? el : [el]);\n}\n```\n\n\n### 享元（Flyweight）模式\n运用共享技术有效地支持大量细粒度的对象。\n\n享元模式可以避免大量非常相似类的开销。在程序设计中有时需要生成大量细粒度的类实例来表示数据。如果发现这些实例除了几个参数外基本伤都是相同的，有时就能够受大幅度第减少需要实例化的类的数量。如果能把这些参数移到类实例外面，在方法调用时将他们传递进来，就可以通过共享大幅度地减少单个实例的数目。\n\n从实际出发说说自己的理解吧。\n\n组成部分，\n\n“享元”：抽离出来的外部操作和数据；\n“工厂”：创造对象的工厂；\n“存储器”：存储实例对象的对象或数组，供“享元”来统一控制和管理。\n应用场景，\n\n页面存在大量资源密集型对象；\n这些对象具备一定的共性，可以抽离出公用的操作和数据\n关键，\n\n合理划分内部和外部数据。既要保持每个对象的模块性、保证享元的独立、可维护，又要尽可能多的抽离外部数据。\n管理所有实例。既然抽离出了外部数据和操作，那享元就必须可以访问和控制实例对象。在JavaScript这种动态语言中，这个需求是很容易实现的：我们可以把工厂生产出的对象简单的扔在一个数组中。为每个对象设计暴露给外部的方法，便于享元的控制。\n优点，\n\n将能耗大的操作抽离成一个，在资源密集型系统中，可大大减少资源和内存占用；\n职责封装，这些操作独立修改和维护；\n缺点，\n\n增加了实现复杂度。 将原本由一个工厂方法实现的功能，修改为了一个享元 + 一个工厂 + 一个存储器。\n对象数量少的情况，可能会增大系统开销。\n示例，\n\n```js\n//汽车登记示例\nvar Car = function (make, model, year, owner, tag, renewDate) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n    this.owner = owner;\n    this.tag = tag;\n    this.renewDate = renewDate;\n}\n\nCar.prototype = {\n    getMake: function () {\n        return this.make;\n    },\n    getModel: function () {\n        return this.model;\n    },\n    getYear: function () {\n        return this.year;\n    },\n    transferOwner: function (owner, tag, renewDate) {\n        this.owner = owner;\n        this.tag = tag;\n        this.renewDate = renewDate;\n    },\n    renewRegistration: function (renewDate) {\n        this.renewDate = renewDate;\n    }\n}\n\n//数据量小到没多大的影响，数据量大的时候对计算机内存会产生压力，下面介绍享元模式优化后\n//包含核心数据的Car类\n\nvar Car = function (make, model, year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n};\n\nCar.prototype = {\n    getMake: function () {\n        return this.make;\n    },\n    getModel: function () {\n        return this.model;\n    },\n    getYear: function () {\n        return this.year;\n    }\n}\n\n//中间对象，用来实例化Car类\nvar CarFactory = (function () {\n    var createdCars = {};\n\n    return {\n        createCar: function (make, model, year) {\n            var car = createdCars[make + \"-\" + model + \"-\" + year];\n            return car ? car : createdCars[make + '-' + model + '-' + year] = (new Car(make, model, year));\n        }\n    };\n})();\n\n//数据工厂，用来处理Car的实例化和整合附加数据\nvar CarRecordManager = (function () {\n    var carRecordDatabase = {};\n\n    return {\n        addCarRecord: function (make, model, year, owner, tag, renewDate) {\n            var car = CarFactory.createCar(make, model, year);\n            carRecordDatabase[tag] = {\n                owner: owner,\n                tag: tag,\n                renewDate: renewDate,\n                car: car\n            }\n        },\n        transferOwnership: function (tag, newOwner, newTag, newRenewDate) {\n            var record = carRecordDatabase[tag];\n            record.owner = newOwner;\n            record.tag = newTag;\n            record.renewDate = newRenewDate;\n        },\n        renewRegistration: function (tag, newRenewDate) {\n            carRecordDatabase[tag].renewDate = newRenewDate;\n        },\n        getCarInfo: function (tag) {\n            return carRecordDatabase[tag];\n        }\n    };\n})();\n```\n\n### 代理（Proxy）模式\n此模式最基本的形式是对访问进行控制\n\n代理对象和另一个对象（本体）实现的是同样的接口，可是实际上工作还是本体在做，它才是负责执行所分派的任务的那个对象或类，代理对象不会在另以对象的基础上修改任何方法，也不会简化那个对象的接口。\n\n举一个具体的情况：如果那个对象在某个远端服务器上，直接操作这个对象因为网络速度原因可能比较慢，那我们可以先用Proxy来代替那个对象。\n\n总之对于开销较大的对象，只有在使用它时才创建，这个原则可以为我们节省很多内存。《JS设计模式》上的图书馆示例，\n\n```js\nvar Publication = new Interface('Publication', ['getIsbn', 'setIsbn', 'getTitle', 'setTitle', 'getAuthor', 'setAuthor', 'display']);\n\nvar Book = function (isbn, title, author) {\n    //...\n};\n\n// implements Publication\nimplements(Book, Publication);\n\n/* Library interface. */\nvar Library = new Interface('Library', ['findBooks', 'checkoutBook', 'returnBook']);\n\n/* PublicLibrary class. */\nvar PublicLibrary = function (books) {\n    //...\n};\n\n// implements Library\nimplements(PublicLibrary, Library);\n\nPublicLibrary.prototype = {\n    findBooks: function (searchString) {\n        //...\n    },\n    checkoutBook: function (book) {\n        //...\n    },\n    returnBook: function (book) {\n        //...\n    }\n};\n\n/* PublicLibraryProxy class, a useless proxy. */\nvar PublicLibraryProxy = function (catalog) {\n    this.library = new PublicLibrary(catalog);\n};\n\n// implements Library\nimplements(PublicLibraryProxy, Library);\n\nPublicLibraryProxy.prototype = {\n    findBooks: function (searchString) {\n        return this.library.findBooks(searchString);\n    },\n    checkoutBook: function (book) {\n        return this.library.checkoutBook(book);\n    },\n    returnBook: function (book) {\n        return this.library.returnBook(book);\n    }\n};\n```\n\n\n### 观察者（Observer）模式\n定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。\n\n观察者模式中存在两个角色,观察者和被观察者。在DOM的编程环境中的高级事件模式中，事件监听器说到底就是一种内置的观察者。事件处理器(handler)和时间监听器(listener)并不是一回事，前者就是一种把事件传给与其关联的函数的手段，而在后者中，一个时间可以与几个监听器关联，每个监听器都能独立于其他监听器而改变。\n\n```js\n//使用时间监听器可以让多个函数相应一个事件\nvar fn1 = function () {\n    //code\n};\nvar fn2 = function () {\n    //code\n};\n\naddEvent(element, 'click', fn1);\naddEvent(element, 'click', fn2);\n\n//而时间处理函数就办不到\nelement.onclick = fn1;\nelement.onclick = fn2;\n```\n\n观察者模式是开发基于行为的应用程序的有力手段，前端程序员可做的就是借助一个事件监听器替你处理各种行为，从而降低内存消耗和提高互动性能。\n\n```js\n// 用AngularJS实现观察者模式\n\nvar services = angular.module('services', []);\n\nservices.factory('ob', function() {\n    var exports,\n        channels = {};\n\n    exports = {\n        subscribe: function(topic, callback) {\n            if (!_.isArray(channels[topic])) {\n                channels[topic] = [];\n            }\n            var handlers = channels[topic];\n            handlers.push(callback);\n        },\n        unsubscribe: function(topic, callback) {\n            if (!_.isArray(channels[topic])) {\n                return;\n            }\n            var handlers = channels[topic];\n            var index = _.indexOf(handlers, callback);\n            if (index >= 0) {\n                handlers.splice(index, 1);\n            }\n        },\n        publish: function(topic, data) {\n            var self = this;\n            var handlers = channels[topic] || [];\n            _.each(handlers, function(handler) {\n                try {\n                    handler.apply(self, [data]);\n                } catch (ex) {\n                    console.log(ex);\n                }\n            });\n        }\n    };\n\n    return exports;\n});\n\n```\n上面就是观察者模式的核心实现。在实际项目中，可能会根据需求作一些微调。\n\n\n### 命令（Command）模式\n将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。\n\n命令对象是一个操作和用来调用这个操作的对象的结合体，所有的命名对象都有一个执行操作，其用途就是调用命令对象所绑定的操作。\n\n示例，\n\n```js\nvar Calculator = {\n    add: function (x, y) {\n        return x + y;\n    },\n    substract: function (x, y) {\n        return x - y;\n    },\n    multiply: function (x, y) {\n        return x * y;\n    },\n    divide: function (x, y) {\n        return x / y;\n    }\n};\n\nCalculator.calc = function (command) {\n    return Calculator[command.type](command.op1, command.opd2)\n};\n\nCalculator.calc({type: 'add', op1: 1, op2: 1});\nCalculator.calc({type: 'substract', op1: 5, op2: 2});\nCalculator.calc({type: 'multiply', op1: 5, op2: 2});\nCalculator.calc({type: 'divide', op1: 8, op2: 4});\n```\n\n命名模式的主要用途是把调用对象（用户界面，API和代理等）与实现操作的对象隔离开，也就是说使对象间的互动方式需要更高的模块化时都可以用到这种模式。\n\n\n### 职责链（Chain Of Responsibility）模式\n为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。\n\n职责链由多个不同类型的对象组成：发送者是发出请求的对象，而接收者则是接收请求并且对其进行处理或传递的对象，请求本身有时也是一个对象，它封装着与操作有关的所有数据。\n\n典型的流程大致是，\n\n发送者知道链中第一个接收者，它向这个接收者发出请求。\n每一个接收者都对请求进行分析，然后要么处理它，要么将其往下传。\n每一个接收者知道的其他对象只有一个，即它在链中的下家。\n如果没有任何接收者处理请求，那么请求将从链上离开，不同的实现对此也有不同的反应，一般会抛出一个错误。\n职责链模式的适用范围，\n\n有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定\n想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求\n可处理一个请求的对象集合需要被动态指定。\n确实对这种模式不了解，相关资料也较少，所以代码先不上了。看看大家对这个模式有木有什么好的理解或者能较好表达这种模式的代码，谢谢了。\n\n## 结束语\n每种模式都有自己的优缺点，所以每种模式的正确使用还得看开发人员本身的功力；\n就算不使用JavaScript设计模式一样可以写出复杂的可使用的代码，可是如果你想真正了解JavaScript面向对象能力，学习提高代码的模块化程度﹑可维护性﹑可靠性和效率，那么合理的运用JavaScript设计模式将会是一个优秀前端开发工程师必备的能力。\n- EOF -\n","slug":"javascript-design-pattern","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4v000a7rjlxk8v3x1e","content":"<p>本文系转载，来自<a href=\"http://www.cnblogs.com/Darren_code/\" target=\"_blank\" rel=\"external\">博客园-聂微东</a>。</p>\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><ul>\n<li>单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。<br>装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。</li>\n<li>门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。</li>\n<li>享元模式是一种以优化为目的的模式。</li>\n<li>代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。</li>\n<li>观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。</li>\n<li>命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。</li>\n<li>职责链模式用来消除请求的发送者和接收者之间的耦合。</li>\n</ul>\n<hr>\n<h2 id=\"JavaScript设计模式都有哪些？\"><a href=\"#JavaScript设计模式都有哪些？\" class=\"headerlink\" title=\"JavaScript设计模式都有哪些？\"></a>JavaScript设计模式都有哪些？</h2><h3 id=\"单体（Singleton）模式\"><a href=\"#单体（Singleton）模式\" class=\"headerlink\" title=\"单体（Singleton）模式\"></a>单体（Singleton）模式</h3><p>绝对是JavaScript中最基本最有用的模式</p>\n<p>单体在JavaScript的有多种用途，它用来划分命名空间。可以减少网页中全局变量的数量(在网页中使用全局变量有风险)；可以在多人开发时避免代码的冲突(使用合理的命名空间)等等。</p>\n<p>在中小型项目或者功能中，单体可以用作命名空间把自己的代码组织在一个全局变量名下；在稍大或者复杂的功能中，单体可以用来把相关代码组织在一起以便日后好维护。</p>\n<p>使用单体的方法就是用一个命名空间包含自己的所有代码的全局对象，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionGroup = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">'Darren'</span>,</div><div class=\"line\">    <span class=\"attr\">method1</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionGroup = myGroup()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Darren'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.method1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"工厂（Factory）模式\"><a href=\"#工厂（Factory）模式\" class=\"headerlink\" title=\"工厂（Factory）模式\"></a>工厂（Factory）模式</h3><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类</p>\n<p>工厂就是把成员对象的创建工作转交给一个外部对象，好处在于消除对象之间的耦合(何为耦合？就是相互影响)。通过使用工厂方法而不是new关键字及具体类，可以把所有实例化的代码都集中在一个位置，有助于创建模块化的代码，这才是工厂模式的目的和优势。</p>\n<p>举个例子，<br>你有一个大的功能要做，其中有一部分是要考虑扩展性的，那么这部分代码就可以考虑抽象出来，当做一个全新的对象做处理。好处就是将来扩展的时候容易维护 - 只需要操作这个对象内部方法和属性，达到了动态实现的目的。</p>\n<p>非常有名的一个示例 - XHR工厂，</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> XMLHttpFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\">　　　　　　<span class=\"comment\">//这是一个简单工厂模式</span></div><div class=\"line\"></div><div class=\"line\">XMLHttpFactory.createXMLHttp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    elseif(<span class=\"built_in\">window</span>.ActiveXObject)</div><div class=\"line\">    &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> XMLHttp;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> AjaxHander = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>工厂模式又区分简单工厂模式和抽象工厂模式，上面介绍的是简单工厂模式，这种模式用的更多也更简单易用。</p>\n<p>抽象工厂模式的使用方法就是 - 先设计一个抽象类，这个类不能被实例化，只能用来派生子类，最后通过对子类的扩展实现工厂方法。 示例，</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> XMLHttpFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//这是一个抽象工厂模式</span></div><div class=\"line\"></div><div class=\"line\">XMLHttpFactory.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类</span></div><div class=\"line\">    createFactory: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'This is an abstract class'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//派生子类，</span></div><div class=\"line\"><span class=\"keyword\">var</span> XHRHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    XMLHttpFactory.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">XHRHandler.prototype = <span class=\"keyword\">new</span> XMLHttpFactory();</div><div class=\"line\">XHRHandler.prototype.constructor = XHRHandler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//重新定义createFactory 方法</span></div><div class=\"line\">XHRHandler.prototype.createFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> XMLHttp;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"桥接（bridge）模式\"><a href=\"#桥接（bridge）模式\" class=\"headerlink\" title=\"桥接（bridge）模式\"></a>桥接（bridge）模式</h3><p>在实现API的时候，桥梁模式灰常有用。在所有模式中，这种模式最容易立即付诸实施</p>\n<p>桥梁模式可以用来弱化它与使用它的类和对象之间的耦合，就是将抽象与其实现隔离开来，以便二者独立变化；<br>这种模式对于JavaScript中常见的时间驱动的编程有很大益处，桥梁模式最常见和实际的应用场合之一是时间监听器回调函数。</p>\n<p>先分析一个不好的示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> setLogFunc();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>为什么说这个示例不好，因为从这段代码中无法看出那个LogFunc方法要显示在什么地方，它有什么可配置的选项以及应该怎么去修改它。</p>\n<p>换一种说法就是，桥梁模式的要诀就是让接口“可桥梁”，实际上也就是可配置。把页面中一个个功能都想象成模块，接口可以使得模块之间的耦合降低。</p>\n<p>掌握桥梁模式的正确使用收益的不只是你，还有那些负责维护你代码的人。把抽象于其实现隔离开，可独立地管理软件的各个部分，bug也因此更容易查找。</p>\n<p>桥梁模式目的就是让API更加健壮，提高组件的模块化程度，促成更简洁的实现，并提高抽象的灵活性。</p>\n<p>一个好的示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//API可控制性提高了，使得这个API更加健壮</span></div><div class=\"line\">    <span class=\"keyword\">new</span> someFunction(element, param, callback);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Tips：桥梁模式还可以用于连接公开的API代码和私有的实现代码，还可以把多个类连接在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的方式</span></div><div class=\"line\"><span class=\"comment\">// 这个API根据事件监听器回调函数的工作机制，事件对象被作为参数传递给这个函数。本例中并没有使用这个参数，而只是从this对象获取ID。</span></div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, getBeerById);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerById</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">this</span>.id;</div><div class=\"line\">    asyncRequest(<span class=\"string\">'GET'</span>, <span class=\"string\">'beer.url?id='</span> + id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Callback response</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Requested Beer: '</span> + resp.responseText);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 好的方式</span></div><div class=\"line\"><span class=\"comment\">// 从逻辑上分析，把id传给getBeerById函数式合情理的，且回应结果总是通过一个回调函数返回。</span></div><div class=\"line\"><span class=\"comment\">// 这么理解，我们现在做的是针对接口而不是实现进行编程，用桥梁模式把抽象隔离开来。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerById</span>(<span class=\"params\">id, callback</span>) </span>&#123;</div><div class=\"line\">    asyncRequest(<span class=\"string\">'GET'</span>, <span class=\"string\">'beer.url?id='</span> + id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">        callback(resp.responseText);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, getBeerByIdBridge);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerByIdBridge</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    getBeerById(<span class=\"keyword\">this</span>.id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Requested Beer: '</span> + beer);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"装饰者（Decorator）模式\"><a href=\"#装饰者（Decorator）模式\" class=\"headerlink\" title=\"装饰者（Decorator）模式\"></a>装饰者（Decorator）模式</h3><p>这个模式就是为对象增加功能(或方法)。</p>\n<p>动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。</p>\n<p>装饰者模式和组合模式有很多共同点，它们都与所包装的对象实现统一的接口并且会把任何方法条用传递给这些对象。可是组合模式用于把众多子对象组织为一个整体，而装饰者模式用于在不修改现有对象或从派生子类的前提下为其添加方法。</p>\n<p>装饰者的运作过程是透明的，这就是说你可以用它包装其他对象，然后继续按之前使用那个对象的方法来使用，从下面的例子中就可以看出。</p>\n<p>还是从代码中理解吧，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个命名空间为myText.Decorations</span></div><div class=\"line\"><span class=\"keyword\">var</span> myText = &#123;&#125;;</div><div class=\"line\">myText.Decorations = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myText.Core = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> myString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第一次装饰</span></div><div class=\"line\">myText.Decorations.addQuestuibMark = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> myString.show() + <span class=\"string\">'?'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第二次装饰</span></div><div class=\"line\">myText.Decorations.makeItalic = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span><span class=\"string\">'&lt;li&gt;'</span> + myString.show() + <span class=\"string\">'&lt;/li&gt;'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到myText.Core的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> theString = <span class=\"keyword\">new</span> myText.Core(<span class=\"string\">'this is a sample test String'</span>);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output 'this is a sample test String'</span></div><div class=\"line\"></div><div class=\"line\">theString = <span class=\"keyword\">new</span> myText.Decorations.addQuestuibMark(theString);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output 'this is a sample test String?'</span></div><div class=\"line\"></div><div class=\"line\">theString = <span class=\"keyword\">new</span> myText.Decorations.makeItalic(theString);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output '&lt;li&gt;this is a sample test String&lt;/li&gt;'</span></div></pre></td></tr></table></figure>\n<p>从这个示例中可以看出，这一切都可以不用事先知道组件对象的接口，甚至可以动态的实现，在为现有对象增添特性这方面，装饰者模式有极大的灵活性。</p>\n<p>如果需要为类增加特性或者方法，而从该类派生子类的解决办法并不实际的话，就应该使用装饰者模式。派生子类之所以会不实际最常见的原因是需要添加的特性或方法的数量要求使用大量子类。</p>\n<h3 id=\"组合（Composite）模式\"><a href=\"#组合（Composite）模式\" class=\"headerlink\" title=\"组合（Composite）模式\"></a>组合（Composite）模式</h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</p>\n<p>组合模式是一种专为创建Web上的动态用户界面而量身定制的模式。使用这种模式，可以用一条命令在多个对象上激发复杂的或递归的行为。组合模式擅长于对大批对象进行操作。</p>\n<p>组合模式的好处，</p>\n<p>程序员可以用同样的方法处理对象的集合与其中的特定子对象<br>它可以用来把一批子对象组织成树形结构，并且使整棵树都可被便利<br>组合模式适用范围，</p>\n<p>存在一批组织成某处层次体系的对象（具体结构可能在开发期间无法知道）<br>希望对这批对象或其中的一部分对象实话一个操作<br>其实组合模式就是将一系列相似或相近的对象组合在一个大的对象，由这个大对象提供一些常用的接口来对这些小对象进行操作，代码可重用，对外操作简单。例如：对form内的元素，不考虑页面设计的情况下，一般就剩下input了，对于这些input都有name和value的属性，因此可以将这些input元素作为form对象的成员组合起来，form对象提供对外的接口，便可以实现一些简单的操作，比如设置某个input的value，添加/删除某个input等等。</p>\n<p>这种模式描述起来比较吃力，我从《JS设计模式》上找个一个实例，大家还是看代码吧。</p>\n<p>先创建组合对象类，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DynamicGallery Class</span></div><div class=\"line\"><span class=\"keyword\">var</span> DynamicGallery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123; <span class=\"comment\">// 实现Composite，GalleryItem组合对象类</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.id = id;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'dynamic-gallery'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">DynamicGallery.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 实现Composite组合对象接口</span></div><div class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(child);</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.appendChild(child.getElement());</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = <span class=\"keyword\">this</span>.getChild(i); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (node == child) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.removeChild(child.getElement());</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getChild</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[i];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实现DynamicGallery组合对象接口</span></div><div class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = <span class=\"keyword\">this</span>.getChild(i); i++) &#123;</div><div class=\"line\">            node.hide();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'block'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = getChild(i); i++) &#123;</div><div class=\"line\">            node.show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 帮助方法</span></div><div class=\"line\">    getElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>再创建叶对象类，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> GalleryImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123; <span class=\"comment\">// 实现Composite和GalleryItem组合对象中所定义的方法</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'gallery-image'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.src = src;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">GalleryImage.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 实现Composite接口</span></div><div class=\"line\">    <span class=\"comment\">// 这些是叶结点，所以我们不用实现这些方法，我们只需要定义即可</span></div><div class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getChild</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实现GalleryItem接口</span></div><div class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 帮助方法</span></div><div class=\"line\">    getElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们可以使用这两个类来管理图片，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> topGallery = <span class=\"keyword\">new</span> DynamicGallery(<span class=\"string\">'top-gallery'</span>);</div><div class=\"line\"></div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-1.jpg'</span>));</div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-2.jpg'</span>));</div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-3.jpg'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vacationPhotos = <span class=\"keyword\">new</span> DyamicGallery(<span class=\"string\">'vacation-photos'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</div><div class=\"line\">    vacationPhotos.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/vac/image-'</span> + i + <span class=\"string\">'.jpg'</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">topGallery.add(vacationPhotos);</div><div class=\"line\">topGallery.show();</div><div class=\"line\">vacationPhotos.hide();</div></pre></td></tr></table></figure>\n<h3 id=\"门面（facade）模式\"><a href=\"#门面（facade）模式\" class=\"headerlink\" title=\"门面（facade）模式\"></a>门面（facade）模式</h3><p>门面模式是几乎所有JavaScript库的核心原则</p>\n<p>子系统中的一组接口提供一个一致的界面，门面模式定义了一个高层接口，这个接口使得这一子系统更加容易使用，简单的说这是一种组织性的模式，它可以用来修改类和对象的接口，使其更便于使用。</p>\n<p>门面模式的两个作用，</p>\n<p>简化类的接口<br>消除类与使用它的客户代码之间的耦合<br>门面模式的使用目的就是图方便。</p>\n<p>想象一下计算机桌面上的那些快捷方式图标，它们就是在扮演一个把用户引导至某个地方的接口的角色，每次操作都是间接的执行一些幕后的命令。</p>\n<p>你在看这篇的博客的时候我就假设你已经有JavaScript的使用经验了，那么你一定写过或者看过这样的代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">        el.addEventListener(type, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个就是一个JavaScript中常见的事件监听器函数，这个函数就是一个基本的门面，有了它，就有了为DOM节点添加事件监听器的简便方法。</p>\n<p>现在要说门面模式的精华部分了，为什么说JavaScript库几乎都会用这种模式类。假如现在要设计一个库，那么最好把其中所有的工具元素放在一起，这样更好用，访问起来更简便。看代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_model.util是一个命名空间</span></div><div class=\"line\">_myModel.util.Event = &#123;</div><div class=\"line\">    <span class=\"attr\">getEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getTarget</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e.target || e.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">preventDefault</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.preventDefault) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件工具大概就是这么一个套路，然后结合addEvent函数使用</span></div><div class=\"line\">addEvent(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>], <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    alert(_myModel.util.Event.getTarget(e));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>个人认为，在处理游览器差异问题时最好的解决办法就是把这些差异抽取的门面方法中，这样可以提供一个更一致的接口，addEvent函数就是一个例子。</p>\n<h3 id=\"适配置器（Adapter）模式\"><a href=\"#适配置器（Adapter）模式\" class=\"headerlink\" title=\"适配置器（Adapter）模式\"></a>适配置器（Adapter）模式</h3><p>将一个类的接口转换成客户希望的另外一个接口</p>\n<p>配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，使用这种模式的对象又叫包装器，因为他们是在用一个新的接口包装另一个对象。</p>\n<p>从表面上看，它和门面模式有点相似，差别在于它们如何改变接口，门面模式展现的是一个简化的接口，它并不提供额外的选择，而适配器模式则要把一个接口转换为另一个接口，它并不会滤除某些能力，也不会简化接口。</p>\n<p>先来一个简单的示例看看，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//假如有一个3个字符串参数的函数，但是现在拥有的却是一个包含三个字符串元素的对象，那么就可以用一个配置器来衔接二者</span></div><div class=\"line\"><span class=\"keyword\">var</span> clientObject = &#123;</div><div class=\"line\">    <span class=\"attr\">str1</span>: <span class=\"string\">'bat'</span>,</div><div class=\"line\">    <span class=\"attr\">str2</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    <span class=\"attr\">str3</span>: <span class=\"string\">'baz'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interfaceMethod</span>(<span class=\"params\">str1, str2, str3</span>) </span>&#123;</div><div class=\"line\">    alert(str1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置器函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adapterMethod</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    interfaceMethod(o.str1, o.str2, o.str3);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//adapterMethod函数的作为就在于对interfaceMethod函数进行包装，并把传递给它的参数转换为后者需要的形式。</span></div><div class=\"line\">adapterMethod(clientObject);</div></pre></td></tr></table></figure>\n<p>适配器模式的工作机制是：用一个新的接口对现有类得接口进行包装。</p>\n<p>示例：适配两个库。下面的例子要实现的是从Prototype库的$函数到YUI的get方法的转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先看它们在接口方面的差别</span></div><div class=\"line\"><span class=\"comment\">// Prototype $ function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> elements = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> element == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            element = <span class=\"built_in\">document</span>.getElementById(element);</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        if (typeof.length == 1) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            return element;</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">        elements.push(element);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> elements;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// YUI get method</span></div><div class=\"line\">YAHOO.util.Dom.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (YAHOO.lang.isString(el)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(el);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (YAHOO.lang.isArray(el)) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = el.length; i &lt; len; ++i) &#123;</div><div class=\"line\">            c[c.length] = YAHOO.util.Dom.get(el[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (el) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二者区别就在于get具有一个参数，且可以是HTML,字符串或者数组；而$木有正是的参数，允许使用者传入任意数目的参数，不管HTML还是字符串。</span></div><div class=\"line\"><span class=\"comment\">// 如果需要从使用Prototype的$函数改为使用YUI的get方法（或者相反，那么用适配器模式其实很简单）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrototypeToYUIAdapter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> YAHOO.util.Dom.get(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">YUIToPrototypeAdapter</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $.apply(<span class=\"built_in\">window</span>, el <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? el : [el]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"享元（Flyweight）模式\"><a href=\"#享元（Flyweight）模式\" class=\"headerlink\" title=\"享元（Flyweight）模式\"></a>享元（Flyweight）模式</h3><p>运用共享技术有效地支持大量细粒度的对象。</p>\n<p>享元模式可以避免大量非常相似类的开销。在程序设计中有时需要生成大量细粒度的类实例来表示数据。如果发现这些实例除了几个参数外基本伤都是相同的，有时就能够受大幅度第减少需要实例化的类的数量。如果能把这些参数移到类实例外面，在方法调用时将他们传递进来，就可以通过共享大幅度地减少单个实例的数目。</p>\n<p>从实际出发说说自己的理解吧。</p>\n<p>组成部分，</p>\n<p>“享元”：抽离出来的外部操作和数据；<br>“工厂”：创造对象的工厂；<br>“存储器”：存储实例对象的对象或数组，供“享元”来统一控制和管理。<br>应用场景，</p>\n<p>页面存在大量资源密集型对象；<br>这些对象具备一定的共性，可以抽离出公用的操作和数据<br>关键，</p>\n<p>合理划分内部和外部数据。既要保持每个对象的模块性、保证享元的独立、可维护，又要尽可能多的抽离外部数据。<br>管理所有实例。既然抽离出了外部数据和操作，那享元就必须可以访问和控制实例对象。在JavaScript这种动态语言中，这个需求是很容易实现的：我们可以把工厂生产出的对象简单的扔在一个数组中。为每个对象设计暴露给外部的方法，便于享元的控制。<br>优点，</p>\n<p>将能耗大的操作抽离成一个，在资源密集型系统中，可大大减少资源和内存占用；<br>职责封装，这些操作独立修改和维护；<br>缺点，</p>\n<p>增加了实现复杂度。 将原本由一个工厂方法实现的功能，修改为了一个享元 + 一个工厂 + 一个存储器。<br>对象数量少的情况，可能会增大系统开销。<br>示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//汽车登记示例</span></div><div class=\"line\"><span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year, owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.make = make;</div><div class=\"line\">    <span class=\"keyword\">this</span>.model = model;</div><div class=\"line\">    <span class=\"keyword\">this</span>.year = year;</div><div class=\"line\">    <span class=\"keyword\">this</span>.owner = owner;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tag = tag;</div><div class=\"line\">    <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getMake</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.make;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getModel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getYear</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.year;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">transferOwner</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.owner = owner;</div><div class=\"line\">        <span class=\"keyword\">this</span>.tag = tag;</div><div class=\"line\">        <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renewRegistration</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">renewDate</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数据量小到没多大的影响，数据量大的时候对计算机内存会产生压力，下面介绍享元模式优化后</span></div><div class=\"line\"><span class=\"comment\">//包含核心数据的Car类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.make = make;</div><div class=\"line\">    <span class=\"keyword\">this</span>.model = model;</div><div class=\"line\">    <span class=\"keyword\">this</span>.year = year;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getMake</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.make;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getModel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getYear</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.year;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//中间对象，用来实例化Car类</span></div><div class=\"line\"><span class=\"keyword\">var</span> CarFactory = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> createdCars = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">createCar</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> car = createdCars[make + <span class=\"string\">\"-\"</span> + model + <span class=\"string\">\"-\"</span> + year];</div><div class=\"line\">            <span class=\"keyword\">return</span> car ? car : createdCars[make + <span class=\"string\">'-'</span> + model + <span class=\"string\">'-'</span> + year] = (<span class=\"keyword\">new</span> Car(make, model, year));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数据工厂，用来处理Car的实例化和整合附加数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> CarRecordManager = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> carRecordDatabase = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">addCarRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year, owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> car = CarFactory.createCar(make, model, year);</div><div class=\"line\">            carRecordDatabase[tag] = &#123;</div><div class=\"line\">                <span class=\"attr\">owner</span>: owner,</div><div class=\"line\">                <span class=\"attr\">tag</span>: tag,</div><div class=\"line\">                <span class=\"attr\">renewDate</span>: renewDate,</div><div class=\"line\">                <span class=\"attr\">car</span>: car</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">transferOwnership</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag, newOwner, newTag, newRenewDate</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> record = carRecordDatabase[tag];</div><div class=\"line\">            record.owner = newOwner;</div><div class=\"line\">            record.tag = newTag;</div><div class=\"line\">            record.renewDate = newRenewDate;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">renewRegistration</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag, newRenewDate</span>) </span>&#123;</div><div class=\"line\">            carRecordDatabase[tag].renewDate = newRenewDate;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">getCarInfo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> carRecordDatabase[tag];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h3 id=\"代理（Proxy）模式\"><a href=\"#代理（Proxy）模式\" class=\"headerlink\" title=\"代理（Proxy）模式\"></a>代理（Proxy）模式</h3><p>此模式最基本的形式是对访问进行控制</p>\n<p>代理对象和另一个对象（本体）实现的是同样的接口，可是实际上工作还是本体在做，它才是负责执行所分派的任务的那个对象或类，代理对象不会在另以对象的基础上修改任何方法，也不会简化那个对象的接口。</p>\n<p>举一个具体的情况：如果那个对象在某个远端服务器上，直接操作这个对象因为网络速度原因可能比较慢，那我们可以先用Proxy来代替那个对象。</p>\n<p>总之对于开销较大的对象，只有在使用它时才创建，这个原则可以为我们节省很多内存。《JS设计模式》上的图书馆示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Publication = <span class=\"keyword\">new</span> Interface(<span class=\"string\">'Publication'</span>, [<span class=\"string\">'getIsbn'</span>, <span class=\"string\">'setIsbn'</span>, <span class=\"string\">'getTitle'</span>, <span class=\"string\">'setTitle'</span>, <span class=\"string\">'getAuthor'</span>, <span class=\"string\">'setAuthor'</span>, <span class=\"string\">'display'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Book = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">isbn, title, author</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Publication</span></div><div class=\"line\">implements(Book, Publication);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* Library interface. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Library = <span class=\"keyword\">new</span> Interface(<span class=\"string\">'Library'</span>, [<span class=\"string\">'findBooks'</span>, <span class=\"string\">'checkoutBook'</span>, <span class=\"string\">'returnBook'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* PublicLibrary class. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> PublicLibrary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">books</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Library</span></div><div class=\"line\">implements(PublicLibrary, Library);</div><div class=\"line\"></div><div class=\"line\">PublicLibrary.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">findBooks</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">searchString</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkoutBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">returnBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* PublicLibraryProxy class, a useless proxy. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> PublicLibraryProxy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">catalog</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.library = <span class=\"keyword\">new</span> PublicLibrary(catalog);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Library</span></div><div class=\"line\">implements(PublicLibraryProxy, Library);</div><div class=\"line\"></div><div class=\"line\">PublicLibraryProxy.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">findBooks</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">searchString</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.findBooks(searchString);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkoutBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.checkoutBook(book);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">returnBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.returnBook(book);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"观察者（Observer）模式\"><a href=\"#观察者（Observer）模式\" class=\"headerlink\" title=\"观察者（Observer）模式\"></a>观察者（Observer）模式</h3><p>定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</p>\n<p>观察者模式中存在两个角色,观察者和被观察者。在DOM的编程环境中的高级事件模式中，事件监听器说到底就是一种内置的观察者。事件处理器(handler)和时间监听器(listener)并不是一回事，前者就是一种把事件传给与其关联的函数的手段，而在后者中，一个时间可以与几个监听器关联，每个监听器都能独立于其他监听器而改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用时间监听器可以让多个函数相应一个事件</span></div><div class=\"line\"><span class=\"keyword\">var</span> fn1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//code</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//code</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, fn1);</div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, fn2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//而时间处理函数就办不到</span></div><div class=\"line\">element.onclick = fn1;</div><div class=\"line\">element.onclick = fn2;</div></pre></td></tr></table></figure>\n<p>观察者模式是开发基于行为的应用程序的有力手段，前端程序员可做的就是借助一个事件监听器替你处理各种行为，从而降低内存消耗和提高互动性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 用AngularJS实现观察者模式</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> services = angular.module(<span class=\"string\">'services'</span>, []);</div><div class=\"line\"></div><div class=\"line\">services.factory(<span class=\"string\">'ob'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> exports,</div><div class=\"line\">        channels = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    exports = &#123;</div><div class=\"line\">        <span class=\"attr\">subscribe</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!_.isArray(channels[topic])) &#123;</div><div class=\"line\">                channels[topic] = [];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic];</div><div class=\"line\">            handlers.push(callback);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">unsubscribe</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!_.isArray(channels[topic])) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = _.indexOf(handlers, callback);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                handlers.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">publish</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic] || [];</div><div class=\"line\">            _.each(handlers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">handler</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    handler.apply(self, [data]);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(ex);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> exports;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面就是观察者模式的核心实现。在实际项目中，可能会根据需求作一些微调。</p>\n<h3 id=\"命令（Command）模式\"><a href=\"#命令（Command）模式\" class=\"headerlink\" title=\"命令（Command）模式\"></a>命令（Command）模式</h3><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p>\n<p>命令对象是一个操作和用来调用这个操作的对象的结合体，所有的命名对象都有一个执行操作，其用途就是调用命令对象所绑定的操作。</p>\n<p>示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Calculator = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">substract</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x - y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">multiply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x * y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">divide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x / y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Calculator.calc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Calculator[command.type](command.op1, command.opd2)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'add'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">1</span>, <span class=\"attr\">op2</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'substract'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">5</span>, <span class=\"attr\">op2</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'multiply'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">5</span>, <span class=\"attr\">op2</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'divide'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">8</span>, <span class=\"attr\">op2</span>: <span class=\"number\">4</span>&#125;);</div></pre></td></tr></table></figure>\n<p>命名模式的主要用途是把调用对象（用户界面，API和代理等）与实现操作的对象隔离开，也就是说使对象间的互动方式需要更高的模块化时都可以用到这种模式。</p>\n<h3 id=\"职责链（Chain-Of-Responsibility）模式\"><a href=\"#职责链（Chain-Of-Responsibility）模式\" class=\"headerlink\" title=\"职责链（Chain Of Responsibility）模式\"></a>职责链（Chain Of Responsibility）模式</h3><p>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p>\n<p>职责链由多个不同类型的对象组成：发送者是发出请求的对象，而接收者则是接收请求并且对其进行处理或传递的对象，请求本身有时也是一个对象，它封装着与操作有关的所有数据。</p>\n<p>典型的流程大致是，</p>\n<p>发送者知道链中第一个接收者，它向这个接收者发出请求。<br>每一个接收者都对请求进行分析，然后要么处理它，要么将其往下传。<br>每一个接收者知道的其他对象只有一个，即它在链中的下家。<br>如果没有任何接收者处理请求，那么请求将从链上离开，不同的实现对此也有不同的反应，一般会抛出一个错误。<br>职责链模式的适用范围，</p>\n<p>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定<br>想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求<br>可处理一个请求的对象集合需要被动态指定。<br>确实对这种模式不了解，相关资料也较少，所以代码先不上了。看看大家对这个模式有木有什么好的理解或者能较好表达这种模式的代码，谢谢了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>每种模式都有自己的优缺点，所以每种模式的正确使用还得看开发人员本身的功力；<br>就算不使用JavaScript设计模式一样可以写出复杂的可使用的代码，可是如果你想真正了解JavaScript面向对象能力，学习提高代码的模块化程度﹑可维护性﹑可靠性和效率，那么合理的运用JavaScript设计模式将会是一个优秀前端开发工程师必备的能力。</p>\n<ul>\n<li>EOF -</li>\n</ul>\n","excerpt":"","more":"<p>本文系转载，来自<a href=\"http://www.cnblogs.com/Darren_code/\">博客园-聂微东</a>。</p>\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><ul>\n<li>单体模式，工厂模式，桥梁模式个人认为这个一个优秀前端必须掌握的模式，对抽象编程和接口编程都非常有好处。<br>装饰者模式和组合模式有很多相似的地方，它们都与所包装的对象实现同样的接口并且会把任何方法的调用传递给这些对象。装饰者模式和组合模式是本人描述的较吃力的两个模式，我个人其实也没用过，所以查了很多相关资料和文档，请大家海涵。</li>\n<li>门面模式是个非常有意思的模式，几乎所有的JavaScript库都会用到这个模式，假如你有逆向思维或者逆向编程的经验，你会更容易理解这个模式（听起来有挑战，其实一接触你就知道这是个很简单的模式）；还有配置器模式得和门面模式一块拿来说，这个模式对现有接口进行包装，合理运用可以很多程度上提高开发效率。这两个模式有相似的地方，所以一块理解的话相信都会很快上手的。</li>\n<li>享元模式是一种以优化为目的的模式。</li>\n<li>代理模式主要用于控制对象的访问，包括推迟对其创建需要耗用大量计算资源的类得实例化。</li>\n<li>观察者模式用于对对象的状态进行观察，并且当它发生变化时能得到通知的方法。用于让对象对事件进行监听以便对其作出响应。观察者模式也被称为“订阅者模式”。</li>\n<li>命令模式是对方法调用进行封装的方式，用命名模式可以对方法调用进行参数化和传递，然后在需要的时候再加以执行。</li>\n<li>职责链模式用来消除请求的发送者和接收者之间的耦合。</li>\n</ul>\n<hr>\n<h2 id=\"JavaScript设计模式都有哪些？\"><a href=\"#JavaScript设计模式都有哪些？\" class=\"headerlink\" title=\"JavaScript设计模式都有哪些？\"></a>JavaScript设计模式都有哪些？</h2><h3 id=\"单体（Singleton）模式\"><a href=\"#单体（Singleton）模式\" class=\"headerlink\" title=\"单体（Singleton）模式\"></a>单体（Singleton）模式</h3><p>绝对是JavaScript中最基本最有用的模式</p>\n<p>单体在JavaScript的有多种用途，它用来划分命名空间。可以减少网页中全局变量的数量(在网页中使用全局变量有风险)；可以在多人开发时避免代码的冲突(使用合理的命名空间)等等。</p>\n<p>在中小型项目或者功能中，单体可以用作命名空间把自己的代码组织在一个全局变量名下；在稍大或者复杂的功能中，单体可以用来把相关代码组织在一起以便日后好维护。</p>\n<p>使用单体的方法就是用一个命名空间包含自己的所有代码的全局对象，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionGroup = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">'Darren'</span>,</div><div class=\"line\">    <span class=\"attr\">method1</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">init</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//code</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionGroup = myGroup()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Darren'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.method1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"工厂（Factory）模式\"><a href=\"#工厂（Factory）模式\" class=\"headerlink\" title=\"工厂（Factory）模式\"></a>工厂（Factory）模式</h3><p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类</p>\n<p>工厂就是把成员对象的创建工作转交给一个外部对象，好处在于消除对象之间的耦合(何为耦合？就是相互影响)。通过使用工厂方法而不是new关键字及具体类，可以把所有实例化的代码都集中在一个位置，有助于创建模块化的代码，这才是工厂模式的目的和优势。</p>\n<p>举个例子，<br>你有一个大的功能要做，其中有一部分是要考虑扩展性的，那么这部分代码就可以考虑抽象出来，当做一个全新的对象做处理。好处就是将来扩展的时候容易维护 - 只需要操作这个对象内部方法和属性，达到了动态实现的目的。</p>\n<p>非常有名的一个示例 - XHR工厂，</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> XMLHttpFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;;</div><div class=\"line\">　　　　　　<span class=\"comment\">//这是一个简单工厂模式</span></div><div class=\"line\"></div><div class=\"line\">XMLHttpFactory.createXMLHttp = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    elseif(<span class=\"built_in\">window</span>.ActiveXObject)</div><div class=\"line\">    &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> XMLHttp;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//XMLHttpFactory.createXMLHttp()这个方法根据当前环境的具体情况返回一个XHR对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> AjaxHander = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = XMLHttpFactory.createXMLHttp();</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>工厂模式又区分简单工厂模式和抽象工厂模式，上面介绍的是简单工厂模式，这种模式用的更多也更简单易用。</p>\n<p>抽象工厂模式的使用方法就是 - 先设计一个抽象类，这个类不能被实例化，只能用来派生子类，最后通过对子类的扩展实现工厂方法。 示例，</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> XMLHttpFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//这是一个抽象工厂模式</span></div><div class=\"line\"></div><div class=\"line\">XMLHttpFactory.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类</span></div><div class=\"line\">    createFactory: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'This is an abstract class'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//派生子类，</span></div><div class=\"line\"><span class=\"keyword\">var</span> XHRHandler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    XMLHttpFactory.call(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">XHRHandler.prototype = <span class=\"keyword\">new</span> XMLHttpFactory();</div><div class=\"line\">XHRHandler.prototype.constructor = XHRHandler;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//重新定义createFactory 方法</span></div><div class=\"line\">XHRHandler.prototype.createFactory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> XMLHttp = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        XMLHttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> XMLHttp;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"桥接（bridge）模式\"><a href=\"#桥接（bridge）模式\" class=\"headerlink\" title=\"桥接（bridge）模式\"></a>桥接（bridge）模式</h3><p>在实现API的时候，桥梁模式灰常有用。在所有模式中，这种模式最容易立即付诸实施</p>\n<p>桥梁模式可以用来弱化它与使用它的类和对象之间的耦合，就是将抽象与其实现隔离开来，以便二者独立变化；<br>这种模式对于JavaScript中常见的时间驱动的编程有很大益处，桥梁模式最常见和实际的应用场合之一是时间监听器回调函数。</p>\n<p>先分析一个不好的示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> setLogFunc();</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>为什么说这个示例不好，因为从这段代码中无法看出那个LogFunc方法要显示在什么地方，它有什么可配置的选项以及应该怎么去修改它。</p>\n<p>换一种说法就是，桥梁模式的要诀就是让接口“可桥梁”，实际上也就是可配置。把页面中一个个功能都想象成模块，接口可以使得模块之间的耦合降低。</p>\n<p>掌握桥梁模式的正确使用收益的不只是你，还有那些负责维护你代码的人。把抽象于其实现隔离开，可独立地管理软件的各个部分，bug也因此更容易查找。</p>\n<p>桥梁模式目的就是让API更加健壮，提高组件的模块化程度，促成更简洁的实现，并提高抽象的灵活性。</p>\n<p>一个好的示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">element.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//API可控制性提高了，使得这个API更加健壮</span></div><div class=\"line\">    <span class=\"keyword\">new</span> someFunction(element, param, callback);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Tips：桥梁模式还可以用于连接公开的API代码和私有的实现代码，还可以把多个类连接在一起。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的方式</span></div><div class=\"line\"><span class=\"comment\">// 这个API根据事件监听器回调函数的工作机制，事件对象被作为参数传递给这个函数。本例中并没有使用这个参数，而只是从this对象获取ID。</span></div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, getBeerById);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerById</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">this</span>.id;</div><div class=\"line\">    asyncRequest(<span class=\"string\">'GET'</span>, <span class=\"string\">'beer.url?id='</span> + id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//Callback response</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Requested Beer: '</span> + resp.responseText);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 好的方式</span></div><div class=\"line\"><span class=\"comment\">// 从逻辑上分析，把id传给getBeerById函数式合情理的，且回应结果总是通过一个回调函数返回。</span></div><div class=\"line\"><span class=\"comment\">// 这么理解，我们现在做的是针对接口而不是实现进行编程，用桥梁模式把抽象隔离开来。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerById</span>(<span class=\"params\">id, callback</span>) </span>&#123;</div><div class=\"line\">    asyncRequest(<span class=\"string\">'GET'</span>, <span class=\"string\">'beer.url?id='</span> + id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) </span>&#123;</div><div class=\"line\">        callback(resp.responseText);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, getBeerByIdBridge);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBeerByIdBridge</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    getBeerById(<span class=\"keyword\">this</span>.id, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">beer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Requested Beer: '</span> + beer);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"装饰者（Decorator）模式\"><a href=\"#装饰者（Decorator）模式\" class=\"headerlink\" title=\"装饰者（Decorator）模式\"></a>装饰者（Decorator）模式</h3><p>这个模式就是为对象增加功能(或方法)。</p>\n<p>动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。</p>\n<p>装饰者模式和组合模式有很多共同点，它们都与所包装的对象实现统一的接口并且会把任何方法条用传递给这些对象。可是组合模式用于把众多子对象组织为一个整体，而装饰者模式用于在不修改现有对象或从派生子类的前提下为其添加方法。</p>\n<p>装饰者的运作过程是透明的，这就是说你可以用它包装其他对象，然后继续按之前使用那个对象的方法来使用，从下面的例子中就可以看出。</p>\n<p>还是从代码中理解吧，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 创建一个命名空间为myText.Decorations</span></div><div class=\"line\"><span class=\"keyword\">var</span> myText = &#123;&#125;;</div><div class=\"line\">myText.Decorations = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myText.Core = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> myString;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第一次装饰</span></div><div class=\"line\">myText.Decorations.addQuestuibMark = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> myString.show() + <span class=\"string\">'?'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 第二次装饰</span></div><div class=\"line\">myText.Decorations.makeItalic = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">myString</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span><span class=\"string\">'&lt;li&gt;'</span> + myString.show() + <span class=\"string\">'&lt;/li&gt;'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到myText.Core的实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> theString = <span class=\"keyword\">new</span> myText.Core(<span class=\"string\">'this is a sample test String'</span>);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output 'this is a sample test String'</span></div><div class=\"line\"></div><div class=\"line\">theString = <span class=\"keyword\">new</span> myText.Decorations.addQuestuibMark(theString);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output 'this is a sample test String?'</span></div><div class=\"line\"></div><div class=\"line\">theString = <span class=\"keyword\">new</span> myText.Decorations.makeItalic(theString);</div><div class=\"line\">alert(theString.show()); <span class=\"comment\">//output '&lt;li&gt;this is a sample test String&lt;/li&gt;'</span></div></pre></td></tr></table></figure>\n<p>从这个示例中可以看出，这一切都可以不用事先知道组件对象的接口，甚至可以动态的实现，在为现有对象增添特性这方面，装饰者模式有极大的灵活性。</p>\n<p>如果需要为类增加特性或者方法，而从该类派生子类的解决办法并不实际的话，就应该使用装饰者模式。派生子类之所以会不实际最常见的原因是需要添加的特性或方法的数量要求使用大量子类。</p>\n<h3 id=\"组合（Composite）模式\"><a href=\"#组合（Composite）模式\" class=\"headerlink\" title=\"组合（Composite）模式\"></a>组合（Composite）模式</h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</p>\n<p>组合模式是一种专为创建Web上的动态用户界面而量身定制的模式。使用这种模式，可以用一条命令在多个对象上激发复杂的或递归的行为。组合模式擅长于对大批对象进行操作。</p>\n<p>组合模式的好处，</p>\n<p>程序员可以用同样的方法处理对象的集合与其中的特定子对象<br>它可以用来把一批子对象组织成树形结构，并且使整棵树都可被便利<br>组合模式适用范围，</p>\n<p>存在一批组织成某处层次体系的对象（具体结构可能在开发期间无法知道）<br>希望对这批对象或其中的一部分对象实话一个操作<br>其实组合模式就是将一系列相似或相近的对象组合在一个大的对象，由这个大对象提供一些常用的接口来对这些小对象进行操作，代码可重用，对外操作简单。例如：对form内的元素，不考虑页面设计的情况下，一般就剩下input了，对于这些input都有name和value的属性，因此可以将这些input元素作为form对象的成员组合起来，form对象提供对外的接口，便可以实现一些简单的操作，比如设置某个input的value，添加/删除某个input等等。</p>\n<p>这种模式描述起来比较吃力，我从《JS设计模式》上找个一个实例，大家还是看代码吧。</p>\n<p>先创建组合对象类，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// DynamicGallery Class</span></div><div class=\"line\"><span class=\"keyword\">var</span> DynamicGallery = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123; <span class=\"comment\">// 实现Composite，GalleryItem组合对象类</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">    <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.id = id;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'dynamic-gallery'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">DynamicGallery.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 实现Composite组合对象接口</span></div><div class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(child);</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.appendChild(child.getElement());</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">child</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = <span class=\"keyword\">this</span>.getChild(i); i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (node == child) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.removeChild(child.getElement());</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getChild</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[i];</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实现DynamicGallery组合对象接口</span></div><div class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = <span class=\"keyword\">this</span>.getChild(i); i++) &#123;</div><div class=\"line\">            node.hide();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'block'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> node, i = <span class=\"number\">0</span>; node = getChild(i); i++) &#123;</div><div class=\"line\">            node.show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 帮助方法</span></div><div class=\"line\">    getElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>再创建叶对象类，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> GalleryImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123; <span class=\"comment\">// 实现Composite和GalleryItem组合对象中所定义的方法</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.className = <span class=\"string\">'gallery-image'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.element.src = src;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">GalleryImage.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 实现Composite接口</span></div><div class=\"line\">    <span class=\"comment\">// 这些是叶结点，所以我们不用实现这些方法，我们只需要定义即可</span></div><div class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">remove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getChild</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 实现GalleryItem接口</span></div><div class=\"line\">    hide: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">'none'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.element.style.display = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 帮助方法</span></div><div class=\"line\">    getElement: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们可以使用这两个类来管理图片，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> topGallery = <span class=\"keyword\">new</span> DynamicGallery(<span class=\"string\">'top-gallery'</span>);</div><div class=\"line\"></div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-1.jpg'</span>));</div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-2.jpg'</span>));</div><div class=\"line\">topGallery.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/image-3.jpg'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> vacationPhotos = <span class=\"keyword\">new</span> DyamicGallery(<span class=\"string\">'vacation-photos'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</div><div class=\"line\">    vacationPhotos.add(<span class=\"keyword\">new</span> GalleryImage(<span class=\"string\">'/img/vac/image-'</span> + i + <span class=\"string\">'.jpg'</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">topGallery.add(vacationPhotos);</div><div class=\"line\">topGallery.show();</div><div class=\"line\">vacationPhotos.hide();</div></pre></td></tr></table></figure>\n<h3 id=\"门面（facade）模式\"><a href=\"#门面（facade）模式\" class=\"headerlink\" title=\"门面（facade）模式\"></a>门面（facade）模式</h3><p>门面模式是几乎所有JavaScript库的核心原则</p>\n<p>子系统中的一组接口提供一个一致的界面，门面模式定义了一个高层接口，这个接口使得这一子系统更加容易使用，简单的说这是一种组织性的模式，它可以用来修改类和对象的接口，使其更便于使用。</p>\n<p>门面模式的两个作用，</p>\n<p>简化类的接口<br>消除类与使用它的客户代码之间的耦合<br>门面模式的使用目的就是图方便。</p>\n<p>想象一下计算机桌面上的那些快捷方式图标，它们就是在扮演一个把用户引导至某个地方的接口的角色，每次操作都是间接的执行一些幕后的命令。</p>\n<p>你在看这篇的博客的时候我就假设你已经有JavaScript的使用经验了，那么你一定写过或者看过这样的代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> addEvent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el, type, fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">        el.addEventListener(type, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">        el.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        el[<span class=\"string\">'on'</span> + type] = fn;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个就是一个JavaScript中常见的事件监听器函数，这个函数就是一个基本的门面，有了它，就有了为DOM节点添加事件监听器的简便方法。</p>\n<p>现在要说门面模式的精华部分了，为什么说JavaScript库几乎都会用这种模式类。假如现在要设计一个库，那么最好把其中所有的工具元素放在一起，这样更好用，访问起来更简便。看代码，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//_model.util是一个命名空间</span></div><div class=\"line\">_myModel.util.Event = &#123;</div><div class=\"line\">    <span class=\"attr\">getEvent</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getTarget</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> e.target || e.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">preventDefault</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.preventDefault) &#123;</div><div class=\"line\">            e.preventDefault();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            e.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件工具大概就是这么一个套路，然后结合addEvent函数使用</span></div><div class=\"line\">addEvent(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>], <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    alert(_myModel.util.Event.getTarget(e));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>个人认为，在处理游览器差异问题时最好的解决办法就是把这些差异抽取的门面方法中，这样可以提供一个更一致的接口，addEvent函数就是一个例子。</p>\n<h3 id=\"适配置器（Adapter）模式\"><a href=\"#适配置器（Adapter）模式\" class=\"headerlink\" title=\"适配置器（Adapter）模式\"></a>适配置器（Adapter）模式</h3><p>将一个类的接口转换成客户希望的另外一个接口</p>\n<p>配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，使用这种模式的对象又叫包装器，因为他们是在用一个新的接口包装另一个对象。</p>\n<p>从表面上看，它和门面模式有点相似，差别在于它们如何改变接口，门面模式展现的是一个简化的接口，它并不提供额外的选择，而适配器模式则要把一个接口转换为另一个接口，它并不会滤除某些能力，也不会简化接口。</p>\n<p>先来一个简单的示例看看，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//假如有一个3个字符串参数的函数，但是现在拥有的却是一个包含三个字符串元素的对象，那么就可以用一个配置器来衔接二者</span></div><div class=\"line\"><span class=\"keyword\">var</span> clientObject = &#123;</div><div class=\"line\">    <span class=\"attr\">str1</span>: <span class=\"string\">'bat'</span>,</div><div class=\"line\">    <span class=\"attr\">str2</span>: <span class=\"string\">'foo'</span>,</div><div class=\"line\">    <span class=\"attr\">str3</span>: <span class=\"string\">'baz'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interfaceMethod</span>(<span class=\"params\">str1, str2, str3</span>) </span>&#123;</div><div class=\"line\">    alert(str1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置器函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">adapterMethod</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    interfaceMethod(o.str1, o.str2, o.str3);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//adapterMethod函数的作为就在于对interfaceMethod函数进行包装，并把传递给它的参数转换为后者需要的形式。</span></div><div class=\"line\">adapterMethod(clientObject);</div></pre></td></tr></table></figure>\n<p>适配器模式的工作机制是：用一个新的接口对现有类得接口进行包装。</p>\n<p>示例：适配两个库。下面的例子要实现的是从Prototype库的$函数到YUI的get方法的转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先看它们在接口方面的差别</span></div><div class=\"line\"><span class=\"comment\">// Prototype $ function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">$</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> elements = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> element = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> element == <span class=\"string\">'string'</span>) &#123;</div><div class=\"line\">            element = <span class=\"built_in\">document</span>.getElementById(element);</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        if (typeof.length == 1) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            return element;</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">        elements.push(element);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> elements;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// YUI get method</span></div><div class=\"line\">YAHOO.util.Dom.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (YAHOO.lang.isString(el)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(el);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (YAHOO.lang.isArray(el)) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = [];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = el.length; i &lt; len; ++i) &#123;</div><div class=\"line\">            c[c.length] = YAHOO.util.Dom.get(el[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (el) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 二者区别就在于get具有一个参数，且可以是HTML,字符串或者数组；而$木有正是的参数，允许使用者传入任意数目的参数，不管HTML还是字符串。</span></div><div class=\"line\"><span class=\"comment\">// 如果需要从使用Prototype的$函数改为使用YUI的get方法（或者相反，那么用适配器模式其实很简单）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrototypeToYUIAdapter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> YAHOO.util.Dom.get(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">YUIToPrototypeAdapter</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> $.apply(<span class=\"built_in\">window</span>, el <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ? el : [el]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"享元（Flyweight）模式\"><a href=\"#享元（Flyweight）模式\" class=\"headerlink\" title=\"享元（Flyweight）模式\"></a>享元（Flyweight）模式</h3><p>运用共享技术有效地支持大量细粒度的对象。</p>\n<p>享元模式可以避免大量非常相似类的开销。在程序设计中有时需要生成大量细粒度的类实例来表示数据。如果发现这些实例除了几个参数外基本伤都是相同的，有时就能够受大幅度第减少需要实例化的类的数量。如果能把这些参数移到类实例外面，在方法调用时将他们传递进来，就可以通过共享大幅度地减少单个实例的数目。</p>\n<p>从实际出发说说自己的理解吧。</p>\n<p>组成部分，</p>\n<p>“享元”：抽离出来的外部操作和数据；<br>“工厂”：创造对象的工厂；<br>“存储器”：存储实例对象的对象或数组，供“享元”来统一控制和管理。<br>应用场景，</p>\n<p>页面存在大量资源密集型对象；<br>这些对象具备一定的共性，可以抽离出公用的操作和数据<br>关键，</p>\n<p>合理划分内部和外部数据。既要保持每个对象的模块性、保证享元的独立、可维护，又要尽可能多的抽离外部数据。<br>管理所有实例。既然抽离出了外部数据和操作，那享元就必须可以访问和控制实例对象。在JavaScript这种动态语言中，这个需求是很容易实现的：我们可以把工厂生产出的对象简单的扔在一个数组中。为每个对象设计暴露给外部的方法，便于享元的控制。<br>优点，</p>\n<p>将能耗大的操作抽离成一个，在资源密集型系统中，可大大减少资源和内存占用；<br>职责封装，这些操作独立修改和维护；<br>缺点，</p>\n<p>增加了实现复杂度。 将原本由一个工厂方法实现的功能，修改为了一个享元 + 一个工厂 + 一个存储器。<br>对象数量少的情况，可能会增大系统开销。<br>示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//汽车登记示例</span></div><div class=\"line\"><span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year, owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.make = make;</div><div class=\"line\">    <span class=\"keyword\">this</span>.model = model;</div><div class=\"line\">    <span class=\"keyword\">this</span>.year = year;</div><div class=\"line\">    <span class=\"keyword\">this</span>.owner = owner;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tag = tag;</div><div class=\"line\">    <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getMake</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.make;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getModel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getYear</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.year;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">transferOwner</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.owner = owner;</div><div class=\"line\">        <span class=\"keyword\">this</span>.tag = tag;</div><div class=\"line\">        <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">renewRegistration</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">renewDate</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.renewDate = renewDate;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数据量小到没多大的影响，数据量大的时候对计算机内存会产生压力，下面介绍享元模式优化后</span></div><div class=\"line\"><span class=\"comment\">//包含核心数据的Car类</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Car = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.make = make;</div><div class=\"line\">    <span class=\"keyword\">this</span>.model = model;</div><div class=\"line\">    <span class=\"keyword\">this</span>.year = year;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Car.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">getMake</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.make;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getModel</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getYear</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.year;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//中间对象，用来实例化Car类</span></div><div class=\"line\"><span class=\"keyword\">var</span> CarFactory = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> createdCars = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">createCar</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> car = createdCars[make + <span class=\"string\">\"-\"</span> + model + <span class=\"string\">\"-\"</span> + year];</div><div class=\"line\">            <span class=\"keyword\">return</span> car ? car : createdCars[make + <span class=\"string\">'-'</span> + model + <span class=\"string\">'-'</span> + year] = (<span class=\"keyword\">new</span> Car(make, model, year));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数据工厂，用来处理Car的实例化和整合附加数据</span></div><div class=\"line\"><span class=\"keyword\">var</span> CarRecordManager = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> carRecordDatabase = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">addCarRecord</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">make, model, year, owner, tag, renewDate</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> car = CarFactory.createCar(make, model, year);</div><div class=\"line\">            carRecordDatabase[tag] = &#123;</div><div class=\"line\">                <span class=\"attr\">owner</span>: owner,</div><div class=\"line\">                <span class=\"attr\">tag</span>: tag,</div><div class=\"line\">                <span class=\"attr\">renewDate</span>: renewDate,</div><div class=\"line\">                <span class=\"attr\">car</span>: car</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">transferOwnership</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag, newOwner, newTag, newRenewDate</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> record = carRecordDatabase[tag];</div><div class=\"line\">            record.owner = newOwner;</div><div class=\"line\">            record.tag = newTag;</div><div class=\"line\">            record.renewDate = newRenewDate;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">renewRegistration</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag, newRenewDate</span>) </span>&#123;</div><div class=\"line\">            carRecordDatabase[tag].renewDate = newRenewDate;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">getCarInfo</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">tag</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> carRecordDatabase[tag];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<h3 id=\"代理（Proxy）模式\"><a href=\"#代理（Proxy）模式\" class=\"headerlink\" title=\"代理（Proxy）模式\"></a>代理（Proxy）模式</h3><p>此模式最基本的形式是对访问进行控制</p>\n<p>代理对象和另一个对象（本体）实现的是同样的接口，可是实际上工作还是本体在做，它才是负责执行所分派的任务的那个对象或类，代理对象不会在另以对象的基础上修改任何方法，也不会简化那个对象的接口。</p>\n<p>举一个具体的情况：如果那个对象在某个远端服务器上，直接操作这个对象因为网络速度原因可能比较慢，那我们可以先用Proxy来代替那个对象。</p>\n<p>总之对于开销较大的对象，只有在使用它时才创建，这个原则可以为我们节省很多内存。《JS设计模式》上的图书馆示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Publication = <span class=\"keyword\">new</span> Interface(<span class=\"string\">'Publication'</span>, [<span class=\"string\">'getIsbn'</span>, <span class=\"string\">'setIsbn'</span>, <span class=\"string\">'getTitle'</span>, <span class=\"string\">'setTitle'</span>, <span class=\"string\">'getAuthor'</span>, <span class=\"string\">'setAuthor'</span>, <span class=\"string\">'display'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Book = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">isbn, title, author</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Publication</span></div><div class=\"line\">implements(Book, Publication);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* Library interface. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> Library = <span class=\"keyword\">new</span> Interface(<span class=\"string\">'Library'</span>, [<span class=\"string\">'findBooks'</span>, <span class=\"string\">'checkoutBook'</span>, <span class=\"string\">'returnBook'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* PublicLibrary class. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> PublicLibrary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">books</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Library</span></div><div class=\"line\">implements(PublicLibrary, Library);</div><div class=\"line\"></div><div class=\"line\">PublicLibrary.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">findBooks</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">searchString</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkoutBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">returnBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* PublicLibraryProxy class, a useless proxy. */</span></div><div class=\"line\"><span class=\"keyword\">var</span> PublicLibraryProxy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">catalog</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.library = <span class=\"keyword\">new</span> PublicLibrary(catalog);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// implements Library</span></div><div class=\"line\">implements(PublicLibraryProxy, Library);</div><div class=\"line\"></div><div class=\"line\">PublicLibraryProxy.prototype = &#123;</div><div class=\"line\">    <span class=\"attr\">findBooks</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">searchString</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.findBooks(searchString);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">checkoutBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.checkoutBook(book);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">returnBook</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">book</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.library.returnBook(book);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"观察者（Observer）模式\"><a href=\"#观察者（Observer）模式\" class=\"headerlink\" title=\"观察者（Observer）模式\"></a>观察者（Observer）模式</h3><p>定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</p>\n<p>观察者模式中存在两个角色,观察者和被观察者。在DOM的编程环境中的高级事件模式中，事件监听器说到底就是一种内置的观察者。事件处理器(handler)和时间监听器(listener)并不是一回事，前者就是一种把事件传给与其关联的函数的手段，而在后者中，一个时间可以与几个监听器关联，每个监听器都能独立于其他监听器而改变。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用时间监听器可以让多个函数相应一个事件</span></div><div class=\"line\"><span class=\"keyword\">var</span> fn1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//code</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//code</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, fn1);</div><div class=\"line\">addEvent(element, <span class=\"string\">'click'</span>, fn2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//而时间处理函数就办不到</span></div><div class=\"line\">element.onclick = fn1;</div><div class=\"line\">element.onclick = fn2;</div></pre></td></tr></table></figure>\n<p>观察者模式是开发基于行为的应用程序的有力手段，前端程序员可做的就是借助一个事件监听器替你处理各种行为，从而降低内存消耗和提高互动性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 用AngularJS实现观察者模式</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> services = angular.module(<span class=\"string\">'services'</span>, []);</div><div class=\"line\"></div><div class=\"line\">services.factory(<span class=\"string\">'ob'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> exports,</div><div class=\"line\">        channels = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    exports = &#123;</div><div class=\"line\">        <span class=\"attr\">subscribe</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!_.isArray(channels[topic])) &#123;</div><div class=\"line\">                channels[topic] = [];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic];</div><div class=\"line\">            handlers.push(callback);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">unsubscribe</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!_.isArray(channels[topic])) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic];</div><div class=\"line\">            <span class=\"keyword\">var</span> index = _.indexOf(handlers, callback);</div><div class=\"line\">            <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                handlers.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">publish</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topic, data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> handlers = channels[topic] || [];</div><div class=\"line\">            _.each(handlers, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">handler</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    handler.apply(self, [data]);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(ex);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> exports;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面就是观察者模式的核心实现。在实际项目中，可能会根据需求作一些微调。</p>\n<h3 id=\"命令（Command）模式\"><a href=\"#命令（Command）模式\" class=\"headerlink\" title=\"命令（Command）模式\"></a>命令（Command）模式</h3><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p>\n<p>命令对象是一个操作和用来调用这个操作的对象的结合体，所有的命名对象都有一个执行操作，其用途就是调用命令对象所绑定的操作。</p>\n<p>示例，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Calculator = &#123;</div><div class=\"line\">    <span class=\"attr\">add</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">substract</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x - y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">multiply</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x * y;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">divide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x / y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Calculator.calc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">command</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Calculator[command.type](command.op1, command.opd2)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'add'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">1</span>, <span class=\"attr\">op2</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'substract'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">5</span>, <span class=\"attr\">op2</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'multiply'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">5</span>, <span class=\"attr\">op2</span>: <span class=\"number\">2</span>&#125;);</div><div class=\"line\">Calculator.calc(&#123;<span class=\"attr\">type</span>: <span class=\"string\">'divide'</span>, <span class=\"attr\">op1</span>: <span class=\"number\">8</span>, <span class=\"attr\">op2</span>: <span class=\"number\">4</span>&#125;);</div></pre></td></tr></table></figure>\n<p>命名模式的主要用途是把调用对象（用户界面，API和代理等）与实现操作的对象隔离开，也就是说使对象间的互动方式需要更高的模块化时都可以用到这种模式。</p>\n<h3 id=\"职责链（Chain-Of-Responsibility）模式\"><a href=\"#职责链（Chain-Of-Responsibility）模式\" class=\"headerlink\" title=\"职责链（Chain Of Responsibility）模式\"></a>职责链（Chain Of Responsibility）模式</h3><p>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p>\n<p>职责链由多个不同类型的对象组成：发送者是发出请求的对象，而接收者则是接收请求并且对其进行处理或传递的对象，请求本身有时也是一个对象，它封装着与操作有关的所有数据。</p>\n<p>典型的流程大致是，</p>\n<p>发送者知道链中第一个接收者，它向这个接收者发出请求。<br>每一个接收者都对请求进行分析，然后要么处理它，要么将其往下传。<br>每一个接收者知道的其他对象只有一个，即它在链中的下家。<br>如果没有任何接收者处理请求，那么请求将从链上离开，不同的实现对此也有不同的反应，一般会抛出一个错误。<br>职责链模式的适用范围，</p>\n<p>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定<br>想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求<br>可处理一个请求的对象集合需要被动态指定。<br>确实对这种模式不了解，相关资料也较少，所以代码先不上了。看看大家对这个模式有木有什么好的理解或者能较好表达这种模式的代码，谢谢了。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>每种模式都有自己的优缺点，所以每种模式的正确使用还得看开发人员本身的功力；<br>就算不使用JavaScript设计模式一样可以写出复杂的可使用的代码，可是如果你想真正了解JavaScript面向对象能力，学习提高代码的模块化程度﹑可维护性﹑可靠性和效率，那么合理的运用JavaScript设计模式将会是一个优秀前端开发工程师必备的能力。</p>\n<ul>\n<li>EOF -</li>\n</ul>\n"},{"title":"AngularJS:select内置指令用法详解","date":"2016-04-28T09:00:00.000Z","description":"一直以为select内置指令只有一种用法。少年, 多看看官网, 即使maybe, 翻墙才行.","_content":"[原文转自蛋糕仙人：](http://gejiawen.github.io/)\n\n---\n\nselect指令是 AngularJS 预设的一组directive。这里是AngularJS官网给出的用法： [AngularJS:select](http://docs.angularjs.org/api/ng.directive:select)\n\n大概的意思是，select中的ngOption可以采用和ngRepeat指令类似的循环结构，其数据源可以是Array或者是Object。针对两种数据源又可以衍生出好几种用法。\n\n但是官网给出的例子太少了。\n\n下面是针对几个不太容易理解的用法示例。\n\n## 先上Controller\n\n```js\n\nfunction selectCtrl($scope) {\n    $scope.selected = '';\n\n    $scope.model = [{\n        id: 10001,\n        mainCategory: '男',\n        productName: '水洗T恤',\n        productColor: '白'\n    }, {\n        id: 10002,\n        mainCategory: '女',\n        productName: '圆领短袖',\n        productColor: '黑'\n    }, {\n        id: 10003,\n        mainCategory: '女',\n        productName: '短袖短袖',\n        productColor: '黄'\n    }];\n}\n\n```\n\n## 示例\n### 示例一：基本下拉效果\nusage:\nlabel for value in array\n\n```js\n<select ng-model=\"selected\" ng-options=\"m.productName for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例二：自定义下拉显示名称\nusage\nlabel for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"(m.productColor + ' - ' + m.productName) for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例三：让选项分组\nusage\nlabel group by groupName for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"(m.productColor + ' - ' + m.productName) group by m.mainCategory for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例四：自定义ngModel的绑定\nusage\nselect as label for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"m.id as m.productName for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```","source":"_posts/usage-for-angularjs-ng-select.md","raw":"---\ntitle: \"AngularJS:select内置指令用法详解\"\ndate: 2016-04-28 17:00:00\ntags: ['AngularJS', '内置指令']\ndescription: \"一直以为select内置指令只有一种用法。少年, 多看看官网, 即使maybe, 翻墙才行.\"\n\n---\n[原文转自蛋糕仙人：](http://gejiawen.github.io/)\n\n---\n\nselect指令是 AngularJS 预设的一组directive。这里是AngularJS官网给出的用法： [AngularJS:select](http://docs.angularjs.org/api/ng.directive:select)\n\n大概的意思是，select中的ngOption可以采用和ngRepeat指令类似的循环结构，其数据源可以是Array或者是Object。针对两种数据源又可以衍生出好几种用法。\n\n但是官网给出的例子太少了。\n\n下面是针对几个不太容易理解的用法示例。\n\n## 先上Controller\n\n```js\n\nfunction selectCtrl($scope) {\n    $scope.selected = '';\n\n    $scope.model = [{\n        id: 10001,\n        mainCategory: '男',\n        productName: '水洗T恤',\n        productColor: '白'\n    }, {\n        id: 10002,\n        mainCategory: '女',\n        productName: '圆领短袖',\n        productColor: '黑'\n    }, {\n        id: 10003,\n        mainCategory: '女',\n        productName: '短袖短袖',\n        productColor: '黄'\n    }];\n}\n\n```\n\n## 示例\n### 示例一：基本下拉效果\nusage:\nlabel for value in array\n\n```js\n<select ng-model=\"selected\" ng-options=\"m.productName for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例二：自定义下拉显示名称\nusage\nlabel for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"(m.productColor + ' - ' + m.productName) for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例三：让选项分组\nusage\nlabel group by groupName for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"(m.productColor + ' - ' + m.productName) group by m.mainCategory for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```\n\n示例四：自定义ngModel的绑定\nusage\nselect as label for value in array\n```js\n<select ng-model=\"selected\" ng-options=\"m.id as m.productName for m in model\">\n    <option value=\"\">-- 请选择 --</option>\n</select>\n```","slug":"usage-for-angularjs-ng-select","published":1,"updated":"2017-03-04T10:01:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizxsje4x000c7rjltbb0t3ir","content":"<p><a href=\"http://gejiawen.github.io/\" target=\"_blank\" rel=\"external\">原文转自蛋糕仙人：</a></p>\n<hr>\n<p>select指令是 AngularJS 预设的一组directive。这里是AngularJS官网给出的用法： <a href=\"http://docs.angularjs.org/api/ng.directive:select\" target=\"_blank\" rel=\"external\">AngularJS:select</a></p>\n<p>大概的意思是，select中的ngOption可以采用和ngRepeat指令类似的循环结构，其数据源可以是Array或者是Object。针对两种数据源又可以衍生出好几种用法。</p>\n<p>但是官网给出的例子太少了。</p>\n<p>下面是针对几个不太容易理解的用法示例。</p>\n<h2 id=\"先上Controller\"><a href=\"#先上Controller\" class=\"headerlink\" title=\"先上Controller\"></a>先上Controller</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">    $scope.selected = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    $scope.model = [&#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10001</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'男'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'水洗T恤'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'白'</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10002</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'女'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'圆领短袖'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'黑'</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10003</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'女'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'短袖短袖'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'黄'</span></div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"示例一：基本下拉效果\"><a href=\"#示例一：基本下拉效果\" class=\"headerlink\" title=\"示例一：基本下拉效果\"></a>示例一：基本下拉效果</h3><p>usage:<br>label for value in array</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"m.productName for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure>\n<p>示例二：自定义下拉显示名称<br>usage<br>label for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"(m.productColor + ' - ' + m.productName) for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例三：让选项分组<br>usage<br>label group by groupName for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"(m.productColor + ' - ' + m.productName) group by m.mainCategory for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例四：自定义ngModel的绑定<br>usage<br>select as label for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"m.id as m.productName for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p><a href=\"http://gejiawen.github.io/\">原文转自蛋糕仙人：</a></p>\n<hr>\n<p>select指令是 AngularJS 预设的一组directive。这里是AngularJS官网给出的用法： <a href=\"http://docs.angularjs.org/api/ng.directive:select\">AngularJS:select</a></p>\n<p>大概的意思是，select中的ngOption可以采用和ngRepeat指令类似的循环结构，其数据源可以是Array或者是Object。针对两种数据源又可以衍生出好几种用法。</p>\n<p>但是官网给出的例子太少了。</p>\n<p>下面是针对几个不太容易理解的用法示例。</p>\n<h2 id=\"先上Controller\"><a href=\"#先上Controller\" class=\"headerlink\" title=\"先上Controller\"></a>先上Controller</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectCtrl</span>(<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">    $scope.selected = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    $scope.model = [&#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10001</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'男'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'水洗T恤'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'白'</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10002</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'女'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'圆领短袖'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'黑'</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: <span class=\"number\">10003</span>,</div><div class=\"line\">        <span class=\"attr\">mainCategory</span>: <span class=\"string\">'女'</span>,</div><div class=\"line\">        <span class=\"attr\">productName</span>: <span class=\"string\">'短袖短袖'</span>,</div><div class=\"line\">        <span class=\"attr\">productColor</span>: <span class=\"string\">'黄'</span></div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"示例一：基本下拉效果\"><a href=\"#示例一：基本下拉效果\" class=\"headerlink\" title=\"示例一：基本下拉效果\"></a>示例一：基本下拉效果</h3><p>usage:<br>label for value in array</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"m.productName for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure>\n<p>示例二：自定义下拉显示名称<br>usage<br>label for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"(m.productColor + ' - ' + m.productName) for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例三：让选项分组<br>usage<br>label group by groupName for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"(m.productColor + ' - ' + m.productName) group by m.mainCategory for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n<p>示例四：自定义ngModel的绑定<br>usage<br>select as label for value in array<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select ng-model=<span class=\"string\">\"selected\"</span> ng-options=<span class=\"string\">\"m.id as m.productName for m in model\"</span>&gt;</div><div class=\"line\">    &lt;option value=\"\"&gt;-- 请选择 --&lt;/option&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/select&gt;</span></div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizxsje3u00007rjlyakf1wbn","tag_id":"cizxsje4400027rjlln8h8um1","_id":"cizxsje4x000b7rjltg9e4g4i"},{"post_id":"cizxsje3u00007rjlyakf1wbn","tag_id":"cizxsje4g00067rjlp43bl336","_id":"cizxsje4y000d7rjlxwsrkdh9"},{"post_id":"cizxsje4000017rjl3n64y0km","tag_id":"cizxsje4u00097rjlnvd19pgz","_id":"cizxsje52000g7rjlm47inou0"},{"post_id":"cizxsje4000017rjl3n64y0km","tag_id":"cizxsje4y000e7rjl6lvoz8e6","_id":"cizxsje52000h7rjl6l7nsooy"},{"post_id":"cizxsje4900037rjljw03j576","tag_id":"cizxsje4u00097rjlnvd19pgz","_id":"cizxsje53000k7rjltaoc3epg"},{"post_id":"cizxsje4900037rjljw03j576","tag_id":"cizxsje52000i7rjl9g2kysyw","_id":"cizxsje53000l7rjlufha4z7k"},{"post_id":"cizxsje4a00047rjldbvxn5is","tag_id":"cizxsje53000j7rjlg551aa5r","_id":"cizxsje54000o7rjl6xnrg0pi"},{"post_id":"cizxsje4a00047rjldbvxn5is","tag_id":"cizxsje53000m7rjl0ulilbv9","_id":"cizxsje54000p7rjlxqh16tf2"},{"post_id":"cizxsje4f00057rjl3wlchyxk","tag_id":"cizxsje53000n7rjlordhz8xo","_id":"cizxsje56000s7rjll1mozkw2"},{"post_id":"cizxsje4f00057rjl3wlchyxk","tag_id":"cizxsje4y000e7rjl6lvoz8e6","_id":"cizxsje56000t7rjlw0rx4khx"},{"post_id":"cizxsje4j00077rjl7gvglpmb","tag_id":"cizxsje4u00097rjlnvd19pgz","_id":"cizxsje5a000w7rjl91zbrbo7"},{"post_id":"cizxsje4j00077rjl7gvglpmb","tag_id":"cizxsje57000u7rjlgec0w6rq","_id":"cizxsje5a000x7rjl9bc8wrdl"},{"post_id":"cizxsje4p00087rjlcf6gmqem","tag_id":"cizxsje4u00097rjlnvd19pgz","_id":"cizxsje5d00107rjlvl97au2x"},{"post_id":"cizxsje4p00087rjlcf6gmqem","tag_id":"cizxsje4y000e7rjl6lvoz8e6","_id":"cizxsje5e00117rjl4jhyr21t"},{"post_id":"cizxsje4v000a7rjlxk8v3x1e","tag_id":"cizxsje4u00097rjlnvd19pgz","_id":"cizxsje5f00137rjljytc5sm0"},{"post_id":"cizxsje4v000a7rjlxk8v3x1e","tag_id":"cizxsje5c000z7rjl95u6gn51","_id":"cizxsje5g00147rjlrpgu7nxw"},{"post_id":"cizxsje4x000c7rjltbb0t3ir","tag_id":"cizxsje5e00127rjllhib2r8j","_id":"cizxsje5h00167rjlxqudbawb"},{"post_id":"cizxsje4x000c7rjltbb0t3ir","tag_id":"cizxsje5g00157rjl7px954g0","_id":"cizxsje5i00177rjlucy08pzg"}],"Tag":[{"name":"CSS","_id":"cizxsje4400027rjlln8h8um1"},{"name":"CSS命名","_id":"cizxsje4g00067rjlp43bl336"},{"name":"Javascript","_id":"cizxsje4u00097rjlnvd19pgz"},{"name":"技巧","_id":"cizxsje4y000e7rjl6lvoz8e6"},{"name":"异步编程模型","_id":"cizxsje52000i7rjl9g2kysyw"},{"name":"hexo","_id":"cizxsje53000j7rjlg551aa5r"},{"name":"github","_id":"cizxsje53000m7rjl0ulilbv9"},{"name":"css3","_id":"cizxsje53000n7rjlordhz8xo"},{"name":"做题","_id":"cizxsje57000u7rjlgec0w6rq"},{"name":"设计模式","_id":"cizxsje5c000z7rjl95u6gn51"},{"name":"AngularJS","_id":"cizxsje5e00127rjllhib2r8j"},{"name":"内置指令","_id":"cizxsje5g00157rjl7px954g0"}]}}